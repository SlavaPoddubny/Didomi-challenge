var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.998,1,1.578]],["body/components/AppComponent.html",[0,1.68,1,2.809,2,2.922,3,0.26,4,0.229,5,2.433,6,2.433,7,2.433,8,2.433,9,0.229,10,3.584,11,2.433,12,3.743,13,3.493,14,4.632,15,3.145,16,6.013,17,3.145,18,5.427,19,0.388,20,0.021,21,0.885,22,0.26,23,0.012,24,1.467,25,2.922,26,2.922,27,2.433,28,3.683,29,2.433,30,1.144,31,2.433,32,1.646,33,2.433,34,1.646,35,1.386,36,2.433,37,1.646,38,2.433,39,1.856,40,2.433,41,1.856,42,2.433,43,2.433,44,2.433,45,0.012,46,0.016,47,0.012]],["title/modules/AppModule.html",[48,0.797,49,2.241]],["body/modules/AppModule.html",[1,3.105,3,0.226,4,0.2,9,0.2,13,1.837,19,0.632,20,0.022,21,0.771,22,0.226,23,0.011,24,1.277,45,0.011,46,0.015,47,0.011,48,0.816,49,4.437,50,1.277,51,1.52,52,2.821,53,2.821,54,2.488,55,1.432,56,3.12,57,3.12,58,3.12,59,3.12,60,4.067,61,4.067,62,4.067,63,2.488,64,1.837,65,1.615,66,3.656,67,2.059,68,4.951,69,4.226,70,2.504,71,2.059,72,4.951,73,3.656,74,2.767,75,2.293,76,2.504,77,0.966,78,3.656,79,3.656,80,2.504,81,3.656,82,3.656,83,3.656]],["title/classes/AppPage.html",[23,0.01,84,2.704]],["body/classes/AppPage.html",[3,0.29,4,0.257,9,0.257,14,4.006,19,0.434,20,0.021,22,0.29,23,0.014,26,2.527,45,0.014,46,0.017,47,0.014,70,3.215,84,4.409,85,1.639,86,4.006,87,0.638,88,2.74,89,6.621,90,6.621,91,1.3,92,4.694,93,2.573,94,6.937,95,4.694,96,4.006,97,2.573,98,4.694,99,4.694,100,4.694,101,4.694]],["title/modules/AppRoutingModule.html",[48,0.797,60,2.241]],["body/modules/AppRoutingModule.html",[3,0.294,4,0.26,9,0.26,19,0.543,20,0.022,21,1.003,22,0.294,23,0.014,45,0.014,46,0.017,47,0.014,50,1.663,55,1.865,60,3.685,67,1.979,71,2.442,102,3.603,103,2.758,104,3.163,105,3.685,106,2.103,107,1.865,108,2.758,109,3.685,110,3.603,111,4.063,112,4.063,113,2.986,114,4.76]],["title/classes/Consent.html",[23,0.01,115,0.893]],["body/classes/Consent.html",[3,0.288,4,0.255,9,0.255,20,0.021,22,0.39,23,0.018,30,1.33,45,0.014,46,0.017,47,0.014,85,1.628,87,0.634,91,1.295,115,1.651,116,3.193,117,1.295,118,3.172,119,0.961,120,3.728,121,4.662,122,4.662,123,1.628,124,3.638,125,1.724,126,1.628,127,2.914,128,2.06,129,2.51,130,2.701,131,2.924]],["title/classes/ConsentRead.html",[23,0.01,123,1.248]],["body/classes/ConsentRead.html",[3,0.27,4,0.238,9,0.238,20,0.021,22,0.378,23,0.018,30,1.29,45,0.013,46,0.016,47,0.013,85,1.523,87,0.593,91,1.439,115,1.702,116,2.987,117,1.241,118,3.076,119,1.068,120,3.726,123,1.942,124,3.841,125,2.264,126,1.942,127,3.24,128,1.927,129,2.348,130,2.527,131,2.736,132,4.362,133,4.362,134,3.809,135,3.723,136,3.723]],["title/classes/ConsentWrite.html",[23,0.01,128,1.578]],["body/classes/ConsentWrite.html",[3,0.275,4,0.243,9,0.243,20,0.021,22,0.382,23,0.018,30,1.302,45,0.013,46,0.017,47,0.013,85,1.553,87,0.605,91,1.379,115,1.711,116,3.046,117,1.257,118,3.104,119,1.076,120,3.684,123,1.553,124,3.876,125,1.645,126,1.553,127,3.263,128,2.488,129,2.394,130,2.577,131,2.79,134,3.856,135,3.796,136,3.796,137,2.394,138,4.448]],["title/components/ConsentsComponent.html",[0,0.998,32,1.4]],["body/components/ConsentsComponent.html",[0,0.82,1,0.58,2,1.207,3,0.081,4,0.072,5,0.761,6,0.761,7,0.761,8,0.761,9,0.072,11,0.761,12,2.573,13,2.401,15,1.299,17,1.299,19,0.478,20,0.022,21,0.277,22,0.081,23,0.004,24,0.459,25,1.207,26,1.207,27,0.761,28,2.011,29,0.761,30,1.152,31,0.761,32,1.36,33,0.761,34,0.515,35,0.434,36,0.761,37,0.515,38,0.761,39,0.58,40,0.761,41,0.58,42,0.761,43,0.761,44,0.761,45,0.004,46,0.007,47,0.004,77,0.347,87,0.678,88,1.055,91,1.349,93,2.112,97,0.58,107,0.515,115,1.133,117,0.501,118,1.744,119,0.883,120,1.207,124,1.407,125,1.441,126,1.742,127,1.127,129,0.707,134,2.01,139,1.121,140,2.663,141,0.879,142,2.222,143,1.584,144,2.935,145,2.243,146,2.935,147,2.935,148,2.935,149,2.935,150,1.958,151,4.779,152,1.698,153,1.698,154,2.243,155,2.663,156,2.243,157,0.932,158,2.627,159,2.243,160,0.829,161,2.222,162,2.222,163,2.243,164,4.535,165,0.546,166,1.121,167,2.286,168,1.313,169,1.483,170,1.402,171,1.914,172,2.243,173,1.313,174,2.962,175,5.32,176,3.87,177,2.962,178,2.243,179,3.326,180,2.597,181,3.506,182,2.243,183,1.313,184,2.243,185,1.207,186,2.572,187,4.257,188,1.998,189,1.698,190,2.243,191,1.313,192,1.127,193,1.698,194,3.471,195,1.698,196,1.411,197,1.339,198,3.416,199,1.313,200,2.243,201,3.471,202,1.313,203,2.243,204,1.914,205,2.243,206,1.698,207,1.313,208,1.127,209,2.962,210,2.243,211,1.121,212,1.121,213,2.243,214,1.313,215,2.243,216,1.313,217,2.935,218,1.313,219,0.879,220,1.313,221,2.243,222,1.313,223,2.243,224,1.313,225,2.935,226,1.121,227,2.243,228,1.313,229,1.698,230,0.783,231,1.121,232,1.313,233,1.313,234,1.914,235,2.243,236,1.313,237,1.121,238,1.121,239,0.994,240,1.121,241,0.9,242,2.243,243,1.313,244,0.9,245,0.9,246,1.121,247,1.313,248,0.58,249,1.121,250,0.9,251,2.243,252,1.313,253,0.824,254,1.121,255,1.313,256,1.313,257,1.313,258,1.313,259,1.313,260,1.313,261,1.313,262,1.313,263,1.313,264,3.326,265,4.779,266,1.313,267,1.313,268,1.313,269,1.313,270,1.313,271,1.121,272,1.313,273,1.121,274,1.313,275,2.935,276,2.243,277,1.127,278,1.914,279,1.313,280,1.313,281,1.313,282,1.313,283,1.299,284,2.243,285,2.243,286,2.243,287,2.243,288,2.243,289,0.824,290,1.313,291,0.994,292,0.9,293,1.313,294,2.935,295,2.243,296,3.429,297,2.177,298,1.313,299,0.9,300,1.313,301,1.536,302,1.536,303,0.994,304,1.121,305,1.121,306,0.994,307,1.121,308,1.121,309,2.243,310,1.313,311,1.313,312,1.121,313,1.313,314,1.121,315,1.313,316,1.121,317,0.994,318,0.994,319,1.121,320,1.313,321,1.121,322,1.121,323,1.313,324,1.121,325,2.243,326,0.9,327,1.121,328,1.121]],["title/injectables/ConsentsEffect.html",[329,1.795,330,2.447]],["body/injectables/ConsentsEffect.html",[3,0.124,4,0.109,9,0.109,19,0.574,20,0.022,21,0.421,22,0.124,23,0.006,30,0.831,45,0.006,46,0.009,47,0.006,75,1.254,77,0.528,87,0.272,91,1.002,97,1.983,106,0.884,107,1.243,117,0.708,118,1.594,119,0.331,120,1.708,123,0.698,125,1.66,127,1.594,129,1.708,130,2.6,143,1.568,150,1.594,155,2.815,157,1.639,160,1.458,165,1.319,167,2.939,169,0.698,170,0.66,175,2.707,180,1.594,186,1.493,188,1.493,189,2.401,192,1.594,196,1.164,197,1.164,208,1.594,226,3.365,230,1.108,241,1.369,244,1.369,245,1.369,248,0.884,292,2.173,324,2.707,329,1.594,330,2.173,331,1.369,332,1.707,333,1.545,334,2,335,5.208,336,2.939,337,4.659,338,2,339,5.208,340,3.172,341,4.488,342,3.172,343,2.707,344,3.172,345,3.172,346,3.172,347,3.172,348,3.172,349,3.172,350,3.172,351,1.708,352,3.172,353,3.567,354,5.208,355,4.445,356,5.208,357,4.286,358,5.208,359,5.208,360,2.707,361,3.172,362,5.208,363,4.488,364,3.172,365,2.815,366,2,367,3.172,368,3.172,369,3.172,370,3.365,371,3.172,372,4.445,373,3.83,374,3.172,375,3.172,376,2.401,377,3.172,378,3.172,379,1.594,380,3.172,381,3.172,382,3.172,383,4.894,384,2,385,3.172,386,3.172,387,3.172,388,3.172,389,3.172,390,3.172,391,3.172,392,2,393,1.369,394,2,395,2,396,2,397,2,398,1.076,399,2,400,2,401,2,402,2,403,1.514,404,1.005,405,1.707,406,1.254,407,1.005,408,2.707]],["title/modules/ConsentsModule.html",[48,0.797,409,2.447]],["body/modules/ConsentsModule.html",[3,0.209,4,0.185,9,0.185,19,0.65,20,0.022,21,0.713,22,0.209,23,0.01,24,1.181,32,2.481,45,0.01,46,0.014,47,0.01,48,0.755,50,1.181,51,1.406,52,2.709,53,1.699,54,2.709,55,1.325,63,2.359,64,1.699,65,1.494,67,1.952,71,1.952,74,2.56,75,2.122,76,2.316,77,0.894,80,2.316,143,1.181,167,1.821,186,1.591,237,2.886,238,2.886,250,2.316,336,3.409,403,2.56,407,2.359,409,4.751,410,2.886,411,2.886,412,2.886,413,2.886,414,3.972,415,3.669,416,3.382,417,2.72,418,1.821,419,3.215,420,2.122,421,2.122,422,4.694,423,4.694,424,4.006,425,2.886,426,4.694,427,3.382,428,2.316,429,2.886,430,2.886,431,2.56,432,2.56,433,2.886,434,2.886,435,2.886]],["title/interfaces/ConsentsModuleStore.html",[406,2.241,436,1.485]],["body/interfaces/ConsentsModuleStore.html",[3,0.287,4,0.254,9,0.254,19,0.535,20,0.022,22,0.408,45,0.014,46,0.017,47,0.014,77,1.228,87,0.632,107,2.47,117,1.292,119,0.77,143,2.417,406,3.954,407,2.334,436,1.932,437,2.692,438,3.517,439,6.302,440,4.38,441,3.965,442,4.646,443,4.646,444,3.517,445,3.965,446,3.965,447,3.517,448,3.965]],["title/modules/ConsentsRoutingModule.html",[48,0.797,414,2.241]],["body/modules/ConsentsRoutingModule.html",[0,1.321,3,0.292,4,0.258,9,0.258,19,0.587,20,0.022,21,0.996,22,0.292,23,0.014,32,2.292,45,0.014,46,0.017,47,0.014,50,1.651,55,1.852,67,1.965,71,2.432,103,2.739,104,3.149,105,3.669,106,2.089,107,1.852,108,2.739,109,3.669,113,2.965,414,3.669,430,4.034,449,3.578,450,3.578]],["title/injectables/ConsentsService.html",[329,1.795,336,1.923]],["body/injectables/ConsentsService.html",[3,0.216,4,0.191,9,0.191,19,0.572,20,0.022,21,0.735,22,0.216,23,0.01,30,1.244,45,0.01,46,0.014,47,0.01,87,0.474,88,2.256,91,1.317,93,2.421,97,2.421,115,1.198,119,1.059,123,2.061,125,1.289,126,2.16,137,2.581,150,1.752,160,1.773,165,1.449,169,2.061,170,1.948,180,1.752,188,1.641,189,2.639,206,3.629,248,1.54,253,2.187,329,2.409,331,2.388,333,1.878,336,2.581,370,2.976,372,2.976,373,2.976,393,2.388,398,1.877,451,2.976,452,3.007,453,3.486,454,5.9,455,3.486,456,4.794,457,4.091,458,3.486,459,4.484,460,4.794,461,3.486,462,3.486,463,3.486,464,2.639,465,3.486,466,3.486,467,4.794,468,5.479,469,2.639,470,2.976,471,3.486,472,3.486,473,3.486,474,3.486]],["title/injectables/ConsentsServiceMock.html",[329,1.795,475,2.704]],["body/injectables/ConsentsServiceMock.html",[3,0.222,4,0.197,9,0.197,19,0.515,20,0.022,21,0.758,22,0.222,23,0.01,30,1.26,45,0.011,46,0.014,47,0.011,87,0.489,88,2.305,91,1.335,93,2.46,97,2.46,115,1.494,117,1.093,118,2.461,119,0.923,123,2.254,125,2.059,126,1.945,127,2.461,160,1.811,169,1.711,170,1.617,196,1.062,197,1.062,206,3.707,248,1.59,277,2.461,329,2.461,331,2.464,333,1.919,398,1.937,452,3.75,457,4.18,459,4.522,475,3.707,476,3.07,477,3.597,478,3.597,479,3.597,480,4.18,481,4.18,482,4.18,483,3.707,484,3.707,485,3.707,486,3.707,487,3.707,488,3.707,489,3.707,490,3.707,491,3.707,492,3.597,493,3.597]],["title/interfaces/ConsentsState.html",[436,1.485,494,2.241]],["body/interfaces/ConsentsState.html",[3,0.205,4,0.182,9,0.182,19,0.429,20,0.022,22,0.389,45,0.01,46,0.014,47,0.01,87,0.452,97,2.554,107,2.265,117,1.035,119,0.885,123,1.62,126,1.161,131,3.351,137,2.497,143,2.303,185,3.273,186,2.861,196,0.982,219,1.302,248,1.469,277,2.33,283,3.523,351,3.112,365,4.136,379,2.904,404,2.33,405,2.837,436,1.382,437,1.926,452,2.085,494,4.054,495,2.276,496,1.789,497,5.189,498,3.176,499,2.516,500,2.516,501,2.837,502,2.837,503,4.559,504,1.926,505,4.136,506,1.926,507,3.324,508,3.324,509,1.926,510,2.837,511,2.837,512,2.516,513,2.837,514,2.516,515,2.837]],["title/modules/CoreModule.html",[48,0.797,61,2.241]],["body/modules/CoreModule.html",[3,0.252,4,0.223,9,0.223,19,0.618,20,0.022,21,0.859,22,0.252,23,0.012,24,1.423,45,0.012,46,0.016,47,0.012,48,0.909,49,2.555,50,1.423,51,1.693,52,2.047,53,2.047,54,2.977,55,1.596,61,4.273,63,2.673,64,2.047,65,1.8,67,1.693,71,2.212,104,2.865,106,1.8,170,1.345,185,2.193,230,1.423,351,2.193,393,2.79,417,3.083,418,2.193,470,3.476,516,3.476,517,3.476,518,4.194,519,4.073,520,5.321,521,5.321,522,5.321,523,4.073,524,4.073,525,4.073,526,4.073,527,5.321,528,4.073,529,4.073,530,4.073]],["title/classes/CreateNewConsent.html",[23,0.01,333,1.4]],["body/classes/CreateNewConsent.html",[3,0.192,4,0.17,9,0.17,19,0.408,20,0.022,22,0.392,23,0.017,30,0.654,35,1.459,45,0.009,46,0.013,47,0.009,77,0.82,85,1.084,87,0.422,91,1.149,115,1.401,117,0.986,119,1.108,123,1.543,125,1.147,126,2.151,128,2.618,141,2.413,143,1.958,150,2.22,157,2.139,160,1.903,165,1.29,169,1.084,170,1.024,180,2.22,188,2.421,192,2.586,196,0.916,197,0.916,208,1.559,219,2.483,230,1.084,248,1.371,333,2.197,379,1.559,404,1.559,496,1.671,504,1.798,506,1.798,509,1.798,531,1.559,532,2.772,533,4.064,534,3.412,535,1.947,536,4.419,537,3.103,538,2.772,539,1.671,540,2.981,541,2.421,542,1.798,543,2.421,544,1.798,545,1.798,546,3.717,547,1.947]],["title/components/GiveConsentComponent.html",[0,0.998,34,1.4]],["body/components/GiveConsentComponent.html",[0,1.104,1,0.886,2,1.712,3,0.124,4,0.11,5,1.162,6,1.162,7,1.162,8,1.162,9,0.11,11,1.162,12,3.052,13,2.848,15,1.842,17,1.842,19,0.505,20,0.022,21,0.423,22,0.124,23,0.006,24,0.7,25,1.712,26,1.712,27,1.162,28,2.605,29,1.162,30,1.23,31,1.162,32,0.786,33,1.162,34,1.762,35,1.974,36,1.162,37,0.786,38,1.162,39,0.886,40,1.162,41,0.886,42,1.162,43,1.162,44,1.162,45,0.006,46,0.009,47,0.006,77,0.53,87,0.273,88,1.496,91,1.164,93,1.986,97,1.405,107,1.246,115,1.303,117,0.71,118,2.746,119,0.655,126,1.57,127,1.008,129,1.08,130,3.166,141,1.246,142,2.99,155,3.428,158,3.403,165,0.834,166,1.712,167,2.942,169,1.111,170,1.05,171,2.714,177,2.714,179,1.712,181,3.075,186,1.496,187,1.712,196,0.592,197,0.592,198,2.178,209,1.712,244,1.374,245,1.374,249,1.712,250,1.374,253,1.258,264,1.712,271,2.714,273,2.714,277,1.008,278,1.712,289,1.258,291,1.518,296,2.82,297,1.258,301,1.374,302,1.374,326,1.374,351,1.08,365,1.258,548,3.428,549,4.664,550,1.712,551,3.951,552,3.18,553,3.951,554,4.496,555,4.496,556,3.18,557,3.951,558,4.496,559,3.18,560,2.005,561,3.18,562,3.18,563,2.005,564,3.18,565,3.18,566,3.18,567,3.18,568,3.18,569,3.18,570,2.005,571,3.18,572,3.18,573,2.714,574,4.496,575,4.496,576,3.951,577,3.18,578,2.005,579,3.951,580,2.005,581,3.951,582,3.18,583,1.518,584,2.005,585,1.712,586,2.005,587,2.005,588,2.005,589,2.005,590,2.005,591,3.18,592,3.18,593,2.005,594,2.005,595,2.005,596,3.18,597,3.18,598,2.005,599,2.005,600,2.005,601,2.005,602,3.372,603,3.18,604,2.005,605,5.465,606,3.18,607,3.18,608,3.18,609,3.18,610,3.18,611,2.714,612,3.18,613,2.005,614,1.712,615,2.005,616,2.005,617,2.005,618,2.005,619,1.712,620,1.712]],["title/modules/GiveConsentModule.html",[48,0.797,621,2.447]],["body/modules/GiveConsentModule.html",[3,0.203,4,0.18,9,0.18,19,0.651,20,0.022,21,0.694,22,0.203,23,0.009,24,1.15,34,2.46,35,1.087,45,0.01,46,0.014,47,0.01,48,0.735,50,1.15,51,1.368,52,2.67,53,1.654,54,2.67,55,1.29,63,2.314,64,1.654,65,1.454,67,1.915,71,1.915,74,2.492,75,2.065,76,2.254,77,0.87,80,2.254,115,0.823,167,1.772,186,1.549,250,2.254,336,3.38,403,2.492,407,2.314,415,3.638,417,2.669,418,1.772,419,3.155,420,2.065,421,2.065,424,3.931,425,2.809,428,2.254,429,2.809,431,2.492,432,2.492,433,2.809,434,2.809,435,2.809,548,2.065,583,2.492,621,4.729,622,2.809,623,2.809,624,2.809,625,3.292,626,3.938,627,2.065,628,3.292,629,4.606,630,4.606,631,3.292,632,3.292,633,4.606,634,3.292,635,4.606,636,3.292,637,2.809,638,2.809]],["title/modules/GiveConsentRoutingModule.html",[48,0.797,626,2.241]],["body/modules/GiveConsentRoutingModule.html",[0,1.307,3,0.289,4,0.256,9,0.256,19,0.584,20,0.022,21,0.986,22,0.289,23,0.013,34,2.277,45,0.014,46,0.017,47,0.014,50,1.634,55,1.833,67,1.945,71,2.416,103,2.71,104,3.129,105,3.646,106,2.067,107,1.833,108,2.71,109,3.646,113,2.935,115,1.169,450,3.541,548,2.935,626,3.646,627,2.935,637,3.992,638,3.992]],["title/classes/HideAfterModuleLoaded.html",[23,0.01,639,2.07]],["body/classes/HideAfterModuleLoaded.html",[3,0.269,4,0.238,9,0.238,19,0.402,20,0.022,22,0.398,23,0.016,45,0.013,46,0.016,47,0.013,48,1.239,77,1.149,85,1.519,87,0.591,91,0.971,117,1.239,119,1.102,141,2.395,185,2.341,196,1.284,197,1.284,219,2.607,283,2.519,534,3.467,539,2.341,639,3.731,640,2.727,641,4.201,642,4.348,643,2.978,644,3.542,645,2.988,646,2.978,647,3.291,648,3.291,649,3.711,650,2.978]],["title/classes/LoadConsents.html",[23,0.01,157,1.485]],["body/classes/LoadConsents.html",[3,0.191,4,0.168,9,0.168,19,0.406,20,0.022,22,0.391,23,0.017,30,0.65,35,1.452,45,0.009,46,0.013,47,0.009,77,0.815,85,1.076,87,0.419,91,1.144,115,1.397,117,0.982,119,1.14,123,1.536,125,1.14,126,2.146,128,1.943,137,2.76,141,2.408,143,1.952,150,2.209,157,2.324,160,1.895,165,1.281,169,1.076,170,1.017,180,2.209,188,2.412,192,2.576,196,0.91,197,0.91,208,1.549,219,2.478,230,1.076,248,1.362,333,2.009,379,1.549,404,1.549,496,1.659,504,2.548,506,1.786,509,1.786,531,1.549,532,2.758,533,4.057,534,3.405,535,1.933,538,1.933,539,1.659,540,2.97,541,2.412,542,1.786,543,2.412,544,1.786,545,1.786,546,3.708,547,1.933,651,4.397,652,3.082]],["title/classes/LoadConsentsFailed.html",[23,0.01,543,1.681]],["body/classes/LoadConsentsFailed.html",[3,0.193,4,0.171,9,0.171,19,0.41,20,0.022,22,0.393,23,0.017,30,0.659,35,1.466,45,0.009,46,0.013,47,0.009,77,0.826,85,1.091,87,0.425,91,1.153,115,1.406,117,0.991,119,1.109,123,1.551,125,1.155,126,2.156,128,1.962,141,2.419,143,1.964,150,2.231,157,2.148,160,1.91,165,1.299,169,1.091,170,1.032,180,2.231,188,2.431,192,2.595,196,0.923,197,0.923,208,1.57,219,2.488,230,1.091,248,1.381,333,2.024,379,1.57,404,1.57,496,1.682,504,1.81,506,1.81,509,2.573,531,1.57,532,2.786,533,4.071,534,3.419,535,1.96,538,1.96,539,1.682,540,2.993,541,2.431,542,1.81,543,2.647,544,1.81,545,1.81,546,3.727,547,1.96,653,4.44,654,3.125]],["title/classes/LoadConsentsSucceeded.html",[23,0.01,541,1.681]],["body/classes/LoadConsentsSucceeded.html",[3,0.191,4,0.168,9,0.168,19,0.406,20,0.022,22,0.391,23,0.017,30,0.65,35,1.452,45,0.009,46,0.013,47,0.009,77,0.815,85,1.076,87,0.419,91,1.144,115,1.397,117,0.982,119,1.14,123,1.536,125,1.14,126,2.146,128,1.943,137,2.76,141,2.408,143,1.952,150,2.209,157,2.131,160,1.895,165,1.281,169,1.076,170,1.017,180,2.209,188,2.412,192,2.576,196,0.91,197,0.91,208,1.549,219,2.478,230,1.076,248,1.362,333,2.009,379,1.549,404,1.549,496,1.659,504,1.786,506,2.548,509,1.786,531,1.549,532,2.758,533,4.057,534,3.405,535,1.933,538,1.933,539,1.659,540,2.97,541,2.63,542,1.786,543,2.412,544,1.786,545,1.786,546,3.708,547,1.933,655,4.397,656,3.082]],["title/components/MainComponent.html",[0,0.998,37,1.4]],["body/components/MainComponent.html",[0,1.558,1,1.594,2,2.642,3,0.223,4,0.197,5,2.09,6,2.09,7,2.09,8,2.09,9,0.197,11,2.09,12,3.62,13,3.378,15,2.843,17,2.843,19,0.454,20,0.022,21,0.76,22,0.223,23,0.01,24,1.26,25,2.642,26,2.642,27,2.09,28,3.468,29,2.09,30,1.034,31,2.09,32,1.413,33,2.09,34,1.413,35,1.841,36,2.09,37,2.345,38,2.09,39,1.594,40,2.09,41,1.594,42,2.09,43,2.09,44,2.09,45,0.011,46,0.014,47,0.011,115,1.226,143,1.714,193,3.714,195,2.73,289,2.263,292,2.47,296,4.051,297,3.078,299,2.47,312,3.078,316,3.078,317,3.714,318,2.73,319,3.078,326,2.47,328,3.078,657,3.078,658,5.576,659,4.907,660,4.907,661,4.907,662,4.907,663,4.907,664,3.078,665,4.907,666,3.607,667,3.607,668,3.607,669,3.607,670,3.078]],["title/modules/MainModule.html",[48,0.797,671,2.447]],["body/modules/MainModule.html",[3,0.242,4,0.214,9,0.214,19,0.641,20,0.022,21,0.824,22,0.242,23,0.011,24,1.365,37,2.59,45,0.011,46,0.015,47,0.011,48,0.873,50,1.365,51,1.625,52,2.918,53,1.964,54,1.964,55,1.532,63,2.602,64,1.964,65,1.727,67,2.153,71,2.153,80,2.677,104,2.788,106,1.727,186,1.839,193,2.959,417,3,418,2.104,419,3.547,420,2.452,421,2.452,431,2.959,432,2.959,671,4.689,672,3.336,673,3.336,674,3.336,675,4.147,676,3.909,677,5.178,678,3.909,679,5.178,680,3.909,681,5.178,682,3.909,683,3.336]],["title/modules/MainRoutingModule.html",[48,0.797,675,2.241]],["body/modules/MainRoutingModule.html",[0,1.181,3,0.261,4,0.231,9,0.231,19,0.558,20,0.022,21,0.891,22,0.261,23,0.012,35,1.395,37,2.135,45,0.012,46,0.016,47,0.012,50,1.476,55,1.656,67,1.757,71,2.266,103,2.448,104,2.934,105,3.418,106,1.867,107,1.656,108,2.448,109,4.137,110,4.125,113,3.418,115,1.056,143,1.903,450,3.199,469,3.199,627,2.651,675,3.418,683,3.607,684,3.199,685,3.607,686,3.607,687,3.607,688,3.607,689,3.607,690,3.607,691,3.607]],["title/interfaces/MockPrivate.html",[436,1.485,692,2.704]],["body/interfaces/MockPrivate.html",[3,0.326,4,0.288,9,0.288,20,0.02,22,0.326,30,1.318,45,0.016,46,0.018,47,0.016,91,1.179,120,3.367,436,2.195,437,3.059,692,4.734,693,5.338,694,4.506,695,5.279,696,5.279,697,5.279]],["title/classes/MockStore.html",[23,0.01,698,2.704]],["body/classes/MockStore.html",[3,0.236,4,0.208,9,0.208,12,2.051,19,0.352,20,0.022,22,0.236,23,0.011,30,1.208,45,0.011,46,0.015,47,0.011,85,1.331,87,0.518,88,2.396,91,1.424,93,2.704,97,2.249,117,1.137,119,1.014,155,3.597,169,2.003,170,1.893,181,3.194,186,1.793,196,1.125,197,1.125,219,1.493,230,1.778,239,3.854,353,4.191,398,2.051,408,4.345,459,4.368,505,3.597,698,3.854,699,5.6,700,3.252,701,5.091,702,5.734,703,5.091,704,3.81,705,5.091,706,3.81,707,3.81,708,5.091,709,3.81,710,3.81,711,5.091,712,5.734,713,3.81,714,3.81,715,5.091]],["title/classes/RemoveConsent.html",[23,0.01,160,1.321]],["body/classes/RemoveConsent.html",[3,0.191,4,0.168,9,0.168,19,0.406,20,0.022,22,0.391,23,0.017,30,0.65,35,1.452,45,0.009,46,0.013,47,0.009,77,0.815,85,1.076,87,0.419,91,1.144,115,1.397,117,0.982,119,1.14,123,1.536,125,1.14,126,2.146,128,1.943,137,2.76,141,2.408,143,1.952,150,2.209,157,2.131,160,2.067,165,1.281,169,1.076,170,1.017,180,2.209,188,2.412,192,2.576,196,0.91,197,0.91,208,1.549,219,2.478,230,1.076,248,1.362,333,2.009,379,1.549,404,1.549,496,1.659,504,1.786,506,1.786,509,1.786,531,1.549,532,2.758,533,4.057,534,3.405,535,1.933,538,1.933,539,1.659,540,2.97,541,2.412,542,1.786,543,2.412,544,1.786,545,1.786,546,3.708,547,2.758,716,4.397,717,3.082]],["title/classes/ShowOnModuleLoading.html",[23,0.01,644,2.07]],["body/classes/ShowOnModuleLoading.html",[3,0.269,4,0.238,9,0.238,19,0.402,20,0.022,22,0.398,23,0.016,45,0.013,46,0.016,47,0.013,48,1.239,77,1.149,85,1.519,87,0.591,91,0.971,117,1.239,119,1.102,141,2.395,185,2.341,196,1.284,197,1.284,219,2.607,283,2.519,534,3.467,539,2.341,639,3.542,640,2.727,641,3.291,643,2.978,644,3.731,645,2.988,646,2.978,647,3.291,648,4.201,649,3.711,650,2.978,718,4.348]],["title/components/SpinnerComponent.html",[0,0.998,39,1.578]],["body/components/SpinnerComponent.html",[0,1.215,1,1.029,2,1.924,3,0.144,4,0.127,5,1.35,6,1.35,7,1.35,8,1.35,9,0.127,11,1.35,12,3.21,13,2.995,15,2.071,17,2.071,19,0.534,20,0.022,21,0.491,22,0.144,23,0.007,24,0.814,25,1.924,26,1.924,27,1.35,28,2.825,29,1.35,30,0.916,31,1.35,32,0.913,33,1.35,34,0.913,35,0.769,36,1.35,37,0.913,38,1.35,39,2.154,40,1.35,41,1.029,42,1.35,43,1.35,44,1.35,45,0.007,46,0.011,47,0.007,65,1.029,77,0.616,87,0.486,88,1.682,91,1.239,93,1.921,106,1.029,117,0.798,119,0.592,124,2.242,134,2.978,140,3.481,141,1.4,142,3.291,152,2.705,153,2.705,155,1.461,158,3.691,161,3.291,162,3.291,165,0.969,167,2.625,169,0.814,170,0.769,181,3.299,196,1.055,197,1.055,198,2.448,204,4.161,211,1.988,212,1.988,229,2.705,230,0.814,231,1.988,239,1.763,240,1.988,241,1.595,246,1.988,253,1.461,254,1.988,277,2.788,289,1.461,291,2.705,292,3.339,296,2.242,297,1.461,299,2.448,301,1.595,302,1.595,303,3.291,306,2.705,314,1.988,321,1.988,327,3.711,337,4.931,351,1.254,353,1.595,614,3.05,619,3.05,645,2.625,719,1.988,720,4.348,721,3.574,722,4.348,723,1.988,724,3.574,725,3.05,726,2.33,727,3.574,728,3.574,729,3.574,730,3.574,731,3.574,732,1.988,733,1.763,734,2.33,735,2.33,736,2.33,737,2.33,738,2.33,739,4.876,740,2.33,741,3.05,742,1.988,743,1.988,744,4.348,745,2.33,746,4.876,747,2.33,748,2.33,749,2.33,750,2.33,751,2.33,752,3.574,753,3.574,754,2.33,755,2.33,756,2.33,757,3.574,758,2.33,759,2.33,760,2.33,761,2.33,762,3.574,763,2.33,764,2.33,765,2.33,766,3.574,767,3.574,768,2.33,769,2.33]],["title/interceptors/SpinnerInterceptor.html",[518,2.241,770,3.049]],["body/interceptors/SpinnerInterceptor.html",[3,0.218,4,0.193,9,0.193,19,0.593,20,0.022,21,0.744,22,0.218,23,0.01,30,1.019,45,0.01,46,0.014,47,0.01,51,1.468,77,0.933,87,0.48,88,2.276,91,1.231,93,1.561,97,1.561,107,1.384,117,1.08,119,0.914,126,1.234,141,1.384,165,1.468,167,3.194,169,1.689,170,1.597,196,1.043,197,1.043,198,2.419,241,2.419,253,2.216,277,2.771,329,2.43,353,2.419,355,4.128,393,2.419,398,1.901,459,3.778,518,3.034,602,4.708,611,3.014,645,1.901,646,2.419,723,3.014,725,4.128,732,3.014,733,2.673,741,4.128,742,3.014,743,3.014,771,3.532,772,3.014,773,5.516,774,4.837,775,4.837,776,4.837,777,6.214,778,5.932,779,3.532,780,4.837,781,4.837,782,3.532,783,3.532,784,3.532,785,3.532,786,5.932,787,3.532,788,3.532,789,3.532]],["title/modules/SpinnerModule.html",[48,0.797,62,2.241]],["body/modules/SpinnerModule.html",[3,0.257,4,0.227,9,0.227,19,0.622,20,0.022,21,0.877,22,0.257,23,0.012,24,1.453,39,3.166,45,0.012,46,0.016,47,0.012,48,0.929,50,1.453,51,1.73,52,3.008,53,2.091,54,2.091,55,2.346,62,4.294,63,2.711,64,2.091,65,1.838,67,1.73,71,2.243,76,2.85,77,1.1,104,2.904,106,1.838,407,2.711,417,3.126,418,2.24,733,3.15,790,3.551,791,3.551,792,3.551,793,4.161,794,4.161,795,4.161]],["title/interfaces/SpinnerModuleStore.html",[436,1.485,796,2.704]],["body/interfaces/SpinnerModuleStore.html",[3,0.296,4,0.262,9,0.262,19,0.545,20,0.021,22,0.395,45,0.014,46,0.017,47,0.014,77,1.267,87,0.652,107,2.312,117,1.317,119,0.794,407,2.409,436,1.993,437,2.778,440,4.466,441,4.091,645,3.687,796,4.466,797,3.629,798,6.392,799,4.794,800,4.794,801,4.091,802,3.629,803,4.091]],["title/interfaces/SpinnerState.html",[436,1.485,804,2.241]],["body/interfaces/SpinnerState.html",[3,0.259,4,0.229,9,0.229,19,0.387,20,0.022,22,0.392,45,0.012,46,0.016,47,0.012,87,0.569,97,2.653,107,2.122,117,1.209,119,0.694,131,3.767,219,1.64,351,2.254,365,3.398,436,1.741,437,2.426,498,3.71,499,3.169,500,3.169,501,3.573,502,3.573,503,4.623,505,4.3,641,3.169,643,2.867,648,3.169,650,3.71,804,4.125,805,2.867,806,5.259,807,4.186,808,3.573]],["title/components/ToolbarComponent.html",[0,0.998,41,1.578]],["body/components/ToolbarComponent.html",[0,1.535,1,1.548,2,2.59,3,0.217,4,0.192,5,2.03,6,2.03,7,2.03,8,2.03,9,0.192,11,2.03,12,3.595,13,3.355,15,2.787,17,2.787,19,0.445,20,0.022,21,0.739,22,0.217,23,0.01,24,1.224,25,2.59,26,2.59,27,2.03,28,3.426,29,2.03,30,1.014,31,2.03,32,1.373,33,2.03,34,1.373,35,1.157,36,2.03,37,1.373,38,2.03,39,1.548,40,2.03,41,2.613,42,3.426,43,2.03,44,2.03,45,0.01,46,0.014,47,0.01,87,0.477,91,0.782,119,0.581,120,2.59,195,3.642,289,2.198,296,4.113,297,2.198,299,2.4,301,2.4,302,2.4,303,2.653,304,2.991,305,2.991,306,2.653,307,2.991,308,2.991,317,4.158,318,2.653,326,2.4,664,2.991,670,2.991,809,2.991,810,5.493,811,4.811,812,4.811,813,6.197,814,3.504,815,4.811,816,4.106,817,3.504,818,4.811,819,3.504,820,3.504,821,3.504]],["title/modules/ToolbarModule.html",[48,0.797,415,2.07]],["body/modules/ToolbarModule.html",[3,0.261,4,0.231,9,0.231,19,0.61,20,0.022,21,0.891,22,0.261,23,0.012,24,1.476,41,3.173,45,0.012,46,0.016,47,0.012,48,0.943,50,1.476,51,1.757,52,3.03,53,2.123,54,2.123,55,2.363,63,2.738,64,2.123,65,1.867,67,1.757,71,2.266,415,3.981,417,3.157,418,2.275,419,3.732,420,2.651,421,2.651,822,3.607,823,3.607,824,3.607,825,4.226,826,5.449,827,4.226,828,4.226]],["title/classes/Unsubscriber.html",[23,0.01,140,2.241]],["body/classes/Unsubscriber.html",[3,0.264,4,0.233,9,0.233,19,0.507,20,0.022,21,0.899,22,0.264,23,0.016,45,0.013,46,0.016,47,0.013,85,1.49,87,0.58,88,2.58,91,1.352,93,2.422,117,1.224,119,0.707,140,3.439,141,2.148,152,4.586,153,4.586,161,4.84,162,4.84,181,4.011,196,1.26,197,1.26,229,5.007,230,1.915,398,2.296,829,3.641,830,6.058,831,4.266,832,4.266,833,4.266,834,4.266,835,4.266,836,4.266,837,4.266,838,4.266,839,4.266]],["title/coverage.html",[840,4.16]],["body/coverage.html",[0,1.529,1,0.993,9,0.123,10,1.919,20,0.022,23,0.019,32,0.881,34,0.881,37,0.881,39,0.993,41,0.993,45,0.007,46,0.01,47,0.007,84,1.702,86,1.919,102,1.702,103,2.773,108,2.773,115,0.869,116,2.912,119,0.373,123,0.785,128,0.993,139,1.919,140,1.41,157,0.935,160,0.831,176,1.919,230,0.785,277,3.695,329,2.137,330,1.54,332,1.919,333,0.881,336,1.21,406,1.41,407,1.747,428,1.54,436,2.151,438,3.622,444,1.702,447,1.702,449,1.702,451,1.919,452,2.181,464,2.632,475,1.702,476,1.919,494,1.41,495,3.747,498,2.382,499,2.632,512,2.632,514,2.632,518,1.41,531,2.6,541,1.058,543,1.058,548,2.181,549,1.919,550,1.919,627,1.41,639,1.303,640,2.181,644,1.303,657,1.919,684,1.702,692,1.702,693,1.919,694,1.919,698,1.702,699,1.919,700,1.919,719,1.919,770,1.919,772,1.919,796,1.702,797,3.219,802,1.702,804,1.41,805,3.277,806,2.632,809,1.919,816,1.919,829,1.919,840,1.919,841,2.248,842,2.248,843,3.477,844,7.062,845,7.148,846,5.894,847,4.785,848,1.919,849,5.705,850,2.968,851,4.084,852,1.919,853,2.968,854,1.919,855,1.919,856,2.248,857,2.968,858,1.919,859,2.248,860,2.248,861,2.248,862,2.248,863,2.248,864,1.919,865,1.919,866,2.968,867,1.919,868,1.919,869,2.248]],["title/dependencies.html",[51,1.786,870,2.984]],["body/dependencies.html",[20,0.022,21,0.911,45,0.013,46,0.016,47,0.013,51,1.796,69,4.717,70,3.785,75,2.71,77,1.461,106,1.909,244,2.959,245,2.959,357,3.27,376,3.27,398,2.326,418,2.326,420,2.71,421,2.71,583,3.27,871,4.32,872,5.968,873,4.32,874,5.527,875,4.32,876,4.32,877,4.32,878,4.32,879,4.32,880,4.32,881,4.32,882,6.424,883,4.32,884,4.32,885,4.32,886,4.32,887,4.32,888,4.32,889,3.687,890,4.32,891,4.32,892,4.32,893,4.32,894,4.32,895,4.32]],["title/miscellaneous/enumerations.html",[896,1.499,897,3.667]],["body/miscellaneous/enumerations.html",[20,0.021,35,1.778,45,0.012,46,0.016,47,0.012,48,1.202,87,0.564,115,1.581,143,2.088,157,1.725,160,1.534,185,2.233,188,2.813,192,3.004,197,2.088,208,2.084,230,1.449,283,2.403,333,1.625,483,4.076,484,4.076,485,4.076,486,4.076,487,4.076,488,4.076,489,4.076,490,4.076,491,4.076,496,2.899,531,2.084,540,3.464,541,1.952,542,2.403,543,1.952,544,2.403,545,2.403,585,4.595,639,2.403,640,2.602,643,3.688,644,2.403,645,2.899,646,2.841,647,3.14,896,2.084,897,3.54,898,3.54,899,4.148,900,3.54,901,4.148]],["title/miscellaneous/functions.html",[896,1.499,902,3.667]],["body/miscellaneous/functions.html",[20,0.021,30,1.283,45,0.015,46,0.018,47,0.015,87,0.686,93,2.689,169,2.125,170,2.009,219,2.659,494,3.164,495,3.454,500,4.606,505,3.818,804,3.164,805,3.454,850,5.792,896,2.534,902,4.305,903,4.305,904,4.305]],["title/index.html",[87,0.406,905,2.984,906,2.984]],["body/index.html",[0,1.622,4,0.214,13,1.964,20,0.015,23,0.011,25,2.104,30,0.824,45,0.011,46,0.015,47,0.011,65,1.727,96,3.336,174,3.336,230,1.365,322,4.956,343,4.956,357,4.68,360,3.336,376,3.92,573,3.336,872,3.336,889,5.49,907,3.909,908,5.178,909,3.909,910,5.807,911,5.807,912,3.909,913,5.178,914,7.053,915,3.909,916,3.909,917,3.909,918,3.909,919,3.909,920,3.909,921,3.909,922,5.178,923,3.909,924,3.909,925,3.909,926,3.909,927,5.807,928,3.909,929,6.432,930,3.909,931,3.909,932,3.909,933,3.909,934,3.909,935,3.909,936,3.336,937,5.178,938,5.178,939,6.183,940,3.909,941,5.178,942,5.178,943,3.909,944,6.183,945,3.909,946,3.909,947,5.807,948,3.909,949,3.909,950,3.909]],["title/modules.html",[50,1.702]],["body/modules.html",[20,0.017,45,0.014,46,0.017,47,0.014,49,2.955,50,1.645,60,2.955,61,2.955,62,2.955,70,4.82,234,5.658,409,3.226,414,2.955,415,2.729,621,3.226,626,2.955,671,3.226,675,2.955,951,7.038,952,7.038,953,7.256,954,6.629]],["title/overview.html",[955,4.16]],["body/overview.html",[1,2.863,2,1.807,20,0.021,24,1.172,32,2.104,34,2.104,37,2.104,39,2.863,41,2.863,45,0.01,46,0.014,47,0.01,48,0.749,49,4.308,50,1.172,51,1.396,52,1.687,53,1.687,54,1.687,55,1.315,56,2.865,57,2.865,58,2.865,59,2.865,60,3.369,61,3.828,62,3.963,63,2.346,64,1.687,65,1.483,85,1.172,331,2.299,336,3.125,409,4.655,410,2.865,411,2.865,412,2.865,413,2.865,414,3.369,415,3.755,437,1.945,516,2.865,517,2.865,518,3.369,620,2.865,621,4.655,622,2.865,623,2.865,624,2.865,626,3.369,671,4.327,672,2.865,673,2.865,674,2.865,675,3.369,790,2.865,791,2.865,792,2.865,822,2.865,823,2.865,824,2.865,955,2.865,956,3.357,957,3.357,958,3.357,959,3.357]],["title/miscellaneous/typealiases.html",[896,1.499,960,4.296]],["body/miscellaneous/typealiases.html",[20,0.021,45,0.015,46,0.018,47,0.015,87,0.71,119,0.865,157,2.17,160,1.93,333,2.045,404,3.121,531,2.622,541,2.456,543,2.456,639,3.024,640,3.274,644,3.024,650,4.254,896,2.622,898,4.454,900,4.454,961,5.218]],["title/miscellaneous/variables.html",[896,1.499,962,3.667]],["body/miscellaneous/variables.html",[0,1.065,20,0.022,30,0.642,32,0.745,34,0.745,35,0.628,37,0.745,45,0.006,46,0.009,47,0.006,87,0.259,102,1.439,103,3.222,105,2.736,108,3.222,109,3.771,110,2.887,111,1.623,112,1.623,113,2.995,115,0.953,118,1.531,119,1.068,125,1.127,127,1.531,129,2.053,130,2.21,137,1.024,143,1.667,185,1.024,186,0.895,196,2.036,197,2.036,277,1.916,283,1.102,330,1.302,351,2.053,365,3.357,379,0.955,406,1.912,407,2.192,428,2.087,438,1.439,440,2.307,444,2.887,445,1.623,446,1.623,447,2.887,448,1.623,449,1.439,452,2.736,464,3.302,469,1.439,480,2.601,481,2.601,482,2.601,483,2.307,484,2.307,485,2.307,486,2.307,487,2.307,488,2.307,489,2.307,490,2.307,491,2.307,494,2.736,495,1.302,497,1.623,498,2.987,505,3.357,510,1.623,511,1.623,512,3.302,513,1.623,514,3.302,515,1.623,548,1.193,627,1.912,645,1.024,684,1.439,685,1.623,686,1.623,687,1.623,688,1.623,689,1.623,690,1.623,691,1.623,797,1.439,801,1.623,802,2.307,803,1.623,804,1.912,805,1.302,806,3.613,808,1.623,848,1.623,851,1.623,852,2.601,853,1.623,854,2.601,855,2.601,857,1.623,858,2.601,864,1.623,865,1.623,866,1.623,867,2.601,868,2.601,896,0.955,903,3.723,904,2.601,936,2.601,962,1.623,963,3.047,964,5.094,965,3.047,966,1.901,967,1.901,968,4.362,969,3.047,970,1.901,971,1.901,972,1.901,973,1.901,974,4.362,975,1.901,976,1.901,977,1.901,978,1.901,979,3.813,980,1.901,981,3.047,982,1.901,983,1.901,984,1.901,985,1.901,986,1.901,987,1.901,988,1.901]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":277,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.10.2",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["0.13.0",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["0.16.1",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":849,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":846,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":847,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":859,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":856,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":198,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["1.1.11",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["1.5s",{"_index":763,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["100",{"_index":292,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{}}}],["10px",{"_index":818,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["11",{"_index":956,"title":{},"body":{"overview.html":{}}}],["13",{"_index":958,"title":{},"body":{"overview.html":{}}}],["16px",{"_index":665,"title":{},"body":{"components/MainComponent.html":{}}}],["1px",{"_index":305,"title":{},"body":{"components/ConsentsComponent.html":{},"components/ToolbarComponent.html":{}}}],["2",{"_index":223,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["208px",{"_index":300,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["20px",{"_index":615,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["22px",{"_index":821,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["27",{"_index":860,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":620,"title":{},"body":{"components/GiveConsentComponent.html":{},"overview.html":{}}}],["3/7",{"_index":863,"title":{},"body":{"coverage.html":{}}}],["3001",{"_index":750,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["30px",{"_index":819,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["4.17.15",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["42",{"_index":862,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":959,"title":{},"body":{"overview.html":{}}}],["5/18",{"_index":861,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":614,"title":{},"body":{"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{}}}],["50px",{"_index":757,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["5px",{"_index":327,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["5s",{"_index":754,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["6",{"_index":957,"title":{},"body":{"overview.html":{}}}],["6.14.4",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["600",{"_index":820,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["60px",{"_index":817,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["7",{"_index":315,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["700",{"_index":319,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{}}}],["9",{"_index":751,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["9.0.0",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":872,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["9.2.1",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["absolute",{"_index":745,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["accessors",{"_index":163,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["action",{"_index":219,"title":{},"body":{"components/ConsentsComponent.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/functions.html":{}}}],["action.payload.consents",{"_index":507,"title":{},"body":{"interfaces/ConsentsState.html":{}}}],["action.payload.email",{"_index":347,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["action.payload.name",{"_index":346,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["action.payload.pageindex",{"_index":390,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["action.payload.pagesize",{"_index":391,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["action.payload.totalcount",{"_index":508,"title":{},"body":{"interfaces/ConsentsState.html":{}}}],["action.type",{"_index":502,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{}}}],["actionreducermap",{"_index":440,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"interfaces/SpinnerModuleStore.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":335,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["actions/consents.actions",{"_index":405,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsState.html":{}}}],["actions/spinner.action",{"_index":807,"title":{},"body":{"interfaces/SpinnerState.html":{}}}],["active",{"_index":316,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{}}}],["actual_component",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["added",{"_index":466,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["address",{"_index":609,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["ads",{"_index":487,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":961,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":530,"title":{},"body":{"modules/CoreModule.html":{}}}],["amount",{"_index":577,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["angular",{"_index":910,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":418,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":393,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"modules/CoreModule.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["angular/compiler",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"modules/CoreModule.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"dependencies.html":{}}}],["angular/flex",{"_index":420,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/ToolbarModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":583,"title":{},"body":{"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":425,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["angular/material/checkbox",{"_index":636,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["angular/material/divider",{"_index":682,"title":{},"body":{"modules/MainModule.html":{}}}],["angular/material/form",{"_index":631,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["angular/material/icon",{"_index":427,"title":{},"body":{"modules/ConsentsModule.html":{}}}],["angular/material/input",{"_index":634,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["angular/material/list",{"_index":680,"title":{},"body":{"modules/MainModule.html":{}}}],["angular/material/paginator",{"_index":238,"title":{},"body":{"components/ConsentsComponent.html":{},"modules/ConsentsModule.html":{}}}],["angular/material/sidenav",{"_index":678,"title":{},"body":{"modules/MainModule.html":{}}}],["angular/material/table",{"_index":237,"title":{},"body":{"components/ConsentsComponent.html":{},"modules/ConsentsModule.html":{}}}],["angular/material/toolbar",{"_index":827,"title":{},"body":{"modules/ToolbarModule.html":{}}}],["angular/platform",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":106,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"components/SpinnerComponent.html":{},"modules/SpinnerModule.html":{},"dependencies.html":{}}}],["animation",{"_index":752,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["anonymous",{"_index":489,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["api",{"_index":272,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["apiurl",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"index.html":{}}}],["app.component",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":18,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appeared",{"_index":259,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["appmodule",{"_index":49,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["apppage",{"_index":84,"title":{"classes/AppPage.html":{}},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["approutingmodule",{"_index":60,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["arrows",{"_index":203,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["artifacts",{"_index":930,"title":{},"body":{"index.html":{}}}],["auto",{"_index":759,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["automatically",{"_index":918,"title":{},"body":{"index.html":{}}}],["available",{"_index":234,"title":{},"body":{"components/ConsentsComponent.html":{},"modules.html":{}}}],["background",{"_index":301,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["based",{"_index":194,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["behaviorsubject",{"_index":702,"title":{},"body":{"classes/MockStore.html":{}}}],["behaviorsubject(undefined",{"_index":703,"title":{},"body":{"classes/MockStore.html":{}}}],["beta.29",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["between",{"_index":270,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["black",{"_index":670,"title":{},"body":{"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["blue",{"_index":297,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["boolean",{"_index":131,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{}}}],["bootstrap",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["border",{"_index":303,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["bottom",{"_index":304,"title":{},"body":{"components/ConsentsComponent.html":{},"components/ToolbarComponent.html":{}}}],["browse",{"_index":953,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPage.html":{},"dependencies.html":{},"modules.html":{}}}],["browser.get(browser.baseurl",{"_index":98,"title":{},"body":{"classes/AppPage.html":{}}}],["browser/animations",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":929,"title":{},"body":{"index.html":{}}}],["button",{"_index":617,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["call",{"_index":273,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["case",{"_index":503,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{}}}],["catcherror",{"_index":396,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["catcherror(error",{"_index":362,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["ccc",{"_index":760,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["cell",{"_index":325,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["challenge",{"_index":661,"title":{},"body":{"components/MainComponent.html":{}}}],["change",{"_index":174,"title":{},"body":{"components/ConsentsComponent.html":{},"index.html":{}}}],["check",{"_index":573,"title":{},"body":{"components/GiveConsentComponent.html":{},"index.html":{}}}],["checkbox",{"_index":612,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["checkboxes",{"_index":575,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["checked",{"_index":130,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"injectables/ConsentsEffect.html":{},"components/GiveConsentComponent.html":{},"miscellaneous/variables.html":{}}}],["children",{"_index":685,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":23,"title":{"classes/AppPage.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"classes/CreateNewConsent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"classes/Unsubscriber.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":85,"title":{},"body":{"classes/AppPage.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"classes/CreateNewConsent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"classes/Unsubscriber.html":{},"overview.html":{}}}],["cli",{"_index":911,"title":{},"body":{"index.html":{}}}],["clonedeep",{"_index":243,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["clonedeep(this.paginator.pageindex",{"_index":276,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["clonedrequest",{"_index":787,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["cluster_appmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_consentsmodule",{"_index":410,"title":{},"body":{"modules/ConsentsModule.html":{},"overview.html":{}}}],["cluster_consentsmodule_declarations",{"_index":411,"title":{},"body":{"modules/ConsentsModule.html":{},"overview.html":{}}}],["cluster_consentsmodule_imports",{"_index":412,"title":{},"body":{"modules/ConsentsModule.html":{},"overview.html":{}}}],["cluster_consentsmodule_providers",{"_index":413,"title":{},"body":{"modules/ConsentsModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":516,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_providers",{"_index":517,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_giveconsentmodule",{"_index":622,"title":{},"body":{"modules/GiveConsentModule.html":{},"overview.html":{}}}],["cluster_giveconsentmodule_declarations",{"_index":623,"title":{},"body":{"modules/GiveConsentModule.html":{},"overview.html":{}}}],["cluster_giveconsentmodule_imports",{"_index":624,"title":{},"body":{"modules/GiveConsentModule.html":{},"overview.html":{}}}],["cluster_giveconsentmodule_providers",{"_index":625,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["cluster_mainmodule",{"_index":672,"title":{},"body":{"modules/MainModule.html":{},"overview.html":{}}}],["cluster_mainmodule_declarations",{"_index":673,"title":{},"body":{"modules/MainModule.html":{},"overview.html":{}}}],["cluster_mainmodule_imports",{"_index":674,"title":{},"body":{"modules/MainModule.html":{},"overview.html":{}}}],["cluster_spinnermodule",{"_index":790,"title":{},"body":{"modules/SpinnerModule.html":{},"overview.html":{}}}],["cluster_spinnermodule_declarations",{"_index":791,"title":{},"body":{"modules/SpinnerModule.html":{},"overview.html":{}}}],["cluster_spinnermodule_exports",{"_index":792,"title":{},"body":{"modules/SpinnerModule.html":{},"overview.html":{}}}],["cluster_toolbarmodule",{"_index":822,"title":{},"body":{"modules/ToolbarModule.html":{},"overview.html":{}}}],["cluster_toolbarmodule_declarations",{"_index":823,"title":{},"body":{"modules/ToolbarModule.html":{},"overview.html":{}}}],["cluster_toolbarmodule_exports",{"_index":824,"title":{},"body":{"modules/ToolbarModule.html":{},"overview.html":{}}}],["code",{"_index":922,"title":{},"body":{"index.html":{}}}],["collect",{"_index":567,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["collected",{"_index":662,"title":{},"body":{"components/MainComponent.html":{}}}],["color",{"_index":296,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["commonmodule",{"_index":417,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{}}}],["compodoc/compodoc",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"modules/ConsentsRoutingModule.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentRoutingModule.html":{},"components/MainComponent.html":{},"modules/MainRoutingModule.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["component_template",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"overview.html":{}}}],["consent",{"_index":115,"title":{"classes/Consent.html":{}},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainRoutingModule.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["consent'},{'name",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["consent.component",{"_index":638,"title":{},"body":{"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{}}}],["consent.component.html",{"_index":552,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.scss",{"_index":551,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.ts",{"_index":550,"title":{},"body":{"components/GiveConsentComponent.html":{},"coverage.html":{}}}],["consent.component.ts:18",{"_index":559,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.ts:23",{"_index":578,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.ts:30",{"_index":560,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.ts:39",{"_index":563,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.ts:54",{"_index":570,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.module').then(m",{"_index":689,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["consent.module.ts",{"_index":628,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["consent/containers/give",{"_index":549,"title":{},"body":{"components/GiveConsentComponent.html":{},"coverage.html":{}}}],["consent/give",{"_index":627,"title":{},"body":{"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consent:2",{"_index":136,"title":{},"body":{"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{}}}],["consent:3",{"_index":135,"title":{},"body":{"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{}}}],["consentform",{"_index":553,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consentread",{"_index":123,"title":{"classes/ConsentRead.html":{}},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{}}}],["consentreadmock",{"_index":854,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["consents",{"_index":143,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainRoutingModule.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["consents'},{'name",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["consents.component.html",{"_index":145,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["consents.component.scss",{"_index":144,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["consents.reducer",{"_index":443,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{}}}],["consentsactions",{"_index":404,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/typealiases.html":{}}}],["consentsactions.loadconsents",{"_index":389,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["consentsactions.loadconsentsfailed(error",{"_index":382,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["consentsactions.loadconsentssucceeded",{"_index":377,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["consentsactiontypes",{"_index":496,"title":{},"body":{"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["consentsactiontypes.createnewconsent",{"_index":538,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["consentsactiontypes.loadconsents",{"_index":504,"title":{},"body":{"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["consentsactiontypes.loadconsentsfailed",{"_index":509,"title":{},"body":{"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["consentsactiontypes.loadconsentssucceeded",{"_index":506,"title":{},"body":{"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["consentsactiontypes.removeconsent",{"_index":547,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["consentscomponent",{"_index":32,"title":{"components/ConsentsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["consentseffect",{"_index":330,"title":{"injectables/ConsentsEffect.html":{}},"body":{"injectables/ConsentsEffect.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consentsgivenfor",{"_index":127,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsServiceMock.html":{},"components/GiveConsentComponent.html":{},"miscellaneous/variables.html":{}}}],["consentsgivenforoptions",{"_index":585,"title":{},"body":{"components/GiveConsentComponent.html":{},"miscellaneous/enumerations.html":{}}}],["consentsmodule",{"_index":409,"title":{"modules/ConsentsModule.html":{}},"body":{"modules/ConsentsModule.html":{},"modules.html":{},"overview.html":{}}}],["consentsmodulestore",{"_index":406,"title":{"interfaces/ConsentsModuleStore.html":{}},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consentsmodulestoreinitialstate",{"_index":444,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consentspagination",{"_index":309,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["consentsreducer.getconsents",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consentsreducer.getconsentstotalcount",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consentsreducer.getisconsentsloading",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consentsroutingmodule",{"_index":414,"title":{"modules/ConsentsRoutingModule.html":{}},"body":{"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["consentsservice",{"_index":336,"title":{"injectables/ConsentsService.html":{}},"body":{"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"injectables/ConsentsService.html":{},"modules/GiveConsentModule.html":{},"coverage.html":{},"overview.html":{}}}],["consentsservicemock",{"_index":475,"title":{"injectables/ConsentsServiceMock.html":{}},"body":{"injectables/ConsentsServiceMock.html":{},"coverage.html":{}}}],["consentsstate",{"_index":494,"title":{"interfaces/ConsentsState.html":{}},"body":{"interfaces/ConsentsState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["consentsstore",{"_index":171,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["consentstable",{"_index":290,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["consentstotalcount",{"_index":146,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["consentwrite",{"_index":128,"title":{"classes/ConsentWrite.html":{}},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{}}}],["consentwritemock",{"_index":855,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["const",{"_index":107,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"interfaces/ConsentsState.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{}}}],["constructor",{"_index":165,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["constructor(@optional",{"_index":526,"title":{},"body":{"modules/CoreModule.html":{}}}],["constructor(actions",{"_index":334,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["constructor(consentsstore",{"_index":166,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["constructor(http",{"_index":453,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["constructor(payload",{"_index":535,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["constructor(private",{"_index":253,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["constructor(public",{"_index":546,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["constructor(spinnerstore",{"_index":723,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["container",{"_index":328,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{}}}],["containers/consents.component",{"_index":430,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{}}}],["containers/give",{"_index":637,"title":{},"body":{"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{}}}],["containers/main.component",{"_index":683,"title":{},"body":{"modules/MainModule.html":{},"modules/MainRoutingModule.html":{}}}],["containers/spinner.component",{"_index":794,"title":{},"body":{"modules/SpinnerModule.html":{}}}],["containers/toolbar.component",{"_index":828,"title":{},"body":{"modules/ToolbarModule.html":{}}}],["content",{"_index":100,"title":{},"body":{"classes/AppPage.html":{}}}],["context",{"_index":867,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["contribute",{"_index":488,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["control.value.checked",{"_index":600,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["convert",{"_index":348,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["core",{"_index":431,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{}}}],["core/classes/unsubscriber",{"_index":246,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["core/core.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["core/enums/enums",{"_index":586,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["core/interceptors/spinner.interceptor",{"_index":523,"title":{},"body":{"modules/CoreModule.html":{}}}],["core/services/consents.service",{"_index":403,"title":{},"body":{"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["core/store",{"_index":250,"title":{},"body":{"components/ConsentsComponent.html":{},"modules/ConsentsModule.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{}}}],["coremodule",{"_index":61,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["count",{"_index":373,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{}}}],["countrequests",{"_index":773,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["coverage",{"_index":840,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":545,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["createfeatureselector",{"_index":441,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"interfaces/SpinnerModuleStore.html":{}}}],["createfeatureselector('consents",{"_index":448,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"miscellaneous/variables.html":{}}}],["createfeatureselector('spinner",{"_index":803,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{},"miscellaneous/variables.html":{}}}],["createnewconsent",{"_index":333,"title":{"classes/CreateNewConsent.html":{}},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["createnewconsent(consent",{"_index":457,"title":{},"body":{"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{}}}],["createselector",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(getconsentsstate",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(getspinnerselector",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctrl.value.label",{"_index":610,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["cursor",{"_index":294,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["data",{"_index":186,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsState.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"classes/MockStore.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":147,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["debouncetime",{"_index":734,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["debouncetime(500",{"_index":736,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["declarations",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["declare",{"_index":697,"title":{},"body":{"interfaces/MockPrivate.html":{}}}],["decoration",{"_index":669,"title":{},"body":{"components/MainComponent.html":{}}}],["decorators",{"_index":226,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{}}}],["deep",{"_index":323,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["default",{"_index":196,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":91,"title":{},"body":{"classes/AppPage.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"components/ToolbarComponent.html":{},"classes/Unsubscriber.html":{}}}],["delay",{"_index":397,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["delay(500",{"_index":358,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["delete",{"_index":288,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["dependencies",{"_index":51,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":179,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["destroy",{"_index":153,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["dev",{"_index":916,"title":{},"body":{"index.html":{}}}],["development",{"_index":913,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["didomi",{"_index":660,"title":{},"body":{"components/MainComponent.html":{}}}],["didomichallenge",{"_index":907,"title":{},"body":{"index.html":{}}}],["directive",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["directives",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":928,"title":{},"body":{"index.html":{}}}],["directory",{"_index":933,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":618,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["dispatch",{"_index":408,"title":{},"body":{"injectables/ConsentsEffect.html":{},"classes/MockStore.html":{}}}],["dispatch(action",{"_index":705,"title":{},"body":{"classes/MockStore.html":{}}}],["display",{"_index":311,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["displayedcolumns",{"_index":148,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["dist",{"_index":932,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":816,"title":{},"body":{"components/ToolbarComponent.html":{},"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["dynamic",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":945,"title":{},"body":{"index.html":{}}}],["e2e/src/app.po.ts",{"_index":86,"title":{},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["e2e/src/app.po.ts:4",{"_index":95,"title":{},"body":{"classes/AppPage.html":{}}}],["e2e/src/app.po.ts:8",{"_index":92,"title":{},"body":{"classes/AppPage.html":{}}}],["ease",{"_index":755,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["easily",{"_index":835,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["effect",{"_index":383,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["effect({dispatch",{"_index":364,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["effects",{"_index":428,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["effectsmodule",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["effectsmodule.forfeature(effects",{"_index":434,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["effectsmodule.forroot",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["element",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["element(by.css('app",{"_index":99,"title":{},"body":{"classes/AppPage.html":{}}}],["element.consentsgivenfor",{"_index":287,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["element.email",{"_index":285,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["element.name",{"_index":284,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["email",{"_index":118,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsServiceMock.html":{},"components/GiveConsentComponent.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":298,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["end",{"_index":944,"title":{},"body":{"index.html":{}}}],["enter",{"_index":607,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["entity",{"_index":205,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["enum",{"_index":539,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{}}}],["enumerations",{"_index":897,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":464,"title":{},"body":{"injectables/ConsentsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.apiurl}/consents/${id",{"_index":474,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["environments/environment",{"_index":465,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["error",{"_index":497,"title":{},"body":{"interfaces/ConsentsState.html":{},"miscellaneous/variables.html":{}}}],["error('coremodule",{"_index":529,"title":{},"body":{"modules/CoreModule.html":{}}}],["es",{"_index":245,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/GiveConsentComponent.html":{},"dependencies.html":{}}}],["event",{"_index":204,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["event.pageindex",{"_index":266,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["event.shouldactivate",{"_index":740,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["examples",{"_index":924,"title":{},"body":{"index.html":{}}}],["execute",{"_index":941,"title":{},"body":{"index.html":{}}}],["export",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{}}}],["exports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["extends",{"_index":124,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["fadein",{"_index":753,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["failed",{"_index":544,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["false",{"_index":365,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsState.html":{},"components/GiveConsentComponent.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/variables.html":{}}}],["fb",{"_index":557,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["field",{"_index":632,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{}}}],["files",{"_index":920,"title":{},"body":{"index.html":{}}}],["filter",{"_index":400,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["finalize",{"_index":781,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["fixed",{"_index":748,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["flag",{"_index":935,"title":{},"body":{"index.html":{}}}],["flexlayoutmodule",{"_index":419,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/ToolbarModule.html":{}}}],["fn",{"_index":572,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["font",{"_index":317,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["form",{"_index":566,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["formarray",{"_index":581,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["formarray.controls",{"_index":598,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["formbuilder",{"_index":558,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["formgroup",{"_index":579,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["fromconsents",{"_index":442,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{}}}],["fromconsents.consentsstate",{"_index":439,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{}}}],["fromconsents.initialstate",{"_index":445,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"miscellaneous/variables.html":{}}}],["fromconsents.reducer",{"_index":446,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"miscellaneous/variables.html":{}}}],["fromconsentsstore",{"_index":249,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["fromconsentsstore.createnewconsent(this.consentform.value",{"_index":589,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["fromconsentsstore.loadconsents",{"_index":280,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["fromconsentsstore.removeconsent",{"_index":279,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["fromfeature.getspinnermodulestore",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fromfeature.spinnermodulestore",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fromspinner",{"_index":799,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{}}}],["fromspinner.isvisibleonmoduleloading",{"_index":988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fromspinner.reducer",{"_index":801,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{},"miscellaneous/variables.html":{}}}],["fromspinner.spinnerstate",{"_index":798,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{}}}],["fromspinnerstore",{"_index":732,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["fromspinnerstore.hideaftermoduleloaded",{"_index":743,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["fromspinnerstore.showonmoduleloading",{"_index":742,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["full",{"_index":469,"title":{},"body":{"injectables/ConsentsService.html":{},"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":499,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{},"coverage.html":{}}}],["functions",{"_index":902,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":946,"title":{},"body":{"index.html":{}}}],["generate",{"_index":343,"title":{},"body":{"injectables/ConsentsEffect.html":{},"index.html":{}}}],["generated",{"_index":909,"title":{},"body":{"index.html":{}}}],["getconsents",{"_index":452,"title":{},"body":{"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getconsents(params",{"_index":460,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["getconsentsmodulestore",{"_index":447,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getconsentsstate",{"_index":852,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getconsentstotalcount",{"_index":512,"title":{},"body":{"interfaces/ConsentsState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getisconsentsloading",{"_index":514,"title":{},"body":{"interfaces/ConsentsState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getpages",{"_index":232,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["getspinnermodulestore",{"_index":802,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getspinnerselector",{"_index":858,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getting",{"_index":905,"title":{"index.html":{}},"body":{}}],["gettitletext",{"_index":89,"title":{},"body":{"classes/AppPage.html":{}}}],["give",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainRoutingModule.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["giveconsent",{"_index":554,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["giveconsentcomponent",{"_index":34,"title":{"components/GiveConsentComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["giveconsentform",{"_index":613,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["giveconsentmodule",{"_index":621,"title":{"modules/GiveConsentModule.html":{}},"body":{"modules/GiveConsentModule.html":{},"modules.html":{},"overview.html":{}}}],["giveconsentroutingmodule",{"_index":626,"title":{"modules/GiveConsentRoutingModule.html":{}},"body":{"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["given",{"_index":286,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["go",{"_index":949,"title":{},"body":{"index.html":{}}}],["gotopage",{"_index":154,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["gotopage(pageindex",{"_index":172,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["graph",{"_index":954,"title":{},"body":{"modules.html":{}}}],["gray",{"_index":308,"title":{},"body":{"components/ConsentsComponent.html":{},"components/ToolbarComponent.html":{}}}],["guardscheckend",{"_index":728,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["handles",{"_index":782,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["header",{"_index":324,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{}}}],["heading",{"_index":664,"title":{},"body":{"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["height",{"_index":299,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["help",{"_index":947,"title":{},"body":{"index.html":{}}}],["helps",{"_index":834,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["hidden",{"_index":310,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["hide",{"_index":647,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"miscellaneous/enumerations.html":{}}}],["hideaftermoduleloaded",{"_index":639,"title":{"classes/HideAfterModuleLoaded.html":{}},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["host",{"_index":321,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["html",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"index.html":{}}}],["http",{"_index":456,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["http://localhost:3000",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":917,"title":{},"body":{"index.html":{}}}],["http_interceptors",{"_index":521,"title":{},"body":{"modules/CoreModule.html":{}}}],["httpclient",{"_index":454,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["httpclientmodule",{"_index":522,"title":{},"body":{"modules/CoreModule.html":{}}}],["httphandler",{"_index":778,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["httpinterceptor",{"_index":780,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["httprequest",{"_index":777,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["httpresponse",{"_index":370,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{}}}],["icon",{"_index":293,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["id",{"_index":125,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["imitate",{"_index":354,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["implements",{"_index":141,"title":{},"body":{"components/ConsentsComponent.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{}}}],["import",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{}}}],["import('./modules/consents/consents.module').then(m",{"_index":686,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["import('./modules/give",{"_index":688,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["import('./projects/main/main.module').then(m",{"_index":111,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["important",{"_index":313,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{}}}],["inconsistency",{"_index":269,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["index",{"_index":87,"title":{"index.html":{}},"body":{"classes/AppPage.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"interfaces/ConsentsModuleStore.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"classes/Unsubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":695,"title":{},"body":{"interfaces/MockPrivate.html":{}}}],["infinite",{"_index":765,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{}}}],["inherited",{"_index":134,"title":{},"body":{"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["initform",{"_index":555,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["initializedata",{"_index":156,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["initializedata(data",{"_index":182,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["initializing",{"_index":257,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["initialstate",{"_index":498,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initiate/create",{"_index":564,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["injectable",{"_index":329,"title":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{}},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interceptors/SpinnerInterceptor.html":{},"coverage.html":{}}}],["injectables",{"_index":331,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"overview.html":{}}}],["input",{"_index":815,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["inputs",{"_index":812,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["install",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["instanceof",{"_index":739,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["intercept",{"_index":774,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["intercept(request",{"_index":776,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["interceptor",{"_index":770,"title":{"interceptors/SpinnerInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":771,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["interface",{"_index":436,"title":{"interfaces/ConsentsModuleStore.html":{},"interfaces/ConsentsState.html":{},"interfaces/MockPrivate.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{}},"body":{"interfaces/ConsentsModuleStore.html":{},"interfaces/ConsentsState.html":{},"interfaces/MockPrivate.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"coverage.html":{}}}],["interfaces",{"_index":437,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"interfaces/ConsentsState.html":{},"interfaces/MockPrivate.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"overview.html":{}}}],["isconsentsloading",{"_index":149,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["isvisibleonmoduleloading",{"_index":806,"title":{},"body":{"interfaces/SpinnerState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isvisiblespinner",{"_index":722,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["item",{"_index":209,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["items",{"_index":189,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{}}}],["join",{"_index":402,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["join(lodashmap(lodashfilter(action.payload.consentsgivenfor",{"_index":350,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["json",{"_index":376,"title":{},"body":{"injectables/ConsentsEffect.html":{},"dependencies.html":{},"index.html":{}}}],["kainsp92@gmail.com",{"_index":482,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/variables.html":{}}}],["karma",{"_index":943,"title":{},"body":{"index.html":{}}}],["keyframes",{"_index":766,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["label",{"_index":129,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/GiveConsentComponent.html":{},"miscellaneous/variables.html":{}}}],["layout",{"_index":421,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/ToolbarModule.html":{},"dependencies.html":{}}}],["legend",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ConsentsComponent.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"components/SpinnerComponent.html":{},"modules/SpinnerModule.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["length",{"_index":235,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["light",{"_index":307,"title":{},"body":{"components/ConsentsComponent.html":{},"components/ToolbarComponent.html":{}}}],["line",{"_index":349,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["linear",{"_index":764,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["link",{"_index":667,"title":{},"body":{"components/MainComponent.html":{}}}],["list",{"_index":188,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["literal",{"_index":137,"title":{},"body":{"classes/ConsentWrite.html":{},"injectables/ConsentsService.html":{},"interfaces/ConsentsState.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/variables.html":{}}}],["load",{"_index":192,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["loadchildren",{"_index":110,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["loadconsents",{"_index":157,"title":{"classes/LoadConsents.html":{}},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadconsents(pageindex",{"_index":190,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["loadconsentsfailed",{"_index":543,"title":{"classes/LoadConsentsFailed.html":{}},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadconsentssucceeded",{"_index":541,"title":{"classes/LoadConsentsSucceeded.html":{}},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loaded",{"_index":185,"title":{},"body":{"components/ConsentsComponent.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["loading",{"_index":283,"title":{},"body":{"components/ConsentsComponent.html":{},"interfaces/ConsentsState.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["lodash",{"_index":244,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/GiveConsentComponent.html":{},"dependencies.html":{}}}],["lodashfilter",{"_index":401,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["lodashmap",{"_index":399,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["m.consentsmodule",{"_index":687,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["m.giveconsentmodule",{"_index":690,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["m.mainmodule",{"_index":112,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["main",{"_index":193,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{}}}],["main'},{'name",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["main.component.html",{"_index":659,"title":{},"body":{"components/MainComponent.html":{}}}],["main.component.scss",{"_index":658,"title":{},"body":{"components/MainComponent.html":{}}}],["maincomponent",{"_index":37,"title":{"components/MainComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["mainmodule",{"_index":671,"title":{"modules/MainModule.html":{}},"body":{"modules/MainModule.html":{},"modules.html":{},"overview.html":{}}}],["mainroutingmodule",{"_index":675,"title":{"modules/MainRoutingModule.html":{}},"body":{"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["map",{"_index":359,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["map((res",{"_index":369,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["map(control",{"_index":599,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["margin",{"_index":758,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["mat",{"_index":187,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["matbuttonmodule",{"_index":424,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["matcheckboxmodule",{"_index":635,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["matching",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matdividermodule",{"_index":681,"title":{},"body":{"modules/MainModule.html":{}}}],["material",{"_index":432,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{}}}],["matformfieldmodule",{"_index":630,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["math.floor(math.random",{"_index":345,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["maticonmodule",{"_index":426,"title":{},"body":{"modules/ConsentsModule.html":{}}}],["matinputmodule",{"_index":633,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["matlistmodule",{"_index":679,"title":{},"body":{"modules/MainModule.html":{}}}],["matpaginator",{"_index":225,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["matpaginatormodule",{"_index":423,"title":{},"body":{"modules/ConsentsModule.html":{}}}],["matsidenavmodule",{"_index":677,"title":{},"body":{"modules/MainModule.html":{}}}],["mattabledatasource",{"_index":217,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["mattabledatasource(data",{"_index":282,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["mattablemodule",{"_index":422,"title":{},"body":{"modules/ConsentsModule.html":{}}}],["mattoolbarmodule",{"_index":826,"title":{},"body":{"modules/ToolbarModule.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["methods",{"_index":88,"title":{},"body":{"classes/AppPage.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"components/GiveConsentComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{}}}],["mincheckboxesselectedvalidator",{"_index":556,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["mincheckboxesselectedvalidator(minnumber",{"_index":569,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["minimum",{"_index":574,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["minnumber",{"_index":576,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["miscellaneous",{"_index":896,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mockprivate",{"_index":692,"title":{"interfaces/MockPrivate.html":{}},"body":{"interfaces/MockPrivate.html":{},"coverage.html":{}}}],["mockstore",{"_index":698,"title":{"classes/MockStore.html":{}},"body":{"classes/MockStore.html":{},"coverage.html":{}}}],["models",{"_index":247,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["module",{"_index":48,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"classes/HideAfterModuleLoaded.html":{},"modules/MainModule.html":{},"classes/ShowOnModuleLoading.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["modules",{"_index":50,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":948,"title":{},"body":{"index.html":{}}}],["multi",{"_index":525,"title":{},"body":{"modules/CoreModule.html":{}}}],["name",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"components/ToolbarComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["naming",{"_index":925,"title":{},"body":{"index.html":{}}}],["navigate",{"_index":360,"title":{},"body":{"injectables/ConsentsEffect.html":{},"index.html":{}}}],["navigateto",{"_index":90,"title":{},"body":{"classes/AppPage.html":{}}}],["navigationcancel",{"_index":729,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["navigationend",{"_index":730,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["navigationerror",{"_index":731,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["needed",{"_index":271,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["new",{"_index":230,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["newconsent",{"_index":342,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["newsletter",{"_index":484,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":602,"title":{},"body":{"components/GiveConsentComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["next.handle(clonedrequest",{"_index":789,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["ng",{"_index":322,"title":{},"body":{"components/ConsentsComponent.html":{},"index.html":{}}}],["ngmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{}}}],["ngondestroy",{"_index":161,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["ngoninit",{"_index":158,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{}}}],["ngrx/effects",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"dependencies.html":{}}}],["ngrx/entity",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"dependencies.html":{}}}],["none",{"_index":312,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{}}}],["npm",{"_index":889,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["null",{"_index":604,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["number",{"_index":126,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["number(res.headers.get('x",{"_index":380,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["numberof",{"_index":375,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["numbers",{"_index":178,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["object",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":459,"title":{},"body":{"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/MockStore.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["observe",{"_index":467,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["of([this.consent",{"_index":493,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["of(error",{"_index":363,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["of(new",{"_index":381,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["oftype",{"_index":394,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["oftype(consentsactions.consentsactiontypes.createnewconsent",{"_index":340,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["oftype(consentsactions.consentsactiontypes.loadconsents",{"_index":367,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["oftype(consentsactions.consentsactiontypes.removeconsent",{"_index":385,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["ondestroy",{"_index":830,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["one",{"_index":611,"title":{},"body":{"components/GiveConsentComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["oninit",{"_index":142,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{}}}],["onpagechange",{"_index":159,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["onpagechange(event",{"_index":200,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["opacity",{"_index":619,"title":{},"body":{"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{}}}],["optional",{"_index":170,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"components/SpinnerComponent.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"index.html":{},"overview.html":{}}}],["overrides",{"_index":320,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["overview",{"_index":955,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":481,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":870,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":326,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["page",{"_index":175,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{}}}],["pageevent",{"_index":201,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["pageindex",{"_index":180,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["pages",{"_index":164,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["pagesize",{"_index":150,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["paginator",{"_index":151,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["param",{"_index":264,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["parameters",{"_index":169,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":462,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["parentmodule",{"_index":527,"title":{},"body":{"modules/CoreModule.html":{}}}],["path",{"_index":109,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["pathmatch",{"_index":691,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":533,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["pipe",{"_index":353,"title":{},"body":{"injectables/ConsentsEffect.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["pipe(takeuntil(this.destroy",{"_index":261,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["please",{"_index":606,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["pointer",{"_index":295,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["position",{"_index":744,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["prev",{"_index":603,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["private",{"_index":155,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/GiveConsentComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{}}}],["private.type.ts",{"_index":694,"title":{},"body":{"interfaces/MockPrivate.html":{},"coverage.html":{}}}],["private.type.ts:1",{"_index":696,"title":{},"body":{"interfaces/MockPrivate.html":{}}}],["process",{"_index":785,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["prod",{"_index":934,"title":{},"body":{"index.html":{}}}],["production",{"_index":936,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":908,"title":{},"body":{"index.html":{}}}],["promise",{"_index":94,"title":{},"body":{"classes/AppPage.html":{}}}],["properties",{"_index":117,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"interfaces/ConsentsModuleStore.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"classes/Unsubscriber.html":{}}}],["protected",{"_index":152,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["protractor",{"_index":96,"title":{},"body":{"classes/AppPage.html":{},"index.html":{}}}],["provide",{"_index":470,"title":{},"body":{"injectables/ConsentsService.html":{},"modules/CoreModule.html":{}}}],["providers",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["public",{"_index":532,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["put",{"_index":184,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["radius",{"_index":761,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["raised",{"_index":616,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["random",{"_index":344,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["range",{"_index":242,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["range(this.paginator.getnumberofpages",{"_index":252,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["reactive",{"_index":565,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["reactiveformsmodule",{"_index":629,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["readme",{"_index":950,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":534,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{}}}],["recieive",{"_index":483,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["redirectto",{"_index":113,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["reduce((prev",{"_index":601,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["reducer",{"_index":850,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["reducer(state",{"_index":500,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/functions.html":{}}}],["reducers",{"_index":407,"title":{},"body":{"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/GiveConsentModule.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relative",{"_index":756,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["reload",{"_index":919,"title":{},"body":{"index.html":{}}}],["remove",{"_index":208,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["removeconsent",{"_index":160,"title":{"classes/RemoveConsent.html":{}},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["removeconsent(id",{"_index":206,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{}}}],["request",{"_index":355,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["request.clone",{"_index":788,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["requests",{"_index":783,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["require",{"_index":868,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":605,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["res.body",{"_index":378,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["response",{"_index":468,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["result",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":97,"title":{},"body":{"classes/AppPage.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"components/GiveConsentComponent.html":{},"classes/MockStore.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerState.html":{}}}],["returns",{"_index":93,"title":{},"body":{"classes/AppPage.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"components/GiveConsentComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{},"miscellaneous/functions.html":{}}}],["rgba($color",{"_index":314,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["right",{"_index":258,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["root",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{}}}],["root'},{'name",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["rotate(0deg",{"_index":768,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["rotate(360deg",{"_index":769,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["route",{"_index":105,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["router",{"_index":337,"title":{},"body":{"injectables/ConsentsEffect.html":{},"components/SpinnerComponent.html":{}}}],["routermodule",{"_index":104,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{}}}],["routermodule.forchild(routes",{"_index":450,"title":{},"body":{"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":114,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":108,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routing.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{}}}],["routing.module.ts",{"_index":103,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":914,"title":{},"body":{"index.html":{}}}],["running",{"_index":937,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":398,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/MockStore.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":241,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["save",{"_index":562,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["scaffolding",{"_index":926,"title":{},"body":{"index.html":{}}}],["select",{"_index":239,"title":{},"body":{"components/ConsentsComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{}}}],["select(selector",{"_index":708,"title":{},"body":{"classes/MockStore.html":{}}}],["selector",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["send",{"_index":561,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["server",{"_index":357,"title":{},"body":{"injectables/ConsentsEffect.html":{},"dependencies.html":{},"index.html":{}}}],["setstate",{"_index":701,"title":{},"body":{"classes/MockStore.html":{}}}],["setstate(data",{"_index":711,"title":{},"body":{"classes/MockStore.html":{}}}],["share",{"_index":433,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["share/models/consent.model",{"_index":248,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["share/modules/spinner/spinner.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["share/modules/spinner/store",{"_index":733,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{}}}],["share/modules/toolbar/toolbar.module",{"_index":429,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["show",{"_index":646,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"interceptors/SpinnerInterceptor.html":{},"miscellaneous/enumerations.html":{}}}],["shown",{"_index":485,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["showonmoduleloading",{"_index":644,"title":{"classes/ShowOnModuleLoading.html":{}},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["sidebar",{"_index":666,"title":{},"body":{"components/MainComponent.html":{}}}],["sidenav",{"_index":663,"title":{},"body":{"components/MainComponent.html":{}}}],["size",{"_index":195,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["skipself",{"_index":520,"title":{},"body":{"modules/CoreModule.html":{}}}],["slava",{"_index":480,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/variables.html":{}}}],["solid",{"_index":306,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"index.html":{}}}],["span')).gettext",{"_index":101,"title":{},"body":{"classes/AppPage.html":{}}}],["spec\\.ts",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specific",{"_index":374,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["spin",{"_index":762,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["spinner",{"_index":645,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerModuleStore.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["spinner'},{'name",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["spinner.component.html",{"_index":721,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["spinner.component.scss",{"_index":720,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["spinner.reducer",{"_index":800,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{}}}],["spinneractions",{"_index":650,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/typealiases.html":{}}}],["spinneractiontypes",{"_index":643,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/enumerations.html":{}}}],["spinneractiontypes.hideaftermoduleloaded",{"_index":641,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"interfaces/SpinnerState.html":{}}}],["spinneractiontypes.showonmoduleloading",{"_index":648,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"interfaces/SpinnerState.html":{}}}],["spinnercomponent",{"_index":39,"title":{"components/SpinnerComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"modules/SpinnerModule.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"overview.html":{}}}],["spinnerinterceptor",{"_index":518,"title":{"interceptors/SpinnerInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"interceptors/SpinnerInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["spinnermodule",{"_index":62,"title":{"modules/SpinnerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SpinnerModule.html":{},"modules.html":{},"overview.html":{}}}],["spinnermodulestore",{"_index":796,"title":{"interfaces/SpinnerModuleStore.html":{}},"body":{"interfaces/SpinnerModuleStore.html":{},"coverage.html":{}}}],["spinnerstate",{"_index":804,"title":{"interfaces/SpinnerState.html":{}},"body":{"interfaces/SpinnerState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["spinnerstore",{"_index":725,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["src/.../app",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../consent.mock.ts",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../consents",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../consents.actions.ts",{"_index":898,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../consents.reducer.ts",{"_index":903,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../consents.selector.ts",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../enums.ts",{"_index":899,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../environment.prod.ts",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../give",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../spinner.action.ts",{"_index":900,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../spinner.reducer.ts",{"_index":904,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../spinner.selectors.ts",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":102,"title":{},"body":{"modules/AppRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/common/core/classes/unsubscriber.ts",{"_index":829,"title":{},"body":{"classes/Unsubscriber.html":{},"coverage.html":{}}}],["src/app/common/core/classes/unsubscriber.ts:13",{"_index":833,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["src/app/common/core/classes/unsubscriber.ts:7",{"_index":831,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["src/app/common/core/classes/unsubscriber.ts:9",{"_index":832,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["src/app/common/core/core.module.ts",{"_index":519,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/app/common/core/enums/enums.ts",{"_index":901,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/common/core/interceptors/spinner.interceptor.ts",{"_index":772,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{},"coverage.html":{}}}],["src/app/common/core/interceptors/spinner.interceptor.ts:14",{"_index":775,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["src/app/common/core/interceptors/spinner.interceptor.ts:19",{"_index":779,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["src/app/common/core/services/consents.service.mock.ts",{"_index":476,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"coverage.html":{}}}],["src/app/common/core/services/consents.service.mock.ts:16",{"_index":478,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["src/app/common/core/services/consents.service.mock.ts:20",{"_index":477,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["src/app/common/core/services/consents.service.mock.ts:24",{"_index":479,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["src/app/common/core/services/consents.service.mock.ts:9",{"_index":492,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["src/app/common/core/services/consents.service.ts",{"_index":451,"title":{},"body":{"injectables/ConsentsService.html":{},"coverage.html":{}}}],["src/app/common/core/services/consents.service.ts:11",{"_index":455,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["src/app/common/core/services/consents.service.ts:15",{"_index":461,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["src/app/common/core/services/consents.service.ts:20",{"_index":458,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["src/app/common/core/services/consents.service.ts:24",{"_index":463,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts",{"_index":531,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:15",{"_index":651,"title":{},"body":{"classes/LoadConsents.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:17",{"_index":652,"title":{},"body":{"classes/LoadConsents.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:21",{"_index":655,"title":{},"body":{"classes/LoadConsentsSucceeded.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:23",{"_index":656,"title":{},"body":{"classes/LoadConsentsSucceeded.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:27",{"_index":653,"title":{},"body":{"classes/LoadConsentsFailed.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:29",{"_index":654,"title":{},"body":{"classes/LoadConsentsFailed.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:33",{"_index":536,"title":{},"body":{"classes/CreateNewConsent.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:35",{"_index":537,"title":{},"body":{"classes/CreateNewConsent.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:39",{"_index":716,"title":{},"body":{"classes/RemoveConsent.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:41",{"_index":717,"title":{},"body":{"classes/RemoveConsent.html":{}}}],["src/app/common/core/store/effects/consents.effect.ts",{"_index":332,"title":{},"body":{"injectables/ConsentsEffect.html":{},"coverage.html":{}}}],["src/app/common/core/store/effects/consents.effect.ts:18",{"_index":338,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["src/app/common/core/store/effects/consents.effect.ts:27",{"_index":384,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["src/app/common/core/store/effects/consents.effect.ts:43",{"_index":366,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["src/app/common/core/store/effects/consents.effect.ts:69",{"_index":392,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["src/app/common/core/store/effects/index.ts",{"_index":848,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/core/store/reducers/consents.reducer.ts",{"_index":495,"title":{},"body":{"interfaces/ConsentsState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/core/store/reducers/index.ts",{"_index":438,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/core/store/selectors/consents.selector.ts",{"_index":851,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/share/mocks/consent.mock.ts",{"_index":853,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/share/mocks/mock",{"_index":693,"title":{},"body":{"interfaces/MockPrivate.html":{},"coverage.html":{}}}],["src/app/common/share/models/consent.model.ts",{"_index":116,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"coverage.html":{}}}],["src/app/common/share/models/consent.model.ts:12",{"_index":138,"title":{},"body":{"classes/ConsentWrite.html":{}}}],["src/app/common/share/models/consent.model.ts:2",{"_index":122,"title":{},"body":{"classes/Consent.html":{}}}],["src/app/common/share/models/consent.model.ts:3",{"_index":121,"title":{},"body":{"classes/Consent.html":{}}}],["src/app/common/share/models/consent.model.ts:7",{"_index":133,"title":{},"body":{"classes/ConsentRead.html":{}}}],["src/app/common/share/models/consent.model.ts:8",{"_index":132,"title":{},"body":{"classes/ConsentRead.html":{}}}],["src/app/common/share/modules/spinner/containers/spinner.component.ts",{"_index":719,"title":{},"body":{"components/SpinnerComponent.html":{},"coverage.html":{}}}],["src/app/common/share/modules/spinner/containers/spinner.component.ts:17",{"_index":724,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["src/app/common/share/modules/spinner/containers/spinner.component.ts:24",{"_index":726,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["src/app/common/share/modules/spinner/spinner.module.ts",{"_index":793,"title":{},"body":{"modules/SpinnerModule.html":{}}}],["src/app/common/share/modules/spinner/store/actions/spinner.action.ts",{"_index":640,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/common/share/modules/spinner/store/actions/spinner.action.ts:13",{"_index":642,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{}}}],["src/app/common/share/modules/spinner/store/actions/spinner.action.ts:9",{"_index":718,"title":{},"body":{"classes/ShowOnModuleLoading.html":{}}}],["src/app/common/share/modules/spinner/store/reducers/index.ts",{"_index":797,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts",{"_index":805,"title":{},"body":{"interfaces/SpinnerState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/share/modules/spinner/store/selectors/spinner.selectors.ts",{"_index":857,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/share/modules/toolbar/containers/toolbar.component.ts",{"_index":809,"title":{},"body":{"components/ToolbarComponent.html":{},"coverage.html":{}}}],["src/app/common/share/modules/toolbar/containers/toolbar.component.ts:9",{"_index":814,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["src/app/common/share/modules/toolbar/toolbar.module.ts",{"_index":825,"title":{},"body":{"modules/ToolbarModule.html":{}}}],["src/app/common/share/testing/mock",{"_index":699,"title":{},"body":{"classes/MockStore.html":{},"coverage.html":{}}}],["src/app/projects/main/containers/main.component.ts",{"_index":657,"title":{},"body":{"components/MainComponent.html":{},"coverage.html":{}}}],["src/app/projects/main/main",{"_index":684,"title":{},"body":{"modules/MainRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/projects/main/main.module.ts",{"_index":676,"title":{},"body":{"modules/MainModule.html":{}}}],["src/app/projects/main/modules/consents/consents",{"_index":449,"title":{},"body":{"modules/ConsentsRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/projects/main/modules/consents/consents.module.ts",{"_index":416,"title":{},"body":{"modules/ConsentsModule.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts",{"_index":139,"title":{},"body":{"components/ConsentsComponent.html":{},"coverage.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:103",{"_index":183,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:23",{"_index":214,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:24",{"_index":216,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:25",{"_index":222,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:27",{"_index":220,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:28",{"_index":218,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:29",{"_index":224,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:31",{"_index":228,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:36",{"_index":233,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:38",{"_index":168,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:44",{"_index":199,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:61",{"_index":202,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:70",{"_index":173,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:81",{"_index":207,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:95",{"_index":191,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/give",{"_index":548,"title":{},"body":{"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/assets/styles/variables.scss",{"_index":289,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["src/environments/environment.prod.ts",{"_index":864,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":865,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.ts",{"_index":866,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":915,"title":{},"body":{"index.html":{}}}],["start:server",{"_index":921,"title":{},"body":{"index.html":{}}}],["started",{"_index":906,"title":{"index.html":{}},"body":{}}],["state",{"_index":505,"title":{},"body":{"interfaces/ConsentsState.html":{},"classes/MockStore.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state.consents",{"_index":510,"title":{},"body":{"interfaces/ConsentsState.html":{},"miscellaneous/variables.html":{}}}],["state.consents.data",{"_index":511,"title":{},"body":{"interfaces/ConsentsState.html":{},"miscellaneous/variables.html":{}}}],["state.consents.loading",{"_index":515,"title":{},"body":{"interfaces/ConsentsState.html":{},"miscellaneous/variables.html":{}}}],["state.consents.totalcount",{"_index":513,"title":{},"body":{"interfaces/ConsentsState.html":{},"miscellaneous/variables.html":{}}}],["state.isvisibleonmoduleloading",{"_index":808,"title":{},"body":{"interfaces/SpinnerState.html":{},"miscellaneous/variables.html":{}}}],["state.spinner",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":491,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["still",{"_index":784,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["store",{"_index":167,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["store.ts",{"_index":700,"title":{},"body":{"classes/MockStore.html":{},"coverage.html":{}}}],["store.ts:10",{"_index":709,"title":{},"body":{"classes/MockStore.html":{}}}],["store.ts:14",{"_index":707,"title":{},"body":{"classes/MockStore.html":{}}}],["store.ts:18",{"_index":706,"title":{},"body":{"classes/MockStore.html":{}}}],["store.ts:4",{"_index":704,"title":{},"body":{"classes/MockStore.html":{}}}],["store.ts:6",{"_index":713,"title":{},"body":{"classes/MockStore.html":{}}}],["stored",{"_index":931,"title":{},"body":{"index.html":{}}}],["storemodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/SpinnerModule.html":{}}}],["storemodule.forfeature('consents",{"_index":435,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["storemodule.forfeature('spinner",{"_index":795,"title":{},"body":{"modules/SpinnerModule.html":{}}}],["storemodule.forroot",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["string",{"_index":120,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"interfaces/MockPrivate.html":{},"components/ToolbarComponent.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["styleurls",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["styling",{"_index":923,"title":{},"body":{"index.html":{}}}],["subject",{"_index":229,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["subscribe((data",{"_index":262,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["subscribe((event",{"_index":738,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["subscription",{"_index":256,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["succeeded",{"_index":542,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["super",{"_index":254,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["support",{"_index":951,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":952,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":501,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{}}}],["switchmap",{"_index":395,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["switchmap((action",{"_index":386,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["switchmap(action",{"_index":341,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["t",{"_index":712,"title":{},"body":{"classes/MockStore.html":{}}}],["table",{"_index":176,"title":{},"body":{"components/ConsentsComponent.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":240,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["takeuntil(this.destroy",{"_index":737,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["targeted",{"_index":486,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["team",{"_index":540,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["templateurl",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["test",{"_index":940,"title":{},"body":{"index.html":{}}}],["tests",{"_index":939,"title":{},"body":{"index.html":{}}}],["text",{"_index":668,"title":{},"body":{"components/MainComponent.html":{}}}],["this.actions$.pipe",{"_index":339,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.consentform",{"_index":590,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.consentform.valid",{"_index":588,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.consents",{"_index":260,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.consentsservice.createnewconsent(newconsent",{"_index":352,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.consentsservice.getconsents(action.payload",{"_index":368,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.consentsservice.removeconsent(action.payload.id",{"_index":387,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.consentsstore.dispatch(new",{"_index":278,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["this.consentsstore.pipe(select(fromconsentsstore.getconsents",{"_index":213,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.consentsstore.pipe(select(fromconsentsstore.getconsentstotalcount",{"_index":215,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.consentsstore.pipe(select(fromconsentsstore.getisconsentsloading",{"_index":221,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.countrequests",{"_index":786,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["this.datasource",{"_index":281,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.datasource.data.length",{"_index":274,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.destroy$.complete",{"_index":839,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["this.destroy$.next",{"_index":838,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["this.fb.array(values(consentsgivenforoptions).map(item",{"_index":594,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.fb.group",{"_index":591,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.http.get(`${environment.apiurl}/consents?_page=${params.pageindex}&_limit=${params.pagesize",{"_index":471,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["this.http.post(`${environment.apiurl}/consents",{"_index":472,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["this.http.request('delete",{"_index":473,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["this.initform",{"_index":587,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.initializedata(data",{"_index":263,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.loadconsents",{"_index":255,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.loadconsents(event.pageindex",{"_index":267,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.loadconsents(pageindex",{"_index":268,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.mincheckboxesselectedvalidator(1",{"_index":595,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.pagesize",{"_index":275,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.paginator",{"_index":251,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.paginator.pageindex",{"_index":265,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.router.events",{"_index":735,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["this.router.navigate(['/consents",{"_index":361,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.spinnerstore.dispatch(new",{"_index":741,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["this.spinnerstore.pipe(select(fromspinnerstore.isvisibleonmoduleloading",{"_index":727,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["this.state.asobservable",{"_index":715,"title":{},"body":{"classes/MockStore.html":{}}}],["this.state.next(data",{"_index":714,"title":{},"body":{"classes/MockStore.html":{}}}],["this.store.dispatch(new",{"_index":388,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.unsubscribeall",{"_index":837,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["throw",{"_index":528,"title":{},"body":{"modules/CoreModule.html":{}}}],["time",{"_index":356,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["title",{"_index":813,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["toolbar",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["toolbar.component.html",{"_index":811,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["toolbar.component.scss",{"_index":810,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["toolbarcomponent",{"_index":41,"title":{"components/ToolbarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"coverage.html":{},"overview.html":{}}}],["toolbarmodule",{"_index":415,"title":{"modules/ToolbarModule.html":{}},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/ToolbarModule.html":{},"modules.html":{},"overview.html":{}}}],["top",{"_index":746,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["total",{"_index":372,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{}}}],["totalcount",{"_index":379,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/variables.html":{}}}],["totalselected",{"_index":597,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["transform",{"_index":767,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["true",{"_index":351,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":119,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"interfaces/ConsentsModuleStore.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":960,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":649,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{}}}],["unique",{"_index":210,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["unit",{"_index":938,"title":{},"body":{"index.html":{}}}],["unsibscribe",{"_index":836,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["unsubscribeall",{"_index":162,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["unsubscriber",{"_index":140,"title":{"classes/Unsubscriber.html":{}},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{},"coverage.html":{}}}],["unsubscriber:13",{"_index":212,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["unsubscriber:7",{"_index":231,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["unsubscriber:9",{"_index":211,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["use",{"_index":927,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":524,"title":{},"body":{"modules/CoreModule.html":{}}}],["user",{"_index":568,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["using",{"_index":177,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["valid",{"_index":608,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validation",{"_index":571,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validator",{"_index":596,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validatorfn",{"_index":582,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validators",{"_index":580,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validators.email",{"_index":593,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validators.required",{"_index":592,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["value",{"_index":197,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":584,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["var",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["variable",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":962,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":912,"title":{},"body":{"index.html":{}}}],["via",{"_index":942,"title":{},"body":{"index.html":{}}}],["viewchild",{"_index":236,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["viewchild(matpaginator",{"_index":227,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["visit",{"_index":490,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":181,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["weight",{"_index":318,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["white",{"_index":302,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["width",{"_index":291,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{}}}],["wrapper",{"_index":747,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["x",{"_index":371,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["yes",{"_index":710,"title":{},"body":{"classes/MockStore.html":{}}}],["z",{"_index":749,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["zone.js",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent { }\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSpinnerModule\n\nSpinnerModule\n\nAppModule -->\n\nSpinnerModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            SpinnerModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\n\nimport { CoreModule } from '@core/core.module';\nimport { SpinnerModule } from '@share/modules/spinner/spinner.module';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    EffectsModule.forRoot([]),\n    StoreModule.forRoot({}, {}),\n    CoreModule,\n    SpinnerModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppPage.html":{"url":"classes/AppPage.html","title":"class - AppPage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            e2e/src/app.po.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTitleText\n                            \n                            \n                                navigateTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTitleText\n                        \n                        \n                    \n                \n            \n            \n                \ngetTitleText()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateTo\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateTo()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise {\n    return browser.get(browser.baseUrl) as Promise;\n  }\n\n  getTitleText(): Promise {\n    return element(by.css('app-root .content span')).getText() as Promise;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Route } from '@angular/router';\n\n\nconst routes: Route[] = [\n  {\n    path: '',\n    loadChildren: () => import('./projects/main/main.module').then(m => m.MainModule),\n  },\n  {path: '**', redirectTo: ''}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Consent.html":{"url":"classes/Consent.html","title":"class - Consent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Consent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/models/consent.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/models/consent.model.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/models/consent.model.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Consent {\n  name: string;\n  email: string;\n}\n\nexport class ConsentRead extends Consent {\n  id: number;\n  consentsGivenFor: string;\n}\n\nexport class ConsentWrite extends Consent {\n  consentsGivenFor: {label: string, checked: boolean}[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConsentRead.html":{"url":"classes/ConsentRead.html","title":"class - ConsentRead","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConsentRead\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/models/consent.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Consent\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consentsGivenFor\n                            \n                            \n                                id\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consentsGivenFor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/models/consent.model.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/models/consent.model.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Consent\n\n                                \n                            \n                        \n                            \n                                    Defined in         Consent:3\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Consent\n\n                                \n                            \n                        \n                            \n                                    Defined in         Consent:2\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Consent {\n  name: string;\n  email: string;\n}\n\nexport class ConsentRead extends Consent {\n  id: number;\n  consentsGivenFor: string;\n}\n\nexport class ConsentWrite extends Consent {\n  consentsGivenFor: {label: string, checked: boolean}[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConsentWrite.html":{"url":"classes/ConsentWrite.html","title":"class - ConsentWrite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConsentWrite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/models/consent.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Consent\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consentsGivenFor\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consentsGivenFor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/models/consent.model.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Consent\n\n                                \n                            \n                        \n                            \n                                    Defined in         Consent:3\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Consent\n\n                                \n                            \n                        \n                            \n                                    Defined in         Consent:2\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Consent {\n  name: string;\n  email: string;\n}\n\nexport class ConsentRead extends Consent {\n  id: number;\n  consentsGivenFor: string;\n}\n\nexport class ConsentWrite extends Consent {\n  consentsGivenFor: {label: string, checked: boolean}[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ConsentsComponent.html":{"url":"components/ConsentsComponent.html","title":"component - ConsentsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ConsentsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/projects/main/modules/consents/containers/consents.component.ts\n\n\n\n    \n        Extends\n    \n    \n                Unsubscriber\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-consents\n            \n\n            \n                styleUrls\n                ./consents.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./consents.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consents$\n                            \n                            \n                                consentsTotalCount$\n                            \n                            \n                                dataSource\n                            \n                            \n                                displayedColumns\n                            \n                            \n                                isConsentsLoading$\n                            \n                            \n                                pageSize\n                            \n                            \n                                paginator\n                            \n                            \n                                    Protected\n                                destroy$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goToPage\n                            \n                            \n                                    Private\n                                initializeData\n                            \n                            \n                                    Private\n                                loadConsents\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onPageChange\n                            \n                            \n                                removeConsent\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                unsubscribeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    pages\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(consentsStore: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        consentsStore\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            goToPage\n                        \n                        \n                    \n                \n            \n            \n                \ngoToPage(pageIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:70\n                \n            \n\n\n            \n                \n                    Change page of a table using page numbers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pageIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        page index\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initializeData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initializeData(data: Consent[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:103\n                \n            \n\n\n            \n                \n                    Put loaded data to Mat Table\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Consent[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        list of items\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            loadConsents\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadConsents(pageIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:95\n                \n            \n\n\n            \n                \n                    Load main data based on page index and page size\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    pageIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        page index\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onPageChange\n                        \n                        \n                    \n                \n            \n            \n                \nonPageChange(event: PageEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:61\n                \n            \n\n\n            \n                \n                    Change page of a table using arrows\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            PageEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Mat Paginator entity with data about page\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeConsent\n                        \n                        \n                    \n                \n            \n            \n                \nremoveConsent(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:81\n                \n            \n\n\n            \n                \n                    Remove item from list\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        unique item id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         Unsubscriber\n\n                \n            \n            \n                \n                        Defined in         Unsubscriber:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Inherited from         Unsubscriber\n\n                \n            \n            \n                \n                        Defined in         Unsubscriber:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consents$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.consentsStore.pipe(select(fromConsentsStore.getConsents))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consentsTotalCount$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.consentsStore.pipe(select(fromConsentsStore.getConsentsTotalCount))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataSource\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MatTableDataSource\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayedColumns\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : ['name', 'email', 'consentsGivenFor', 'action']\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isConsentsLoading$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.consentsStore.pipe(select(fromConsentsStore.getIsConsentsLoading))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pageSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 2\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            paginator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatPaginator\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(MatPaginator)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            destroy$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         Unsubscriber\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unsubscriber:7\n\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        pages\n                    \n                \n\n                \n                    \n                        getpages()\n                    \n                \n                            \n                                \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:36\n                                \n                            \n                    \n                        \n                                Get list of available pages based on data length\n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, ViewChild, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\n\nimport { Store, select } from '@ngrx/store';\nimport { takeUntil } from 'rxjs/operators';\nimport { range, cloneDeep } from 'lodash-es';\n\nimport { Unsubscriber } from '@core/classes/unsubscriber';\n\n// models\nimport { Consent } from '@share/models/consent.model';\n\n// store\nimport * as fromConsentsStore from '@core/store';\n\n@Component({\n  selector: 'app-consents',\n  templateUrl: './consents.component.html',\n  styleUrls: ['./consents.component.scss'],\n})\nexport class ConsentsComponent extends Unsubscriber implements OnInit {\n  consents$ = this.consentsStore.pipe(select(fromConsentsStore.getConsents));\n  consentsTotalCount$ = this.consentsStore.pipe(select(fromConsentsStore.getConsentsTotalCount));\n  isConsentsLoading$ = this.consentsStore.pipe(select(fromConsentsStore.getIsConsentsLoading));\n\n  displayedColumns: string[] = ['name', 'email', 'consentsGivenFor', 'action'];\n  dataSource: MatTableDataSource;\n  pageSize = 2;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  /**\n   * Get list of available pages based on data length\n   */\n  get pages() {\n    return this.paginator ? range(this.paginator.getNumberOfPages()) : [];\n  }\n\n  constructor(private consentsStore: Store) {\n    super();\n  }\n\n  ngOnInit() {\n    this.loadConsents();\n\n    /**\n     * Subscription for data initializing right after data appeared in store\n     */\n    this.consents$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((data: Consent[]) => {\n        this.initializeData(data);\n      });\n  }\n\n  /**\n   * Change page of a table using arrows\n   * @param event Mat Paginator entity with data about page\n   */\n  onPageChange(event: PageEvent): void {\n    this.paginator.pageIndex = event.pageIndex;\n    this.loadConsents(event.pageIndex + 1);\n  }\n\n  /**\n   * Change page of a table using page numbers\n   * @param pageIndex page index\n   */\n  goToPage(pageIndex: number): void {\n    if (this.paginator && this.paginator.pageIndex !== pageIndex) {\n      this.paginator.pageIndex = pageIndex;\n      this.loadConsents(pageIndex + 1);\n    }\n  }\n\n  /**\n   * Remove item from list\n   * @param id unique item id\n   */\n  removeConsent(id: number): void {\n    // there is inconsistency between paginator page index and page index needed for api call\n    const pageIndex = this.dataSource.data.length === this.pageSize ? cloneDeep(this.paginator.pageIndex + 1) :\n                                                      cloneDeep(this.paginator.pageIndex === 0 ? 1 : this.paginator.pageIndex);\n    this.paginator.pageIndex = this.paginator.pageIndex === pageIndex ? this.paginator.pageIndex - 1 : this.paginator.pageIndex;\n    this.consentsStore.dispatch(new fromConsentsStore.RemoveConsent({\n      id, pageIndex, pageSize: this.pageSize\n    }));\n  }\n\n  /**\n   * Load main data based on page index and page size\n   * @param pageIndex page index\n   */\n  private loadConsents(pageIndex = 1): void {\n    this.consentsStore.dispatch(new fromConsentsStore.LoadConsents({ pageIndex, pageSize: this.pageSize }));\n  }\n\n  /**\n   * Put loaded data to Mat Table\n   * @param data list of items\n   */\n  private initializeData(data: Consent[]): void {\n    this.dataSource = new MatTableDataSource(data);\n  }\n}\n\n    \n\n    \n        \n\n\n\n  \n    \n    \n      \n        No Consents\n      \n      \n        Loading...  \n      \n    \n\n    \n    \n      \n        Name\n        {{element.name}}\n      \n    \n\n      \n        Email\n        {{element.email}}\n      \n    \n\n      \n        Consent given for\n        {{ element.consentsGivenFor }}\n      \n\n      \n        \n        \n          delete\n        \n      \n    \n      \n      \n    \n\n    \n    \n      \n      \n      \n        Pages: \n        \n          {{ page + 1 }}\n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./consents.component.scss\n                \n                @import \"src/assets/styles/variables.scss\";\n\n.consentsTable {\n  width: 100%;\n\n  .mat-icon {\n    cursor: pointer;\n    color: $color-blue;\n  }\n\n  &-empty {\n    height: 208px;\n    background-color: $color-white;\n    border-bottom: 1px solid $color-light-gray;\n  }\n}\n\n.consentsPagination--hidden {\n  display: none !important;\n}\n.consentsPagination-page {\n  cursor: pointer;\n  color: rgba($color-blue, .7);\n\n  &--active {\n    cursor: default;\n    color: $color-blue;\n    font-weight: 700;\n  }\n}\n\n// table overrides\n:host ::ng-deep {\n  .mat-header-cell,\n  .mat-paginator-range-label {\n    color: $color-blue;\n  }\n\n  .mat-cell {\n    padding: 0 5px;\n  }\n\n  .mat-paginator-container {\n    background-color: $color-white;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        No Consents                    Loading...                                  Name        {{element.name}}                        Email        {{element.email}}                        Consent given for        {{ element.consentsGivenFor }}                                      delete                                                                    Pages:                   {{ page + 1 }}                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ConsentsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsentsEffect.html":{"url":"injectables/ConsentsEffect.html","title":"injectable - ConsentsEffect","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConsentsEffect\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/effects/consents.effect.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createNewConsent$\n                            \n                            \n                                loadConsents$\n                            \n                            \n                                removeConsent$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(actions$: Actions, consentsService: ConsentsService, store: Store, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/effects/consents.effect.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        consentsService\n                                                  \n                                                        \n                                                                        ConsentsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createNewConsent$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.CreateNewConsent),\n    switchMap(action => {\n      const newConsent = {\n        // generate random id\n        id: Math.floor(Math.random() * 100),\n        name: action.payload.name,\n        email: action.payload.email,\n        // convert checked consents to string line\n        consentsGivenFor: join(lodashMap(lodashFilter(action.payload.consentsGivenFor, ['checked', true]), 'label'), ', ')\n      };\n\n      return this.consentsService.createNewConsent(newConsent)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map(() => {\n            // navigate to list page\n            this.router.navigate(['/consents']);\n          }),\n          catchError(error => of(error))\n        );\n    })\n  )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect({dispatch: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/effects/consents.effect.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadConsents$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.LoadConsents),\n    switchMap(action =>\n      this.consentsService.getConsents(action.payload)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map((res: HttpResponse) =>\n          // 'x-total-count' - specific header to get total numberof items (json-server)\n            new consentsActions.LoadConsentsSucceeded({ consents: res.body, totalCount: Number(res.headers.get('x-total-count')) })),\n          catchError(error => of(new consentsActions.LoadConsentsFailed(error)))\n        )\n    )\n  )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/effects/consents.effect.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeConsent$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.RemoveConsent),\n    switchMap((action) => {\n      return this.consentsService.removeConsent(action.payload.id)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map(() => {\n            // load data after remove\n            this.store.dispatch(new consentsActions.LoadConsents({\n              pageIndex: action.payload.pageIndex,\n              pageSize: action.payload.pageSize\n            }));\n          }),\n          catchError(error => of(error))\n        );\n    })\n  )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect({dispatch: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/effects/consents.effect.ts:69\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpResponse } from '@angular/common/http';\n\nimport { Store } from '@ngrx/store';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { map, switchMap, catchError, delay } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { map as lodashMap, filter as lodashFilter, join } from 'lodash-es';\n\nimport { ConsentsService } from '@core/services/consents.service';\nimport { ConsentRead } from '@share/models/consent.model';\n\nimport * as consentsActions from '../actions/consents.actions';\nimport { ConsentsModuleStore } from '../reducers';\n\n@Injectable()\nexport class ConsentsEffect {\n  constructor(\n    private actions$: Actions,\n    private consentsService: ConsentsService,\n    private store: Store,\n    private router: Router\n  ) { }\n\n  @Effect()\n  loadConsents$ = this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.LoadConsents),\n    switchMap(action =>\n      this.consentsService.getConsents(action.payload)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map((res: HttpResponse) =>\n          // 'x-total-count' - specific header to get total numberof items (json-server)\n            new consentsActions.LoadConsentsSucceeded({ consents: res.body, totalCount: Number(res.headers.get('x-total-count')) })),\n          catchError(error => of(new consentsActions.LoadConsentsFailed(error)))\n        )\n    )\n  );\n\n  @Effect({ dispatch: false })\n  createNewConsent$ = this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.CreateNewConsent),\n    switchMap(action => {\n      const newConsent = {\n        // generate random id\n        id: Math.floor(Math.random() * 100),\n        name: action.payload.name,\n        email: action.payload.email,\n        // convert checked consents to string line\n        consentsGivenFor: join(lodashMap(lodashFilter(action.payload.consentsGivenFor, ['checked', true]), 'label'), ', ')\n      };\n\n      return this.consentsService.createNewConsent(newConsent)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map(() => {\n            // navigate to list page\n            this.router.navigate(['/consents']);\n          }),\n          catchError(error => of(error))\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  removeConsent$ = this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.RemoveConsent),\n    switchMap((action) => {\n      return this.consentsService.removeConsent(action.payload.id)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map(() => {\n            // load data after remove\n            this.store.dispatch(new consentsActions.LoadConsents({\n              pageIndex: action.payload.pageIndex,\n              pageSize: action.payload.pageSize\n            }));\n          }),\n          catchError(error => of(error))\n        );\n    })\n  );\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConsentsModule.html":{"url":"modules/ConsentsModule.html","title":"module - ConsentsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConsentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConsentsModule\n\n\n\ncluster_ConsentsModule_declarations\n\n\n\ncluster_ConsentsModule_imports\n\n\n\ncluster_ConsentsModule_providers\n\n\n\n\nConsentsComponent\n\nConsentsComponent\n\n\n\nConsentsModule\n\nConsentsModule\n\nConsentsModule -->\n\nConsentsComponent->ConsentsModule\n\n\n\n\n\nConsentsRoutingModule\n\nConsentsRoutingModule\n\nConsentsModule -->\n\nConsentsRoutingModule->ConsentsModule\n\n\n\n\n\nToolbarModule\n\nToolbarModule\n\nConsentsModule -->\n\nToolbarModule->ConsentsModule\n\n\n\n\n\nConsentsService\n\nConsentsService\n\nConsentsModule -->\n\nConsentsService->ConsentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/modules/consents/consents.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ConsentsComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ConsentsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConsentsRoutingModule\n                        \n                        \n                            ToolbarModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducers, effects } from '@core/store';\n\nimport { ConsentsService } from '@core/services/consents.service';\n\nimport { ToolbarModule } from '@share/modules/toolbar/toolbar.module';\n\nimport { ConsentsRoutingModule } from './consents-routing.module';\n\nimport { ConsentsComponent } from './containers/consents.component';\n\n@NgModule({\n  imports: [\n    // core\n    CommonModule,\n    FlexLayoutModule,\n    // material\n    MatTableModule,\n    MatPaginatorModule,\n    MatButtonModule,\n    MatIconModule,\n    // share\n    ToolbarModule,\n    // data\n    ConsentsRoutingModule,\n    // store\n    EffectsModule.forFeature(effects),\n    StoreModule.forFeature('consents', reducers)\n  ],\n  declarations: [\n    ConsentsComponent\n  ],\n  providers: [\n    ConsentsService\n  ]\n})\nexport class ConsentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConsentsModuleStore.html":{"url":"interfaces/ConsentsModuleStore.html","title":"interface - ConsentsModuleStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ConsentsModuleStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/reducers/index.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        consents\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        consents\n                                    \n                                \n                                \n                                    \n                                        consents:         fromConsents.ConsentsState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         fromConsents.ConsentsState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ActionReducerMap, createFeatureSelector } from '@ngrx/store';\n\nimport * as fromConsents from './consents.reducer';\n\nexport interface ConsentsModuleStore {\n  consents: fromConsents.ConsentsState;\n}\n\nexport const consentsModuleStoreInitialState: ConsentsModuleStore = {\n  consents: fromConsents.initialState\n};\n\nexport const reducers: ActionReducerMap = {\n  consents: fromConsents.reducer\n};\n\nexport const getConsentsModuleStore = createFeatureSelector('consents');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConsentsRoutingModule.html":{"url":"modules/ConsentsRoutingModule.html","title":"module - ConsentsRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    ConsentsRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/modules/consents/consents-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { ConsentsComponent } from './containers/consents.component';\n\nconst routes: Route[] = [\n  {\n    path: '',\n    component: ConsentsComponent,\n  },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ConsentsRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsentsService.html":{"url":"injectables/ConsentsService.html","title":"injectable - ConsentsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConsentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/services/consents.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createNewConsent\n                            \n                            \n                                getConsents\n                            \n                            \n                                removeConsent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/services/consents.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createNewConsent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateNewConsent(consent: ConsentRead)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consent\n                                    \n                                                ConsentRead\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getConsents\n                        \n                        \n                    \n                \n            \n            \n                \ngetConsents(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeConsent\n                        \n                        \n                    \n                \n            \n            \n                \nremoveConsent(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\nimport { environment } from '@environments/environment';\n\nimport { ConsentRead } from '@share/models/consent.model';\n\n@Injectable()\nexport class ConsentsService {\n  constructor(private http: HttpClient) { }\n\n  // added { observe: 'response' } to get full response which provide total count of items in the list\n  getConsents(params: { pageIndex: number, pageSize: number }): Observable> {\n    return this.http.get(`${environment.apiUrl}/consents?_page=${params.pageIndex}&_limit=${params.pageSize}`,\n      { observe: 'response' });\n  }\n\n  createNewConsent(consent: ConsentRead): Observable {\n    return this.http.post(`${environment.apiUrl}/consents`, consent);\n  }\n\n  removeConsent(id: number): Observable {\n    return this.http.request('DELETE', `${environment.apiUrl}/consents/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsentsServiceMock.html":{"url":"injectables/ConsentsServiceMock.html","title":"injectable - ConsentsServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConsentsServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/services/consents.service.mock.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createNewConsent\n                            \n                            \n                                getConsents\n                            \n                            \n                                removeConsent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createNewConsent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateNewConsent(consent: ConsentRead)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.mock.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consent\n                                    \n                                                ConsentRead\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getConsents\n                        \n                        \n                    \n                \n            \n            \n                \ngetConsents()\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.mock.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeConsent\n                        \n                        \n                    \n                \n            \n            \n                \nremoveConsent(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.mock.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsentRead\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    id: 0,\n    name: 'Slava P',\n    email: 'kainsp92@gmail.com',\n    consentsGivenFor: 'Recieive newsletter, Be shown targeted ads, Contribute to anonymous visit statistics'\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/services/consents.service.mock.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { ConsentRead } from '@share/models/consent.model';\n\n@Injectable()\nexport class ConsentsServiceMock {\n  consent: ConsentRead = {\n    id: 0,\n    name: 'Slava P',\n    email: 'kainsp92@gmail.com',\n    consentsGivenFor: 'Recieive newsletter, Be shown targeted ads, Contribute to anonymous visit statistics'\n  };\n\n  getConsents(): Observable {\n    return of([this.consent]);\n  }\n\n  createNewConsent(consent: ConsentRead): Observable {\n    return of();\n  }\n\n  removeConsent(id: number): Observable {\n    return of();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConsentsState.html":{"url":"interfaces/ConsentsState.html","title":"interface - ConsentsState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ConsentsState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/reducers/consents.reducer.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        consents\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        consents\n                                    \n                                \n                                \n                                    \n                                        consents:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConsentsActions, ConsentsActionTypes } from '../actions/consents.actions';\n\nimport { ConsentRead } from '@share/models/consent.model';\n\nexport interface ConsentsState {\n  consents: {\n    data: ConsentRead[];\n    totalCount: number;\n    loaded: boolean;\n    loading: boolean;\n    error: boolean;\n  };\n}\n\nexport const initialState: ConsentsState = {\n  consents: {\n    data: [],\n    totalCount: 0,\n    loaded: false,\n    loading: false,\n    error: false\n  }\n};\n\nexport function reducer(state = initialState, action: ConsentsActions): ConsentsState {\n  switch (action.type) {\n    case ConsentsActionTypes.LoadConsents: {\n      return {\n        ...state,\n        consents: {\n          data: [],\n          totalCount: 0,\n          loading: true,\n          loaded: false,\n          error: false\n        }\n      };\n    }\n    case ConsentsActionTypes.LoadConsentsSucceeded: {\n      return {\n        ...state,\n        consents: {\n          data: action.payload.consents,\n          totalCount: action.payload.totalCount,\n          loading: false,\n          loaded: true,\n          error: false\n        }\n      };\n    }\n    case ConsentsActionTypes.LoadConsentsFailed: {\n      return {\n        ...state,\n        consents: {\n          ...state.consents,\n          loading: false,\n          loaded: true,\n          error: true\n        }\n      };\n    }\n    default:\n      return state;\n  }\n}\n\n// data\nexport const getConsents = (state: ConsentsState) => state.consents.data;\nexport const getConsentsTotalCount = (state: ConsentsState) => state.consents.totalCount;\n\n// state\nexport const getIsConsentsLoading = (state: ConsentsState) => state.consents.loading;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_providers\n\n\n\n\nSpinnerInterceptor\n\nSpinnerInterceptor\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nSpinnerInterceptor->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/common/core/core.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SpinnerInterceptor\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\n\nimport { SpinnerInterceptor } from '@core/interceptors/spinner.interceptor';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    HttpClientModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: SpinnerInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class CoreModule {\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    if (parentModule) {\n      throw new Error('CoreModule is already loaded. Import it in the AppModule only');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNewConsent.html":{"url":"classes/CreateNewConsent.html","title":"class - CreateNewConsent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNewConsent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/actions/consents.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: ConsentWrite)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/actions/consents.actions.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                        ConsentWrite\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsentWrite\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConsentsActionTypes.CreateNewConsent\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:33\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nimport { ConsentRead, ConsentWrite } from '@share/models/consent.model';\n\nexport enum ConsentsActionTypes {\n  LoadConsents = '[Consents List] Load Team',\n  LoadConsentsSucceeded = '[Consents List] Load Team Succeeded',\n  LoadConsentsFailed = '[Consents List] Load Team Failed',\n\n  CreateNewConsent = '[Give Consent] Create New Consent',\n  RemoveConsent = '[Give Consent] Remove Consent'\n}\n\nexport class LoadConsents implements Action {\n  readonly type = ConsentsActionTypes.LoadConsents;\n\n  constructor(public payload: { pageIndex: number, pageSize: number }) { }\n}\n\nexport class LoadConsentsSucceeded implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsSucceeded;\n\n  constructor(public payload: { consents: ConsentRead[], totalCount: number }) { }\n}\n\nexport class LoadConsentsFailed implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsFailed;\n\n  constructor(public payload: any) { }\n}\n\nexport class CreateNewConsent implements Action {\n  readonly type = ConsentsActionTypes.CreateNewConsent;\n\n  constructor(public payload: ConsentWrite) { }\n}\n\nexport class RemoveConsent implements Action {\n  readonly type = ConsentsActionTypes.RemoveConsent;\n\n  constructor(public payload: { id: number, pageIndex: number, pageSize: number }) { }\n}\n\nexport type ConsentsActions =\n  | LoadConsents\n  | LoadConsentsSucceeded\n  | LoadConsentsFailed\n  | CreateNewConsent\n  | RemoveConsent;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GiveConsentComponent.html":{"url":"components/GiveConsentComponent.html","title":"component - GiveConsentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GiveConsentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/projects/main/modules/give-consent/containers/give-consent.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-give-consent\n            \n\n            \n                styleUrls\n                ./give-consent.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./give-consent.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consentForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                giveConsent\n                            \n                            \n                                    Private\n                                initForm\n                            \n                            \n                                    Private\n                                minCheckboxesSelectedValidator\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(consentsStore: Store, fb: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        consentsStore\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            giveConsent\n                        \n                        \n                    \n                \n            \n            \n                \ngiveConsent()\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:30\n                \n            \n\n\n            \n                \n                    Send call using store to save consent\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initForm\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initForm()\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:39\n                \n            \n\n\n            \n                \n                    Initiate/create reactive form to collect user data\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            minCheckboxesSelectedValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    minCheckboxesSelectedValidator(minNumber: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:54\n                \n            \n\n\n            \n                \n                    Validation Fn to check if at least minimum number of checkboxes is checked\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    minNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        minimum amount of checkboxes needed to be checked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consentForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormArray, ValidatorFn } from '@angular/forms';\n\nimport { Store } from '@ngrx/store';\nimport { values } from 'lodash-es';\n\nimport { ConsentsGivenForOptions } from '@core/enums/enums';\n\n// store\nimport * as fromConsentsStore from '@core/store';\n\n@Component({\n  selector: 'app-give-consent',\n  templateUrl: './give-consent.component.html',\n  styleUrls: ['./give-consent.component.scss'],\n})\nexport class GiveConsentComponent implements OnInit {\n  consentForm: FormGroup;\n\n  constructor(private consentsStore: Store,\n              private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.initForm();\n  }\n\n  /**\n   * Send call using store to save consent\n   */\n  giveConsent(): void {\n    if (this.consentForm.valid) {\n      this.consentsStore.dispatch(new fromConsentsStore.CreateNewConsent(this.consentForm.value));\n    }\n  }\n\n  /**\n   * Initiate/create reactive form to collect user data\n   */\n  private initForm(): void {\n    this.consentForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      consentsGivenFor: this.fb.array(values(ConsentsGivenForOptions).map(item => this.fb.group({\n        label: item,\n        checked: false\n      })), this.minCheckboxesSelectedValidator(1))\n    });\n  }\n\n  /**\n   * Validation Fn to check if at least minimum number of checkboxes is checked\n   * @param minNumber minimum amount of checkboxes needed to be checked\n   */\n  private minCheckboxesSelectedValidator(minNumber = 1) {\n    const validator: ValidatorFn = (formArray: FormArray) => {\n      const totalSelected = formArray.controls\n        .map(control => control.value.checked)\n        .reduce((prev, next) => next ? prev + next : prev, 0);\n\n      return totalSelected >= minNumber ? null : { required: true };\n    };\n\n    return validator;\n  }\n}\n\n    \n\n    \n        \n\n\n  \n    \n    \n      Name\n      \n      \n        Name is required\n      \n    \n\n    \n    \n      Email\n      \n      \n        Please enter a valid email address\n      \n      \n        Email is required\n      \n    \n\n    \n    \n      \n        {{ ctrl.value.label }}\n      \n    \n    \n      At least one checkbox required to be checked\n    \n\n    \n    \n      Give Consent\n    \n  \n\n\n    \n\n    \n                \n                    ./give-consent.component.scss\n                \n                @import \"src/assets/styles/variables.scss\";\n\n.giveConsentForm {\n  width: 50%;\n  padding: 20px;\n\n  .mat-raised-button {\n    color: $color-white;\n    background-color: $color-blue;\n\n    &[disabled] {\n      opacity: .3;\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                Name                    Name is required                        Email                    Please enter a valid email address                    Email is required                                {{ ctrl.value.label }}                    At least one checkbox required to be checked                  Give Consent      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GiveConsentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GiveConsentModule.html":{"url":"modules/GiveConsentModule.html","title":"module - GiveConsentModule","body":"\n                   \n\n\n\n\n    Modules\n    GiveConsentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GiveConsentModule\n\n\n\ncluster_GiveConsentModule_declarations\n\n\n\ncluster_GiveConsentModule_imports\n\n\n\ncluster_GiveConsentModule_providers\n\n\n\n\nGiveConsentComponent\n\nGiveConsentComponent\n\n\n\nGiveConsentModule\n\nGiveConsentModule\n\nGiveConsentModule -->\n\nGiveConsentComponent->GiveConsentModule\n\n\n\n\n\nGiveConsentRoutingModule\n\nGiveConsentRoutingModule\n\nGiveConsentModule -->\n\nGiveConsentRoutingModule->GiveConsentModule\n\n\n\n\n\nToolbarModule\n\nToolbarModule\n\nGiveConsentModule -->\n\nToolbarModule->GiveConsentModule\n\n\n\n\n\nConsentsService\n\nConsentsService\n\nGiveConsentModule -->\n\nConsentsService->GiveConsentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/modules/give-consent/give-consent.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            GiveConsentComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ConsentsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GiveConsentRoutingModule\n                        \n                        \n                            ToolbarModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducers, effects } from '@core/store';\n\nimport { ConsentsService } from '@core/services/consents.service';\n\nimport { ToolbarModule } from '@share/modules/toolbar/toolbar.module';\n\nimport { GiveConsentRoutingModule } from './give-consent-routing.module';\n\nimport { GiveConsentComponent } from './containers/give-consent.component';\n\n@NgModule({\n  imports: [\n    // core\n    CommonModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    // material\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    // share\n    ToolbarModule,\n    // data\n    GiveConsentRoutingModule,\n    // store\n    EffectsModule.forFeature(effects),\n    StoreModule.forFeature('consents', reducers)\n  ],\n  declarations: [\n    GiveConsentComponent\n  ],\n  providers: [\n    ConsentsService\n  ]\n})\nexport class GiveConsentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GiveConsentRoutingModule.html":{"url":"modules/GiveConsentRoutingModule.html","title":"module - GiveConsentRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    GiveConsentRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/modules/give-consent/give-consent-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { GiveConsentComponent } from './containers/give-consent.component';\n\nconst routes: Route[] = [\n  {\n    path: '',\n    component: GiveConsentComponent,\n  },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GiveConsentRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HideAfterModuleLoaded.html":{"url":"classes/HideAfterModuleLoaded.html","title":"class - HideAfterModuleLoaded","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HideAfterModuleLoaded\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SpinnerActionTypes.HideAfterModuleLoaded\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/modules/spinner/store/actions/spinner.action.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nexport enum SpinnerActionTypes {\n  ShowOnModuleLoading = '[Spinner] Show On Module Loading',\n  HideAfterModuleLoaded = '[Spinner] Hide After Module Is Loaded',\n}\n\nexport class ShowOnModuleLoading implements Action {\n  readonly type = SpinnerActionTypes.ShowOnModuleLoading;\n}\n\nexport class HideAfterModuleLoaded implements Action {\n  readonly type = SpinnerActionTypes.HideAfterModuleLoaded;\n}\n\n// action types\nexport type SpinnerActions =\n  | ShowOnModuleLoading\n  | HideAfterModuleLoaded;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConsents.html":{"url":"classes/LoadConsents.html","title":"class - LoadConsents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConsents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/actions/consents.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/actions/consents.actions.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConsentsActionTypes.LoadConsents\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nimport { ConsentRead, ConsentWrite } from '@share/models/consent.model';\n\nexport enum ConsentsActionTypes {\n  LoadConsents = '[Consents List] Load Team',\n  LoadConsentsSucceeded = '[Consents List] Load Team Succeeded',\n  LoadConsentsFailed = '[Consents List] Load Team Failed',\n\n  CreateNewConsent = '[Give Consent] Create New Consent',\n  RemoveConsent = '[Give Consent] Remove Consent'\n}\n\nexport class LoadConsents implements Action {\n  readonly type = ConsentsActionTypes.LoadConsents;\n\n  constructor(public payload: { pageIndex: number, pageSize: number }) { }\n}\n\nexport class LoadConsentsSucceeded implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsSucceeded;\n\n  constructor(public payload: { consents: ConsentRead[], totalCount: number }) { }\n}\n\nexport class LoadConsentsFailed implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsFailed;\n\n  constructor(public payload: any) { }\n}\n\nexport class CreateNewConsent implements Action {\n  readonly type = ConsentsActionTypes.CreateNewConsent;\n\n  constructor(public payload: ConsentWrite) { }\n}\n\nexport class RemoveConsent implements Action {\n  readonly type = ConsentsActionTypes.RemoveConsent;\n\n  constructor(public payload: { id: number, pageIndex: number, pageSize: number }) { }\n}\n\nexport type ConsentsActions =\n  | LoadConsents\n  | LoadConsentsSucceeded\n  | LoadConsentsFailed\n  | CreateNewConsent\n  | RemoveConsent;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConsentsFailed.html":{"url":"classes/LoadConsentsFailed.html","title":"class - LoadConsentsFailed","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConsentsFailed\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/actions/consents.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/actions/consents.actions.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConsentsActionTypes.LoadConsentsFailed\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nimport { ConsentRead, ConsentWrite } from '@share/models/consent.model';\n\nexport enum ConsentsActionTypes {\n  LoadConsents = '[Consents List] Load Team',\n  LoadConsentsSucceeded = '[Consents List] Load Team Succeeded',\n  LoadConsentsFailed = '[Consents List] Load Team Failed',\n\n  CreateNewConsent = '[Give Consent] Create New Consent',\n  RemoveConsent = '[Give Consent] Remove Consent'\n}\n\nexport class LoadConsents implements Action {\n  readonly type = ConsentsActionTypes.LoadConsents;\n\n  constructor(public payload: { pageIndex: number, pageSize: number }) { }\n}\n\nexport class LoadConsentsSucceeded implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsSucceeded;\n\n  constructor(public payload: { consents: ConsentRead[], totalCount: number }) { }\n}\n\nexport class LoadConsentsFailed implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsFailed;\n\n  constructor(public payload: any) { }\n}\n\nexport class CreateNewConsent implements Action {\n  readonly type = ConsentsActionTypes.CreateNewConsent;\n\n  constructor(public payload: ConsentWrite) { }\n}\n\nexport class RemoveConsent implements Action {\n  readonly type = ConsentsActionTypes.RemoveConsent;\n\n  constructor(public payload: { id: number, pageIndex: number, pageSize: number }) { }\n}\n\nexport type ConsentsActions =\n  | LoadConsents\n  | LoadConsentsSucceeded\n  | LoadConsentsFailed\n  | CreateNewConsent\n  | RemoveConsent;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConsentsSucceeded.html":{"url":"classes/LoadConsentsSucceeded.html","title":"class - LoadConsentsSucceeded","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConsentsSucceeded\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/actions/consents.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/actions/consents.actions.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConsentsActionTypes.LoadConsentsSucceeded\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nimport { ConsentRead, ConsentWrite } from '@share/models/consent.model';\n\nexport enum ConsentsActionTypes {\n  LoadConsents = '[Consents List] Load Team',\n  LoadConsentsSucceeded = '[Consents List] Load Team Succeeded',\n  LoadConsentsFailed = '[Consents List] Load Team Failed',\n\n  CreateNewConsent = '[Give Consent] Create New Consent',\n  RemoveConsent = '[Give Consent] Remove Consent'\n}\n\nexport class LoadConsents implements Action {\n  readonly type = ConsentsActionTypes.LoadConsents;\n\n  constructor(public payload: { pageIndex: number, pageSize: number }) { }\n}\n\nexport class LoadConsentsSucceeded implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsSucceeded;\n\n  constructor(public payload: { consents: ConsentRead[], totalCount: number }) { }\n}\n\nexport class LoadConsentsFailed implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsFailed;\n\n  constructor(public payload: any) { }\n}\n\nexport class CreateNewConsent implements Action {\n  readonly type = ConsentsActionTypes.CreateNewConsent;\n\n  constructor(public payload: ConsentWrite) { }\n}\n\nexport class RemoveConsent implements Action {\n  readonly type = ConsentsActionTypes.RemoveConsent;\n\n  constructor(public payload: { id: number, pageIndex: number, pageSize: number }) { }\n}\n\nexport type ConsentsActions =\n  | LoadConsents\n  | LoadConsentsSucceeded\n  | LoadConsentsFailed\n  | CreateNewConsent\n  | RemoveConsent;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MainComponent.html":{"url":"components/MainComponent.html","title":"component - MainComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MainComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/projects/main/containers/main.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-main\n            \n\n            \n                styleUrls\n                ./main.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./main.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss'],\n})\nexport class MainComponent { }\n\n    \n\n    \n        \n  \n  \n    Didomi Challenge\n    \n      \n      \n        \n          Give Consent\n        \n      \n      \n      \n        \n          Collected Consents\n        \n      \n      \n    \n  \n  \n  \n    \n  \n\n    \n\n    \n                \n                    ./main.component.scss\n                \n                @import \"src/assets/styles/variables.scss\";\n\n.sidenav-container {\n   height: 100%;\n }\n\n .sidenav-heading {\n   padding: 16px;\n   color: $color-blue;\n }\n\n .sidebar-link {\n  font-size: 16px;\n  text-decoration: none;\n  color: $color-black;\n\n  &--active {\n    font-weight: 700;\n    color: $color-blue;\n  }\n }\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        Didomi Challenge                                  Give Consent                                            Collected Consents                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MainComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MainModule.html":{"url":"modules/MainModule.html","title":"module - MainModule","body":"\n                   \n\n\n\n\n    Modules\n    MainModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MainModule\n\n\n\ncluster_MainModule_declarations\n\n\n\ncluster_MainModule_imports\n\n\n\n\nMainComponent\n\nMainComponent\n\n\n\nMainModule\n\nMainModule\n\nMainModule -->\n\nMainComponent->MainModule\n\n\n\n\n\nMainRoutingModule\n\nMainRoutingModule\n\nMainModule -->\n\nMainRoutingModule->MainModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/main.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MainComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MainRoutingModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatDividerModule } from '@angular/material/divider';\n\nimport { MainRoutingModule } from './main-routing.module';\n\nimport { MainComponent } from './containers/main.component';\n\n@NgModule({\n  imports: [\n    // core\n    CommonModule,\n    RouterModule,\n    FlexLayoutModule,\n    // material\n    MatSidenavModule,\n    MatListModule,\n    MatDividerModule,\n    // data\n    MainRoutingModule\n\n  ],\n  declarations: [\n    MainComponent\n  ]\n})\nexport class MainModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MainRoutingModule.html":{"url":"modules/MainRoutingModule.html","title":"module - MainRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    MainRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/main-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MainComponent } from './containers/main.component';\n\nconst routes: Route[] = [\n  {\n    path: '',\n    component: MainComponent,\n    children: [\n      {\n        path: 'consents',\n        loadChildren: () =>\n          import('./modules/consents/consents.module').then(m => m.ConsentsModule)\n      },\n      {\n        path: 'give-consent',\n        loadChildren: () =>\n          import('./modules/give-consent/give-consent.module').then(m => m.GiveConsentModule)\n      },\n      { path: '', redirectTo: 'consents', pathMatch: 'full' }\n    ]\n  },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MainRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MockPrivate.html":{"url":"interfaces/MockPrivate.html","title":"interface - MockPrivate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MockPrivate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/mocks/mock-private.type.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [name: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/app/common/share/mocks/mock-private.type.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export declare interface MockPrivate {\n  [name: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockStore.html":{"url":"classes/MockStore.html","title":"class - MockStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/testing/mock-store.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dispatch\n                            \n                            \n                                pipe\n                            \n                            \n                                select\n                            \n                            \n                                setState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                    \n                        \n                            Default value : new BehaviorSubject(undefined)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/testing/mock-store.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dispatch\n                        \n                        \n                    \n                \n            \n            \n                \ndispatch(action: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/share/testing/mock-store.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pipe\n                        \n                        \n                    \n                \n            \n            \n                \npipe()\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/share/testing/mock-store.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            select\n                        \n                        \n                    \n                \n            \n            \n                \nselect(selector?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/share/testing/mock-store.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setState\n                        \n                        \n                    \n                \n            \n            \n                \nsetState(data: T)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/share/testing/mock-store.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport class MockStore {\n  private state: BehaviorSubject = new BehaviorSubject(undefined);\n\n  setState(data: T) {\n    this.state.next(data);\n  }\n\n  select(selector?: any): Observable {\n    return this.state.asObservable();\n  }\n\n  pipe(): Observable {\n    return this.state.asObservable();\n  }\n\n  dispatch(action: any) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveConsent.html":{"url":"classes/RemoveConsent.html","title":"class - RemoveConsent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveConsent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/actions/consents.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/actions/consents.actions.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConsentsActionTypes.RemoveConsent\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nimport { ConsentRead, ConsentWrite } from '@share/models/consent.model';\n\nexport enum ConsentsActionTypes {\n  LoadConsents = '[Consents List] Load Team',\n  LoadConsentsSucceeded = '[Consents List] Load Team Succeeded',\n  LoadConsentsFailed = '[Consents List] Load Team Failed',\n\n  CreateNewConsent = '[Give Consent] Create New Consent',\n  RemoveConsent = '[Give Consent] Remove Consent'\n}\n\nexport class LoadConsents implements Action {\n  readonly type = ConsentsActionTypes.LoadConsents;\n\n  constructor(public payload: { pageIndex: number, pageSize: number }) { }\n}\n\nexport class LoadConsentsSucceeded implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsSucceeded;\n\n  constructor(public payload: { consents: ConsentRead[], totalCount: number }) { }\n}\n\nexport class LoadConsentsFailed implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsFailed;\n\n  constructor(public payload: any) { }\n}\n\nexport class CreateNewConsent implements Action {\n  readonly type = ConsentsActionTypes.CreateNewConsent;\n\n  constructor(public payload: ConsentWrite) { }\n}\n\nexport class RemoveConsent implements Action {\n  readonly type = ConsentsActionTypes.RemoveConsent;\n\n  constructor(public payload: { id: number, pageIndex: number, pageSize: number }) { }\n}\n\nexport type ConsentsActions =\n  | LoadConsents\n  | LoadConsentsSucceeded\n  | LoadConsentsFailed\n  | CreateNewConsent\n  | RemoveConsent;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShowOnModuleLoading.html":{"url":"classes/ShowOnModuleLoading.html","title":"class - ShowOnModuleLoading","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShowOnModuleLoading\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SpinnerActionTypes.ShowOnModuleLoading\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/modules/spinner/store/actions/spinner.action.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nexport enum SpinnerActionTypes {\n  ShowOnModuleLoading = '[Spinner] Show On Module Loading',\n  HideAfterModuleLoaded = '[Spinner] Hide After Module Is Loaded',\n}\n\nexport class ShowOnModuleLoading implements Action {\n  readonly type = SpinnerActionTypes.ShowOnModuleLoading;\n}\n\nexport class HideAfterModuleLoaded implements Action {\n  readonly type = SpinnerActionTypes.HideAfterModuleLoaded;\n}\n\n// action types\nexport type SpinnerActions =\n  | ShowOnModuleLoading\n  | HideAfterModuleLoaded;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SpinnerComponent.html":{"url":"components/SpinnerComponent.html","title":"component - SpinnerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SpinnerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/common/share/modules/spinner/containers/spinner.component.ts\n\n\n\n    \n        Extends\n    \n    \n                Unsubscriber\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-spinner\n            \n\n            \n                styleUrls\n                ./spinner.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./spinner.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isVisibleSpinner$\n                            \n                            \n                                    Protected\n                                destroy$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                unsubscribeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(spinnerStore: Store, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/share/modules/spinner/containers/spinner.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spinnerStore\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/share/modules/spinner/containers/spinner.component.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         Unsubscriber\n\n                \n            \n            \n                \n                        Defined in         Unsubscriber:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Inherited from         Unsubscriber\n\n                \n            \n            \n                \n                        Defined in         Unsubscriber:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isVisibleSpinner$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.spinnerStore.pipe(select(fromSpinnerStore.isVisibleOnModuleLoading))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/modules/spinner/containers/spinner.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            destroy$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         Unsubscriber\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unsubscriber:7\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { GuardsCheckEnd, NavigationCancel, NavigationEnd, NavigationError, Router } from '@angular/router';\n\nimport { select, Store } from '@ngrx/store';\n\nimport { Unsubscriber } from '@core/classes/unsubscriber';\n\nimport * as fromSpinnerStore from '@share/modules/spinner/store';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent extends Unsubscriber implements OnInit {\n  isVisibleSpinner$ = this.spinnerStore.pipe(select(fromSpinnerStore.isVisibleOnModuleLoading));\n\n  constructor(private spinnerStore: Store,\n              private router: Router) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.router.events\n      .pipe(\n        debounceTime(500),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((event: any): void => {\n        if (event instanceof GuardsCheckEnd) {\n          if (event.shouldActivate === true ) {\n            this.spinnerStore.dispatch(new fromSpinnerStore.ShowOnModuleLoading());\n          }\n        } else if (event instanceof NavigationCancel || event instanceof NavigationEnd || event instanceof NavigationError) {\n          this.spinnerStore.dispatch(new fromSpinnerStore.HideAfterModuleLoaded());\n        }\n      });\n  }\n}\n\n    \n\n    \n        \n  \n\n\n    \n\n    \n                \n                    ./spinner.component.scss\n                \n                @import \"src/assets/styles/variables.scss\";\n\n:host {\n  position: absolute;\n  top: 0;\n}\n\n.spinner-wrapper {\n  position: fixed;\n  top: 0;\n  z-index: 3001;\n  width: 100%;\n  height: 100%;\n  background-color: rgba($color-white, .9);\n  animation: fadein .5s ease-out 1;\n\n  .spinner {\n    position: relative;\n    top: 50%;\n    width: 50px;\n    height: 50px;\n    margin: 5px auto 0;\n    border: 5px solid #ccc;\n    border-top: 5px solid $color-blue;\n    border-radius: 50%;\n    animation: spin 1.5s linear infinite;\n  }\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n@keyframes fadein {\n  0% {opacity: 0;}\n  100% {opacity: 1;}\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SpinnerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/SpinnerInterceptor.html":{"url":"interceptors/SpinnerInterceptor.html","title":"interceptor - SpinnerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  SpinnerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/interceptors/spinner.interceptor.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                countRequests\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(spinnerStore: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/interceptors/spinner.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spinnerStore\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(request: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/interceptors/spinner.interceptor.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            countRequests\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/interceptors/spinner.interceptor.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Store } from '@ngrx/store';\n\nimport { finalize } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n// dependencies\nimport * as fromSpinnerStore from '@share/modules/spinner/store';\n\n@Injectable()\nexport class SpinnerInterceptor implements HttpInterceptor {\n  countRequests = 0;\n\n  constructor(private spinnerStore: Store) {}\n\n  // handles all requests and show spinner if at least one request still in process\n  intercept(request: HttpRequest, next: HttpHandler): Observable {\n    this.countRequests++;\n\n    if (this.countRequests === 1) {\n      this.spinnerStore.dispatch(new fromSpinnerStore.ShowOnModuleLoading());\n    }\n\n    const clonedRequest: HttpRequest = request.clone();\n\n    return next.handle(clonedRequest)\n      .pipe(\n        finalize(() => {\n          this.countRequests--;\n\n          if (this.countRequests === 0) {\n            this.spinnerStore.dispatch(new fromSpinnerStore.HideAfterModuleLoaded());\n          }\n        }\n      ));\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SpinnerModule.html":{"url":"modules/SpinnerModule.html","title":"module - SpinnerModule","body":"\n                   \n\n\n\n\n    Modules\n    SpinnerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SpinnerModule\n\n\n\ncluster_SpinnerModule_declarations\n\n\n\ncluster_SpinnerModule_exports\n\n\n\n\nSpinnerComponent\n\nSpinnerComponent\n\n\n\nSpinnerModule\n\nSpinnerModule\n\nSpinnerModule -->\n\nSpinnerComponent->SpinnerModule\n\n\n\n\n\nSpinnerComponent \n\nSpinnerComponent \n\nSpinnerComponent  -->\n\nSpinnerModule->SpinnerComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/common/share/modules/spinner/spinner.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            SpinnerComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SpinnerComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { StoreModule } from '@ngrx/store';\n\nimport { SpinnerComponent } from './containers/spinner.component';\n\nimport { reducers } from '@share/modules/spinner/store';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    StoreModule.forFeature('spinner', reducers)\n  ],\n  declarations: [\n    SpinnerComponent\n  ],\n  exports: [\n    SpinnerComponent\n  ]\n})\nexport class SpinnerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpinnerModuleStore.html":{"url":"interfaces/SpinnerModuleStore.html","title":"interface - SpinnerModuleStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpinnerModuleStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/modules/spinner/store/reducers/index.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        spinner\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        spinner\n                                    \n                                \n                                \n                                    \n                                        spinner:         fromSpinner.SpinnerState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         fromSpinner.SpinnerState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ActionReducerMap, createFeatureSelector } from '@ngrx/store';\n\nimport * as fromSpinner from './spinner.reducer';\n\nexport interface SpinnerModuleStore {\n  spinner: fromSpinner.SpinnerState;\n}\n\nexport const reducers: ActionReducerMap = {\n  spinner: fromSpinner.reducer,\n};\n\nexport const getSpinnerModuleStore = createFeatureSelector('spinner');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpinnerState.html":{"url":"interfaces/SpinnerState.html","title":"interface - SpinnerState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpinnerState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isVisibleOnModuleLoading\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isVisibleOnModuleLoading\n                                    \n                                \n                                \n                                    \n                                        isVisibleOnModuleLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { SpinnerActions, SpinnerActionTypes } from '../actions/spinner.action';\n\nexport interface SpinnerState {\n  // state\n  isVisibleOnModuleLoading: boolean;\n}\n\nexport const initialState: SpinnerState = {\n  // state\n  isVisibleOnModuleLoading: false\n};\n\nexport function reducer(state = initialState, action: SpinnerActions): SpinnerState {\n  switch (action.type) {\n    case SpinnerActionTypes.ShowOnModuleLoading: {\n      return {\n        ...state,\n        isVisibleOnModuleLoading: true,\n      };\n    }\n    case SpinnerActionTypes.HideAfterModuleLoaded: {\n      return {\n        ...state,\n        isVisibleOnModuleLoading: false,\n      };\n    }\n  }\n  return state;\n}\n\n// state\nexport const isVisibleOnModuleLoading = (state: SpinnerState) => state.isVisibleOnModuleLoading;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ToolbarComponent.html":{"url":"components/ToolbarComponent.html","title":"component - ToolbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ToolbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/common/share/modules/toolbar/containers/toolbar.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-toolbar\n            \n\n            \n                styleUrls\n                ./toolbar.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./toolbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/common/share/modules/toolbar/containers/toolbar.component.ts:9\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.scss'],\n})\nexport class ToolbarComponent {\n  @Input() title: string;\n}\n\n    \n\n    \n        \n  \n    {{ title }}\n  \n  Documentation\n\n\n    \n\n    \n                \n                    ./toolbar.component.scss\n                \n                @import \"src/assets/styles/variables.scss\";\n\n.toolbar {\n  background-color: $color-white;\n  height: 60px;\n  padding: 10px 30px;\n  border-bottom: 1px solid $color-light-gray;\n\n  &-heading {\n    color: $color-black;\n    font-weight: 600;\n    font-size: 22px;\n  }\n\n  a {\n    font-size: 10px;;\n    color: $color-blue;\n  }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ title }}    Documentation'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ToolbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ToolbarModule.html":{"url":"modules/ToolbarModule.html","title":"module - ToolbarModule","body":"\n                   \n\n\n\n\n    Modules\n    ToolbarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ToolbarModule\n\n\n\ncluster_ToolbarModule_declarations\n\n\n\ncluster_ToolbarModule_exports\n\n\n\n\nToolbarComponent\n\nToolbarComponent\n\n\n\nToolbarModule\n\nToolbarModule\n\nToolbarModule -->\n\nToolbarComponent->ToolbarModule\n\n\n\n\n\nToolbarComponent \n\nToolbarComponent \n\nToolbarComponent  -->\n\nToolbarModule->ToolbarComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/common/share/modules/toolbar/toolbar.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ToolbarComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ToolbarComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nimport { ToolbarComponent } from './containers/toolbar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatToolbarModule\n  ],\n  declarations: [\n    ToolbarComponent\n  ],\n  exports: [\n    ToolbarComponent\n  ]\n})\nexport class ToolbarModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Unsubscriber.html":{"url":"classes/Unsubscriber.html","title":"class - Unsubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Unsubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/classes/unsubscriber.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                destroy$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                unsubscribeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            destroy$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/classes/unsubscriber.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/classes/unsubscriber.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/classes/unsubscriber.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OnDestroy } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\n// class helps to easily unsibscribe\nexport class Unsubscriber implements OnDestroy {\n  protected destroy$: Subject = new Subject();\n\n  ngOnDestroy(): void {\n    this.unsubscribeAll();\n  }\n\n  unsubscribeAll(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                e2e/src/app.po.ts\n            \n            class\n            AppPage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/app-routing.module.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/classes/unsubscriber.ts\n            \n            class\n            Unsubscriber\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/interceptors/spinner.interceptor.ts\n            \n            interceptor\n            SpinnerInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/services/consents.service.mock.ts\n            \n            injectable\n            ConsentsServiceMock\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/common/core/services/consents.service.ts\n            \n            injectable\n            ConsentsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/common/core/store/actions/consents.actions.ts\n            \n            class\n            CreateNewConsent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/store/actions/consents.actions.ts\n            \n            class\n            LoadConsents\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/store/actions/consents.actions.ts\n            \n            class\n            LoadConsentsFailed\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/store/actions/consents.actions.ts\n            \n            class\n            LoadConsentsSucceeded\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/store/actions/consents.actions.ts\n            \n            class\n            RemoveConsent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/store/effects/consents.effect.ts\n            \n            injectable\n            ConsentsEffect\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/common/core/store/effects/index.ts\n            \n            variable\n            effects\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            interface\n            ConsentsState\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            variable\n            getConsents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            variable\n            getConsentsTotalCount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            variable\n            getIsConsentsLoading\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            variable\n            initialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/index.ts\n            \n            interface\n            ConsentsModuleStore\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/index.ts\n            \n            variable\n            consentsModuleStoreInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/index.ts\n            \n            variable\n            getConsentsModuleStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/index.ts\n            \n            variable\n            reducers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/selectors/consents.selector.ts\n            \n            variable\n            getConsents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/selectors/consents.selector.ts\n            \n            variable\n            getConsentsState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/selectors/consents.selector.ts\n            \n            variable\n            getConsentsTotalCount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/selectors/consents.selector.ts\n            \n            variable\n            getIsConsentsLoading\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/mocks/consent.mock.ts\n            \n            variable\n            ConsentReadMock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/mocks/consent.mock.ts\n            \n            variable\n            ConsentWriteMock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/mocks/mock-private.type.ts\n            \n            interface\n            MockPrivate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/models/consent.model.ts\n            \n            class\n            Consent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/common/share/models/consent.model.ts\n            \n            class\n            ConsentRead\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/common/share/models/consent.model.ts\n            \n            class\n            ConsentWrite\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/containers/spinner.component.ts\n            \n            component\n            SpinnerComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n            \n            class\n            HideAfterModuleLoaded\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n            \n            class\n            ShowOnModuleLoading\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/index.ts\n            \n            interface\n            SpinnerModuleStore\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/index.ts\n            \n            variable\n            getSpinnerModuleStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/index.ts\n            \n            variable\n            reducers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n            \n            interface\n            SpinnerState\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n            \n            variable\n            initialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n            \n            variable\n            isVisibleOnModuleLoading\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/selectors/spinner.selectors.ts\n            \n            variable\n            getSpinnerSelector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/selectors/spinner.selectors.ts\n            \n            variable\n            isVisibleOnModuleLoading\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/toolbar/containers/toolbar.component.ts\n            \n            component\n            ToolbarComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/share/testing/mock-store.ts\n            \n            class\n            MockStore\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/projects/main/containers/main.component.ts\n            \n            component\n            MainComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/projects/main/main-routing.module.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/projects/main/modules/consents/consents-routing.module.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/projects/main/modules/consents/containers/consents.component.ts\n            \n            component\n            ConsentsComponent\n            \n                27 %\n                (5/18)\n            \n        \n        \n            \n                \n                src/app/projects/main/modules/give-consent/containers/give-consent.component.ts\n            \n            component\n            GiveConsentComponent\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/projects/main/modules/give-consent/give-consent-routing.module.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 9.1.1\n        \n            @angular/cdk : 9.2.1\n        \n            @angular/common : 9.1.1\n        \n            @angular/compiler : 9.1.1\n        \n            @angular/core : 9.1.1\n        \n            @angular/flex-layout : 9.0.0-beta.29\n        \n            @angular/forms : 9.1.1\n        \n            @angular/material : 9.2.1\n        \n            @angular/platform-browser : 9.1.1\n        \n            @angular/platform-browser-dynamic : 9.1.1\n        \n            @angular/router : 9.1.1\n        \n            @compodoc/compodoc : 1.1.11\n        \n            @ngrx/effects : 9.1.0\n        \n            @ngrx/entity : 9.1.0\n        \n            @ngrx/store : 9.1.0\n        \n            @ngrx/store-devtools : 9.1.0\n        \n            install : 0.13.0\n        \n            json-server : 0.16.1\n        \n            lodash-es : 4.17.15\n        \n            npm : 6.14.4\n        \n            rxjs : 6.5.4\n        \n            tslib : 1.10.0\n        \n            zone.js : 0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConsentsActionTypes   (src/.../consents.actions.ts)\n                        \n                        \n                            ConsentsGivenForOptions   (src/.../enums.ts)\n                        \n                        \n                            SpinnerActionTypes   (src/.../spinner.action.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/common/core/store/actions/consents.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        ConsentsActionTypes\n                    \n                \n                        \n                            \n                                 LoadConsents\n                            \n                        \n                        \n                            \n                                Value : [Consents List] Load Team\n                            \n                        \n                        \n                            \n                                 LoadConsentsSucceeded\n                            \n                        \n                        \n                            \n                                Value : [Consents List] Load Team Succeeded\n                            \n                        \n                        \n                            \n                                 LoadConsentsFailed\n                            \n                        \n                        \n                            \n                                Value : [Consents List] Load Team Failed\n                            \n                        \n                        \n                            \n                                 CreateNewConsent\n                            \n                        \n                        \n                            \n                                Value : [Give Consent] Create New Consent\n                            \n                        \n                        \n                            \n                                 RemoveConsent\n                            \n                        \n                        \n                            \n                                Value : [Give Consent] Remove Consent\n                            \n                        \n            \n        \n\n    src/app/common/core/enums/enums.ts\n    \n        \n            \n                \n                    \n                        \n                        ConsentsGivenForOptions\n                    \n                \n                        \n                            \n                                 Recieive newsletter\n                            \n                        \n                        \n                            \n                                Value : Recieive newsletter\n                            \n                        \n                        \n                            \n                                 Be shown targeted ads\n                            \n                        \n                        \n                            \n                                Value : Be shown targeted ads\n                            \n                        \n                        \n                            \n                                 Contribute to anonymous visit statistics\n                            \n                        \n                        \n                            \n                                Value : Contribute to anonymous visit statistics\n                            \n                        \n            \n        \n\n    src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n    \n        \n            \n                \n                    \n                        \n                        SpinnerActionTypes\n                    \n                \n                        \n                            \n                                 ShowOnModuleLoading\n                            \n                        \n                        \n                            \n                                Value : [Spinner] Show On Module Loading\n                            \n                        \n                        \n                            \n                                 HideAfterModuleLoaded\n                            \n                        \n                        \n                            \n                                Value : [Spinner] Hide After Module Is Loaded\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            reducer   (src/.../consents.reducer.ts)\n                        \n                        \n                            reducer   (src/.../spinner.reducer.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/common/core/store/reducers/consents.reducer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            reducer\n                        \n                        \n                    \n                \n            \n            \n                \nreducer(state, action)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ConsentsState\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            reducer\n                        \n                        \n                    \n                \n            \n            \n                \nreducer(state, action)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SpinnerState\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDidomiChallenge\nThis project was generated with Angular CLI version 9.1.1.\nDevelopment server\nRun npm run start for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nDevelopment JSON server\nRun npm run start:server for a JSON server.\nCode styling examples\nHTML:\n\nClass naming:\n---Code scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun npm run build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun npm run test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun npm run e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConsentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConsentsRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GiveConsentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GiveConsentRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MainModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MainRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SpinnerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ToolbarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_ConsentsModule\n\n\n\ncluster_ConsentsModule_declarations\n\n\n\ncluster_ConsentsModule_imports\n\n\n\ncluster_ConsentsModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_GiveConsentModule\n\n\n\ncluster_GiveConsentModule_declarations\n\n\n\ncluster_GiveConsentModule_imports\n\n\n\ncluster_MainModule\n\n\n\ncluster_MainModule_declarations\n\n\n\ncluster_MainModule_imports\n\n\n\ncluster_SpinnerModule\n\n\n\ncluster_SpinnerModule_declarations\n\n\n\ncluster_SpinnerModule_exports\n\n\n\ncluster_ToolbarModule\n\n\n\ncluster_ToolbarModule_declarations\n\n\n\ncluster_ToolbarModule_exports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSpinnerModule\n\nSpinnerModule\n\nAppModule -->\n\nSpinnerModule->AppModule\n\n\n\n\n\nSpinnerComponent \n\nSpinnerComponent \n\nSpinnerComponent  -->\n\nSpinnerModule->SpinnerComponent \n\n\n\n\n\nConsentsComponent\n\nConsentsComponent\n\n\n\nConsentsModule\n\nConsentsModule\n\nConsentsModule -->\n\nConsentsComponent->ConsentsModule\n\n\n\n\n\nConsentsRoutingModule\n\nConsentsRoutingModule\n\nConsentsModule -->\n\nConsentsRoutingModule->ConsentsModule\n\n\n\n\n\nToolbarModule\n\nToolbarModule\n\nConsentsModule -->\n\nToolbarModule->ConsentsModule\n\n\n\n\n\nGiveConsentModule\n\nGiveConsentModule\n\nGiveConsentModule -->\n\nToolbarModule->GiveConsentModule\n\n\n\n\n\nToolbarComponent \n\nToolbarComponent \n\nToolbarComponent  -->\n\nToolbarModule->ToolbarComponent \n\n\n\n\n\nConsentsService\n\nConsentsService\n\nConsentsModule -->\n\nConsentsService->ConsentsModule\n\n\n\nGiveConsentModule -->\n\nConsentsService->GiveConsentModule\n\n\n\n\n\nSpinnerInterceptor\n\nSpinnerInterceptor\n\nCoreModule -->\n\nSpinnerInterceptor->CoreModule\n\n\n\n\n\nGiveConsentComponent\n\nGiveConsentComponent\n\nGiveConsentModule -->\n\nGiveConsentComponent->GiveConsentModule\n\n\n\n\n\nGiveConsentRoutingModule\n\nGiveConsentRoutingModule\n\nGiveConsentModule -->\n\nGiveConsentRoutingModule->GiveConsentModule\n\n\n\n\n\nMainComponent\n\nMainComponent\n\n\n\nMainModule\n\nMainModule\n\nMainModule -->\n\nMainComponent->MainModule\n\n\n\n\n\nMainRoutingModule\n\nMainRoutingModule\n\nMainModule -->\n\nMainRoutingModule->MainModule\n\n\n\n\n\nSpinnerComponent\n\nSpinnerComponent\n\nSpinnerModule -->\n\nSpinnerComponent->SpinnerModule\n\n\n\n\n\nToolbarComponent\n\nToolbarComponent\n\nToolbarModule -->\n\nToolbarComponent->ToolbarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConsentsActions   (src/.../consents.actions.ts)\n                        \n                        \n                            SpinnerActions   (src/.../spinner.action.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/common/core/store/actions/consents.actions.ts\n    \n    \n        \n            \n                \n                    \n                    ConsentsActions\n                \n            \n            \n                \n                        LoadConsents | LoadConsentsSucceeded | LoadConsentsFailed | CreateNewConsent | RemoveConsent\n\n                \n            \n        \n    \n    src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n    \n    \n        \n            \n                \n                    \n                    SpinnerActions\n                \n            \n            \n                \n                        ShowOnModuleLoading | HideAfterModuleLoaded\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConsentReadMock   (src/.../consent.mock.ts)\n                        \n                        \n                            consentsModuleStoreInitialState   (src/.../index.ts)\n                        \n                        \n                            ConsentWriteMock   (src/.../consent.mock.ts)\n                        \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            effects   (src/.../index.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            getConsents   (src/.../consents.selector.ts)\n                        \n                        \n                            getConsents   (src/.../consents.reducer.ts)\n                        \n                        \n                            getConsentsModuleStore   (src/.../index.ts)\n                        \n                        \n                            getConsentsState   (src/.../consents.selector.ts)\n                        \n                        \n                            getConsentsTotalCount   (src/.../consents.reducer.ts)\n                        \n                        \n                            getConsentsTotalCount   (src/.../consents.selector.ts)\n                        \n                        \n                            getIsConsentsLoading   (src/.../consents.reducer.ts)\n                        \n                        \n                            getIsConsentsLoading   (src/.../consents.selector.ts)\n                        \n                        \n                            getSpinnerModuleStore   (src/.../index.ts)\n                        \n                        \n                            getSpinnerSelector   (src/.../spinner.selectors.ts)\n                        \n                        \n                            initialState   (src/.../consents.reducer.ts)\n                        \n                        \n                            initialState   (src/.../spinner.reducer.ts)\n                        \n                        \n                            isVisibleOnModuleLoading   (src/.../spinner.reducer.ts)\n                        \n                        \n                            isVisibleOnModuleLoading   (src/.../spinner.selectors.ts)\n                        \n                        \n                            reducers   (src/.../index.ts)\n                        \n                        \n                            reducers   (src/.../index.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                            routes   (src/.../give-consent-routing.module.ts)\n                        \n                        \n                            routes   (src/.../consents-routing.module.ts)\n                        \n                        \n                            routes   (src/.../main-routing.module.ts)\n                        \n                        \n                            routes   (src/.../app-routing.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/common/share/mocks/consent.mock.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ConsentReadMock\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: 0,\n  name: 'Slava P',\n  email: 'kainsp92@gmail.com',\n  consentsGivenFor: 'Recieive newsletter, Be shown targeted ads, Contribute to anonymous visit statistics'\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ConsentWriteMock\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: 0,\n  name: 'Slava P',\n  email: 'kainsp92@gmail.com',\n  consentsGivenFor: [\n    {\n      label: 'Recieive newsletter',\n      checked: true\n    },\n    {\n      label: 'Be shown targeted ads',\n      checked: false\n    },\n    {\n      label: 'Contribute to anonymous visit statistics',\n      checked: false\n    }\n  ]\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/common/core/store/reducers/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            consentsModuleStoreInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsentsModuleStore\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  consents: fromConsents.initialState\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getConsentsModuleStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createFeatureSelector('consents')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reducers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionReducerMap\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  consents: fromConsents.reducer\n}\n                        \n                    \n\n\n            \n        \n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n\n\n            \n        \n\n    src/app/common/core/store/effects/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            effects\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  ConsentsEffect,\n]\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n  apiUrl: 'http://localhost:3000'\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/common/core/store/selectors/consents.selector.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getConsents\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getConsentsState, consentsReducer.getConsents)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getConsentsState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(\n    getConsentsModuleStore,\n    (state: ConsentsModuleStore = consentsModuleStoreInitialState) => state.consents\n  )\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getConsentsTotalCount\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getConsentsState, consentsReducer.getConsentsTotalCount)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getIsConsentsLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getConsentsState, consentsReducer.getIsConsentsLoading)\n                        \n                    \n\n\n            \n        \n\n    src/app/common/core/store/reducers/consents.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getConsents\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: ConsentsState) => state.consents.data\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getConsentsTotalCount\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: ConsentsState) => state.consents.totalCount\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getIsConsentsLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: ConsentsState) => state.consents.loading\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            initialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsentsState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  consents: {\n    data: [],\n    totalCount: 0,\n    loaded: false,\n    loading: false,\n    error: false\n  }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/common/share/modules/spinner/store/reducers/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getSpinnerModuleStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createFeatureSelector('spinner')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reducers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionReducerMap\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  spinner: fromSpinner.reducer,\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/common/share/modules/spinner/store/selectors/spinner.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getSpinnerSelector\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(\n  fromFeature.getSpinnerModuleStore,\n  (state: fromFeature.SpinnerModuleStore) => state.spinner,\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isVisibleOnModuleLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getSpinnerSelector, fromSpinner.isVisibleOnModuleLoading)\n                        \n                    \n\n\n            \n        \n\n    src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            initialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpinnerState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  // state\n  isVisibleOnModuleLoading: false\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isVisibleOnModuleLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: SpinnerState) => state.isVisibleOnModuleLoading\n                        \n                    \n\n\n            \n        \n\n    src/app/projects/main/modules/give-consent/give-consent-routing.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            routes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Route[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    path: '',\n    component: GiveConsentComponent,\n  },\n  { path: '**', redirectTo: '' }\n]\n                        \n                    \n\n\n            \n        \n\n    src/app/projects/main/modules/consents/consents-routing.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            routes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Route[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    path: '',\n    component: ConsentsComponent,\n  },\n  { path: '**', redirectTo: '' }\n]\n                        \n                    \n\n\n            \n        \n\n    src/app/projects/main/main-routing.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            routes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Route[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    path: '',\n    component: MainComponent,\n    children: [\n      {\n        path: 'consents',\n        loadChildren: () =>\n          import('./modules/consents/consents.module').then(m => m.ConsentsModule)\n      },\n      {\n        path: 'give-consent',\n        loadChildren: () =>\n          import('./modules/give-consent/give-consent.module').then(m => m.GiveConsentModule)\n      },\n      { path: '', redirectTo: 'consents', pathMatch: 'full' }\n    ]\n  },\n  { path: '**', redirectTo: '' }\n]\n                        \n                    \n\n\n            \n        \n\n    src/app/app-routing.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            routes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Route[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    path: '',\n    loadChildren: () => import('./projects/main/main.module').then(m => m.MainModule),\n  },\n  {path: '**', redirectTo: ''}\n]\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

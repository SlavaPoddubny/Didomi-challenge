var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.998,1,1.578]],["body/components/AppComponent.html",[0,1.679,1,2.807,2,2.918,3,0.259,4,0.229,5,2.428,6,2.428,7,2.428,8,2.428,9,0.229,10,3.577,11,2.428,12,3.741,13,3.492,14,4.626,15,3.141,16,6.008,17,3.141,18,5.421,19,0.387,20,0.021,21,0.883,22,0.259,23,0.012,24,1.464,25,2.918,26,2.918,27,2.428,28,3.68,29,2.428,30,1.142,31,2.428,32,1.642,33,2.428,34,1.642,35,1.384,36,2.428,37,1.642,38,2.428,39,1.852,40,2.428,41,1.852,42,2.428,43,2.428,44,2.428,45,0.012,46,0.016,47,0.012]],["title/modules/AppModule.html",[48,0.797,49,2.241]],["body/modules/AppModule.html",[1,3.104,3,0.225,4,0.199,9,0.199,13,1.832,19,0.632,20,0.022,21,0.769,22,0.225,23,0.011,24,1.274,45,0.011,46,0.015,47,0.011,48,0.814,49,4.435,50,1.274,51,1.516,52,2.818,53,2.818,54,2.484,55,1.429,56,3.112,57,3.112,58,3.112,59,3.112,60,4.064,61,4.064,62,4.064,63,2.484,64,1.832,65,1.611,66,3.646,67,2.055,68,4.943,69,4.219,70,2.497,71,2.055,72,4.943,73,3.646,74,2.76,75,2.287,76,2.497,77,0.964,78,3.646,79,3.646,80,2.497,81,3.646,82,3.646,83,3.646]],["title/classes/AppPage.html",[23,0.01,84,2.704]],["body/classes/AppPage.html",[3,0.29,4,0.256,9,0.256,14,4.001,19,0.433,20,0.021,22,0.29,23,0.014,26,2.524,45,0.014,46,0.017,47,0.014,70,3.21,84,4.405,85,1.637,86,4.001,87,0.637,88,2.738,89,6.617,90,6.617,91,1.299,92,4.688,93,2.571,94,6.935,95,4.688,96,4.001,97,2.571,98,4.688,99,4.688,100,4.688,101,4.688]],["title/modules/AppRoutingModule.html",[48,0.797,60,2.241]],["body/modules/AppRoutingModule.html",[3,0.294,4,0.26,9,0.26,19,0.543,20,0.022,21,1.002,22,0.294,23,0.014,45,0.014,46,0.017,47,0.014,50,1.66,55,1.863,60,3.682,67,1.976,71,2.44,102,3.599,103,2.754,104,3.16,105,3.682,106,2.101,107,1.976,108,2.754,109,3.682,110,3.599,111,4.057,112,4.057,113,2.982,114,4.754]],["title/classes/Consent.html",[23,0.01,115,0.893]],["body/classes/Consent.html",[3,0.288,4,0.254,9,0.254,20,0.021,22,0.39,23,0.018,30,1.33,45,0.014,46,0.017,47,0.014,85,1.626,87,0.633,91,1.293,115,1.65,116,3.188,117,1.293,118,3.17,119,0.96,120,3.727,121,4.655,122,4.655,123,1.626,124,3.635,125,1.721,126,1.626,127,2.911,128,2.057,129,2.506,130,2.697,131,2.92]],["title/classes/ConsentRead.html",[23,0.01,123,1.248]],["body/classes/ConsentRead.html",[3,0.269,4,0.238,9,0.238,20,0.021,22,0.378,23,0.018,30,1.289,45,0.013,46,0.016,47,0.013,85,1.521,87,0.592,91,1.438,115,1.701,116,2.982,117,1.24,118,3.074,119,1.068,120,3.724,123,1.94,124,3.837,125,2.262,126,1.94,127,3.237,128,1.924,129,2.344,130,2.523,131,2.731,132,4.354,133,4.354,134,3.804,135,3.716,136,3.716]],["title/classes/ConsentWrite.html",[23,0.01,128,1.578]],["body/classes/ConsentWrite.html",[3,0.274,4,0.243,9,0.243,20,0.021,22,0.382,23,0.018,30,1.301,45,0.013,46,0.017,47,0.013,85,1.551,87,0.604,91,1.378,115,1.71,116,3.041,117,1.256,118,3.102,119,1.075,120,3.683,123,1.551,124,3.873,125,1.642,126,1.551,127,3.261,128,2.485,129,2.39,130,2.573,131,2.785,134,3.852,135,3.79,136,3.79,137,2.39,138,4.44]],["title/components/ConsentsComponent.html",[0,0.998,32,1.4]],["body/components/ConsentsComponent.html",[0,0.842,1,0.601,2,1.244,3,0.084,4,0.074,5,0.788,6,0.788,7,0.788,8,0.788,9,0.074,11,0.788,12,2.614,13,2.44,15,1.339,17,1.339,19,0.484,20,0.022,21,0.287,22,0.084,23,0.004,24,0.475,25,1.244,26,1.244,27,0.788,28,2.058,29,0.788,30,1.166,31,0.788,32,1.392,33,0.788,34,0.533,35,0.449,36,0.788,37,0.533,38,0.788,39,0.601,40,0.788,41,0.601,42,0.788,43,0.788,44,0.788,45,0.004,46,0.007,47,0.004,77,0.36,87,0.627,88,1.088,91,1.362,93,2.146,97,0.601,115,1.153,117,0.516,118,1.785,119,0.894,120,1.244,124,1.45,125,1.472,126,1.768,127,1.161,129,0.733,134,2.064,139,1.161,140,2.714,141,0.906,142,2.281,143,1.611,144,3.013,145,2.311,146,3.013,147,3.013,148,3.013,149,3.013,150,2,151,4.614,152,1.75,153,1.75,154,2.311,155,2.714,156,2.311,157,0.961,158,2.689,159,2.311,160,0.906,161,2.281,162,2.281,163,2.311,164,4.614,165,0.566,166,1.161,167,2.329,168,1.361,169,1.511,170,1.428,171,1.973,172,2.311,173,1.361,174,3.032,175,5.262,176,3.938,177,3.032,178,2.311,179,3.397,180,2.318,181,3.547,182,2.311,183,1.361,184,2.311,185,1.244,186,2.603,187,4.32,188,2.036,189,1.75,190,2.311,191,1.361,192,1.161,193,1.75,194,3.552,195,1.75,196,1.434,197,1.363,198,2.963,199,1.361,200,2.311,201,3.552,202,1.361,203,2.311,204,1.973,205,2.311,206,1.973,207,1.361,208,1.161,209,3.032,210,2.311,211,1.161,212,1.161,213,2.311,214,1.361,215,2.311,216,1.361,217,3.013,218,1.361,219,0.906,220,1.361,221,2.311,222,1.361,223,2.311,224,1.361,225,3.013,226,1.161,227,2.311,228,1.361,229,1.75,230,0.807,231,1.161,232,1.361,233,1.361,234,1.973,235,2.311,236,1.361,237,1.161,238,1.161,239,1.03,240,1.161,241,0.932,242,2.311,243,0.932,244,0.932,245,1.161,246,1.361,247,0.601,248,1.161,249,0.932,250,2.311,251,1.361,252,0.854,253,1.161,254,1.361,255,1.361,256,1.361,257,1.361,258,1.361,259,1.361,260,1.361,261,1.361,262,1.361,263,3.397,264,3.013,265,1.361,266,1.361,267,1.361,268,1.973,269,1.361,270,2.311,271,1.361,272,1.361,273,1.361,274,1.339,275,2.311,276,2.311,277,2.311,278,2.311,279,2.311,280,0.854,281,1.361,282,1.03,283,0.932,284,1.361,285,3.013,286,2.311,287,3.471,288,2.228,289,1.361,290,0.932,291,1.361,292,1.583,293,1.583,294,1.03,295,1.161,296,1.161,297,1.03,298,1.161,299,1.161,300,2.311,301,1.361,302,1.361,303,1.161,304,1.361,305,1.161,306,1.361,307,1.161,308,1.03,309,1.03,310,1.161,311,1.361,312,1.161,313,1.161,314,1.361,315,1.161,316,2.311,317,0.932,318,0.64,319,1.161,320,1.161]],["title/injectables/ConsentsEffect.html",[321,1.795,322,2.447]],["body/injectables/ConsentsEffect.html",[3,0.123,4,0.109,9,0.109,19,0.573,20,0.022,21,0.42,22,0.123,23,0.006,30,0.829,45,0.006,46,0.009,47,0.006,75,1.249,77,0.526,87,0.271,91,0.999,97,1.978,106,0.88,107,1.314,117,0.706,118,1.588,119,0.33,120,1.702,123,0.695,125,1.655,127,1.588,129,1.702,130,2.594,143,1.564,150,1.588,155,2.808,157,1.634,160,1.54,165,1.314,167,2.934,169,0.695,170,0.657,175,2.698,180,1.588,186,1.487,188,1.487,189,2.393,192,1.588,196,1.161,197,1.161,208,1.588,226,3.355,230,1.104,241,1.363,243,1.363,244,1.363,247,0.88,283,2.165,315,2.698,318,1.487,321,1.588,322,2.165,323,1.363,324,1.699,325,1.54,326,1.991,327,5.198,328,2.934,329,4.651,330,1.991,331,5.198,332,3.161,333,4.477,334,3.161,335,2.698,336,3.161,337,3.161,338,3.161,339,3.161,340,3.161,341,3.161,342,3.161,343,1.702,344,3.161,345,3.56,346,5.198,347,4.437,348,5.198,349,4.28,350,5.198,351,5.198,352,2.698,353,3.161,354,5.198,355,4.477,356,3.161,357,2.808,358,1.991,359,3.161,360,3.161,361,3.161,362,3.355,363,3.161,364,4.437,365,3.821,366,3.161,367,3.161,368,2.393,369,3.161,370,3.161,371,1.588,372,3.161,373,3.161,374,3.161,375,4.884,376,1.991,377,3.161,378,3.161,379,3.161,380,3.161,381,3.161,382,3.161,383,1.991,384,1.363,385,1.991,386,1.991,387,1.991,388,1.991,389,1.072,390,1.991,391,1.991,392,1.991,393,1.991,394,1.507,395,1,396,1.699,397,1.249,398,1,399,2.698]],["title/modules/ConsentsModule.html",[48,0.797,400,2.447]],["body/modules/ConsentsModule.html",[3,0.208,4,0.184,9,0.184,19,0.65,20,0.022,21,0.711,22,0.208,23,0.01,24,1.178,32,2.479,45,0.01,46,0.014,47,0.01,48,0.753,50,1.178,51,1.402,52,2.705,53,1.694,54,2.705,55,1.321,63,2.354,64,1.694,65,1.49,67,1.948,71,1.948,74,2.553,75,2.115,76,2.31,77,0.891,80,2.31,143,1.178,167,1.815,186,1.587,237,2.878,238,2.878,249,2.31,328,3.406,394,2.553,398,2.354,400,4.749,401,2.878,402,2.878,403,2.878,404,2.878,405,3.969,406,3.665,407,3.372,408,2.714,409,1.815,410,3.209,411,2.115,412,2.115,413,4.685,414,4.685,415,3.998,416,2.878,417,4.685,418,3.372,419,2.31,420,2.878,421,2.878,422,2.553,423,2.553,424,2.878,425,2.878,426,2.878]],["title/interfaces/ConsentsModuleStore.html",[397,2.241,427,1.485]],["body/interfaces/ConsentsModuleStore.html",[3,0.287,4,0.254,9,0.254,19,0.534,20,0.022,22,0.408,45,0.014,46,0.017,47,0.014,77,1.226,87,0.631,107,2.619,117,1.291,119,0.769,143,2.416,397,3.951,398,2.331,427,1.929,428,2.688,429,3.512,430,6.298,431,4.376,432,3.959,433,4.639,434,4.639,435,3.512,436,3.959,437,3.959,438,3.512,439,3.959]],["title/modules/ConsentsRoutingModule.html",[48,0.797,405,2.241]],["body/modules/ConsentsRoutingModule.html",[0,1.319,3,0.292,4,0.258,9,0.258,19,0.587,20,0.022,21,0.995,22,0.292,23,0.014,32,2.29,45,0.014,46,0.017,47,0.014,50,1.649,55,1.85,67,1.963,71,2.43,103,2.735,104,3.146,105,3.666,106,2.086,107,1.963,108,2.735,109,3.666,113,2.961,405,3.666,421,4.029,440,3.573,441,3.573]],["title/injectables/ConsentsService.html",[321,1.795,328,1.923]],["body/injectables/ConsentsService.html",[3,0.215,4,0.19,9,0.19,19,0.571,20,0.022,21,0.733,22,0.215,23,0.01,30,1.242,45,0.01,46,0.014,47,0.01,87,0.473,88,2.251,91,1.316,93,2.417,97,2.417,115,1.196,119,1.058,123,2.058,125,1.286,126,2.158,137,2.576,150,1.747,160,1.875,165,1.445,169,2.058,170,1.946,180,1.747,188,1.636,189,2.632,206,4.084,247,1.536,252,2.181,321,2.404,323,2.381,325,1.875,328,2.576,362,2.967,364,2.967,365,2.967,384,2.381,389,1.872,442,2.967,443,3.002,444,3.477,445,5.893,446,3.477,447,4.785,448,4.084,449,3.477,450,4.481,451,4.785,452,3.477,453,3.477,454,3.477,455,2.632,456,3.477,457,3.477,458,4.785,459,5.471,460,2.632,461,2.967,462,3.477,463,3.477,464,3.477,465,3.477]],["title/injectables/ConsentsServiceMock.html",[321,1.795,466,2.704]],["body/injectables/ConsentsServiceMock.html",[3,0.222,4,0.196,9,0.196,19,0.514,20,0.022,21,0.756,22,0.222,23,0.01,30,1.259,45,0.011,46,0.014,47,0.011,87,0.488,88,2.301,91,1.333,93,2.457,97,2.457,115,1.493,117,1.091,118,2.457,119,0.921,123,2.252,125,2.056,126,1.942,127,2.457,169,1.708,170,1.614,196,1.06,197,1.06,247,1.585,318,2.301,321,2.457,323,2.457,325,1.916,389,1.932,443,3.746,448,4.173,450,4.519,466,3.701,467,3.062,468,4.889,469,3.588,470,3.588,471,4.889,472,3.588,473,4.173,474,4.173,475,4.173,476,3.701,477,3.701,478,3.701,479,3.701,480,3.701,481,3.701,482,3.701,483,3.701,484,3.701,485,3.588,486,3.588]],["title/interfaces/ConsentsState.html",[427,1.485,487,2.241]],["body/interfaces/ConsentsState.html",[3,0.205,4,0.181,9,0.181,19,0.428,20,0.022,22,0.389,45,0.01,46,0.014,47,0.01,87,0.451,97,2.551,107,2.4,117,1.033,119,0.884,123,1.617,126,1.158,131,3.346,137,2.492,143,2.301,185,3.27,186,2.858,196,0.979,219,1.299,247,1.464,274,3.519,318,2.178,343,3.108,357,4.133,371,2.901,395,2.326,396,2.829,427,1.378,428,1.92,443,2.079,487,4.051,488,2.27,489,1.784,490,5.184,491,3.17,492,2.509,493,2.509,494,2.829,495,2.829,496,4.552,497,1.92,498,4.133,499,1.92,500,3.314,501,3.314,502,1.92,503,2.829,504,2.829,505,2.509,506,2.829,507,2.509,508,2.829]],["title/modules/CoreModule.html",[48,0.797,61,2.241]],["body/modules/CoreModule.html",[3,0.251,4,0.222,9,0.222,19,0.618,20,0.022,21,0.857,22,0.251,23,0.012,24,1.42,45,0.012,46,0.016,47,0.012,48,0.907,49,2.55,50,1.42,51,1.69,52,2.042,53,2.042,54,2.974,55,1.593,61,4.27,63,2.67,64,2.042,65,1.796,67,1.69,71,2.209,104,2.861,106,1.796,170,1.342,185,2.188,230,1.42,343,2.188,384,2.784,408,3.079,409,2.188,461,3.469,509,3.469,510,3.469,511,4.192,512,4.065,513,5.314,514,5.314,515,5.314,516,4.065,517,4.065,518,4.065,519,4.065,520,5.314,521,4.065,522,4.065,523,4.065]],["title/classes/CreateNewConsent.html",[23,0.01,325,1.4]],["body/classes/CreateNewConsent.html",[3,0.192,4,0.17,9,0.17,19,0.409,20,0.022,22,0.392,23,0.017,30,0.655,35,1.46,45,0.009,46,0.013,47,0.009,77,0.821,85,1.085,87,0.423,91,1.15,115,1.402,117,0.987,119,1.108,123,1.545,125,1.149,126,2.071,128,2.62,141,2.415,143,1.96,150,2.222,157,2.141,160,2.018,165,1.292,169,1.085,170,1.026,180,1.561,188,2.423,192,2.588,196,0.918,197,0.918,208,1.561,219,2.484,230,1.085,247,1.373,325,2.198,371,1.561,395,1.561,489,1.673,497,1.801,499,1.801,502,1.801,524,1.561,525,2.775,526,4.065,527,3.413,528,1.949,529,4.423,530,3.108,531,2.775,532,1.673,533,2.984,534,2.423,535,1.801,536,2.423,537,1.801,538,1.801,539,3.719,540,1.949]],["title/components/GiveConsentComponent.html",[0,0.998,34,1.4]],["body/components/GiveConsentComponent.html",[0,1.101,1,0.882,2,1.706,3,0.123,4,0.109,5,1.157,6,1.157,7,1.157,8,1.157,9,0.109,11,1.157,12,3.047,13,2.844,15,1.836,17,1.836,19,0.504,20,0.022,21,0.421,22,0.123,23,0.006,24,0.697,25,1.706,26,1.706,27,1.157,28,2.598,29,1.157,30,1.229,31,1.157,32,0.782,33,1.157,34,1.757,35,1.972,36,1.157,37,0.782,38,1.157,39,0.882,40,1.157,41,0.882,42,1.157,43,1.157,44,1.157,45,0.006,46,0.009,47,0.006,77,0.528,87,0.272,88,1.491,91,1.162,93,1.981,97,1.4,107,1.317,115,1.301,117,0.707,118,2.741,119,0.653,126,1.566,127,1.003,129,1.075,130,3.161,141,1.242,142,2.982,155,3.422,158,3.395,165,0.83,166,1.704,167,2.937,169,1.107,170,1.046,171,2.704,177,2.704,179,1.704,181,3.068,186,1.491,187,1.704,196,0.59,197,0.59,198,2.17,209,1.704,243,1.367,244,1.367,248,1.704,249,1.367,252,1.253,263,1.704,268,1.704,280,1.253,282,1.511,287,2.813,288,1.253,292,1.367,293,1.367,317,1.367,318,0.94,343,1.075,357,1.253,541,3.422,542,4.656,543,1.704,544,3.939,545,3.168,546,3.939,547,4.484,548,4.484,549,3.168,550,3.939,551,4.484,552,3.168,553,1.997,554,3.168,555,3.168,556,3.168,557,1.997,558,3.168,559,3.168,560,3.168,561,3.168,562,3.168,563,3.168,564,1.997,565,3.168,566,3.168,567,2.704,568,4.484,569,4.484,570,3.939,571,3.168,572,3.168,573,1.997,574,3.939,575,1.997,576,3.939,577,3.168,578,1.511,579,1.997,580,1.704,581,1.997,582,1.997,583,1.997,584,1.997,585,1.997,586,3.168,587,3.168,588,1.997,589,1.997,590,1.997,591,3.168,592,3.168,593,1.997,594,1.997,595,1.997,596,1.997,597,3.362,598,3.168,599,1.997,600,5.455,601,3.168,602,3.168,603,3.168,604,3.168,605,3.168,606,2.704,607,3.168,608,1.997,609,1.704,610,1.997,611,1.997,612,1.997,613,1.997,614,1.704,615,1.704]],["title/modules/GiveConsentModule.html",[48,0.797,616,2.447]],["body/modules/GiveConsentModule.html",[3,0.203,4,0.179,9,0.179,19,0.651,20,0.022,21,0.692,22,0.203,23,0.009,24,1.146,34,2.458,35,1.083,45,0.01,46,0.014,47,0.01,48,0.733,50,1.146,51,1.364,52,2.666,53,1.649,54,2.666,55,1.286,63,2.31,64,1.649,65,1.45,67,1.911,71,1.911,74,2.484,75,2.059,76,2.248,77,0.867,80,2.248,115,0.82,167,1.767,186,1.544,249,2.248,328,3.377,394,2.484,398,2.31,406,3.634,408,2.663,409,1.767,410,3.148,411,2.059,412,2.059,415,3.923,416,2.801,419,2.248,420,2.801,422,2.484,423,2.484,424,2.801,425,2.801,426,2.801,541,2.059,578,2.484,616,4.726,617,2.801,618,2.801,619,2.801,620,3.282,621,3.935,622,2.059,623,3.282,624,4.597,625,4.597,626,3.282,627,3.282,628,4.597,629,3.282,630,4.597,631,3.282,632,2.801,633,2.801]],["title/modules/GiveConsentRoutingModule.html",[48,0.797,621,2.241]],["body/modules/GiveConsentRoutingModule.html",[0,1.305,3,0.289,4,0.255,9,0.255,19,0.584,20,0.022,21,0.985,22,0.289,23,0.013,34,2.275,45,0.014,46,0.017,47,0.014,50,1.632,55,1.83,67,1.942,71,2.414,103,2.707,104,3.126,105,3.642,106,2.064,107,1.942,108,2.707,109,3.642,113,2.93,115,1.168,441,3.536,541,2.93,621,3.642,622,2.93,632,3.987,633,3.987]],["title/classes/HideAfterModuleLoaded.html",[23,0.01,634,2.07]],["body/classes/HideAfterModuleLoaded.html",[3,0.268,4,0.237,9,0.237,19,0.401,20,0.022,22,0.398,23,0.016,45,0.013,46,0.016,47,0.013,48,1.238,77,1.147,85,1.516,87,0.59,91,0.969,117,1.238,119,1.102,141,2.393,185,2.336,196,1.282,197,1.282,219,2.606,274,2.515,527,3.465,532,2.336,634,3.729,635,2.723,636,4.196,637,4.34,638,2.972,639,3.539,640,2.984,641,2.972,642,3.285,643,3.285,644,3.704,645,2.972]],["title/classes/LoadConsents.html",[23,0.01,157,1.485]],["body/classes/LoadConsents.html",[3,0.191,4,0.169,9,0.169,19,0.407,20,0.022,22,0.391,23,0.017,30,0.65,35,1.453,45,0.009,46,0.013,47,0.009,77,0.816,85,1.078,87,0.42,91,1.145,115,1.398,117,0.983,119,1.14,123,1.537,125,1.141,126,2.065,128,1.945,137,2.762,141,2.409,143,1.954,150,2.212,157,2.325,160,2.01,165,1.283,169,1.078,170,1.019,180,1.551,188,2.414,192,2.578,196,0.911,197,0.911,208,1.551,219,2.479,230,1.078,247,1.364,325,2.01,371,1.551,395,1.551,489,1.661,497,2.55,499,1.788,502,1.788,524,1.551,525,2.761,526,4.058,527,3.406,528,1.936,531,1.936,532,1.661,533,2.972,534,2.414,535,1.788,536,2.414,537,1.788,538,1.788,539,3.71,540,1.936,646,4.401,647,3.086]],["title/classes/LoadConsentsFailed.html",[23,0.01,536,1.681]],["body/classes/LoadConsentsFailed.html",[3,0.193,4,0.171,9,0.171,19,0.411,20,0.022,22,0.393,23,0.017,30,0.66,35,1.467,45,0.009,46,0.013,47,0.009,77,0.827,85,1.093,87,0.426,91,1.154,115,1.407,117,0.992,119,1.11,123,1.552,125,1.157,126,2.076,128,1.964,141,2.42,143,1.966,150,2.233,157,2.149,160,2.026,165,1.301,169,1.093,170,1.033,180,1.572,188,2.433,192,2.597,196,0.924,197,0.924,208,1.572,219,2.489,230,1.093,247,1.383,325,2.026,371,1.572,395,1.572,489,1.685,497,1.813,499,1.813,502,2.575,524,1.572,525,2.788,526,4.073,527,3.42,528,1.963,531,1.963,532,1.685,533,2.995,534,2.433,535,1.813,536,2.648,537,1.813,538,1.813,539,3.729,540,1.963,648,4.445,649,3.129]],["title/classes/LoadConsentsSucceeded.html",[23,0.01,534,1.681]],["body/classes/LoadConsentsSucceeded.html",[3,0.191,4,0.169,9,0.169,19,0.407,20,0.022,22,0.391,23,0.017,30,0.65,35,1.453,45,0.009,46,0.013,47,0.009,77,0.816,85,1.078,87,0.42,91,1.145,115,1.398,117,0.983,119,1.14,123,1.537,125,1.141,126,2.065,128,1.945,137,2.762,141,2.409,143,1.954,150,2.212,157,2.133,160,2.01,165,1.283,169,1.078,170,1.019,180,1.551,188,2.414,192,2.578,196,0.911,197,0.911,208,1.551,219,2.479,230,1.078,247,1.364,325,2.01,371,1.551,395,1.551,489,1.661,497,1.788,499,2.55,502,1.788,524,1.551,525,2.761,526,4.058,527,3.406,528,1.936,531,1.936,532,1.661,533,2.972,534,2.632,535,1.788,536,2.414,537,1.788,538,1.788,539,3.71,540,1.936,650,4.401,651,3.086]],["title/components/MainComponent.html",[0,0.998,37,1.4]],["body/components/MainComponent.html",[0,1.556,1,1.59,2,2.637,3,0.222,4,0.197,5,2.084,6,2.084,7,2.084,8,2.084,9,0.197,11,2.084,12,3.617,13,3.376,15,2.838,17,2.838,19,0.453,20,0.022,21,0.758,22,0.222,23,0.01,24,1.257,25,2.637,26,2.637,27,2.084,28,3.464,29,2.084,30,1.032,31,2.084,32,1.41,33,2.084,34,1.41,35,1.838,36,2.084,37,2.342,38,2.084,39,1.59,40,2.084,41,1.59,42,2.084,43,2.084,44,2.084,45,0.011,46,0.014,47,0.011,115,1.224,143,1.711,193,3.708,195,2.723,280,2.257,283,2.464,287,4.048,288,3.073,290,2.464,303,3.07,307,3.07,308,3.708,309,2.723,310,3.07,317,2.464,320,3.07,652,3.07,653,5.569,654,4.898,655,4.898,656,4.898,657,4.898,658,4.898,659,3.07,660,4.898,661,3.598,662,3.598,663,3.598,664,3.598,665,3.07]],["title/modules/MainModule.html",[48,0.797,666,2.447]],["body/modules/MainModule.html",[3,0.241,4,0.213,9,0.213,19,0.64,20,0.022,21,0.822,22,0.241,23,0.011,24,1.362,37,2.588,45,0.011,46,0.015,47,0.011,48,0.871,50,1.362,51,1.621,52,2.915,53,1.96,54,1.96,55,1.528,63,2.598,64,1.96,65,1.723,67,2.15,71,2.15,80,2.671,104,2.784,106,1.723,186,1.835,193,2.952,408,2.996,409,2.1,410,3.541,411,2.446,412,2.446,422,2.952,423,2.952,666,4.687,667,3.328,668,3.328,669,3.328,670,4.144,671,3.9,672,5.171,673,3.9,674,5.171,675,3.9,676,5.171,677,3.9,678,3.328]],["title/modules/MainRoutingModule.html",[48,0.797,670,2.241]],["body/modules/MainRoutingModule.html",[0,1.178,3,0.261,4,0.23,9,0.23,19,0.557,20,0.022,21,0.889,22,0.261,23,0.012,35,1.392,37,2.133,45,0.012,46,0.016,47,0.012,50,1.473,55,1.653,67,1.753,71,2.263,103,2.444,104,2.93,105,3.414,106,1.864,107,1.753,108,2.444,109,4.135,110,4.12,113,3.414,115,1.054,143,1.901,441,3.193,460,3.193,622,2.646,670,3.414,678,3.6,679,3.193,680,3.6,681,3.6,682,3.6,683,3.6,684,3.6,685,3.6,686,3.6]],["title/interfaces/MockPrivate.html",[427,1.485,687,2.704]],["body/interfaces/MockPrivate.html",[3,0.326,4,0.288,9,0.288,20,0.02,22,0.326,30,1.318,45,0.016,46,0.018,47,0.016,91,1.178,120,3.365,427,2.193,428,3.057,687,4.732,688,5.335,689,4.503,690,5.276,691,5.276,692,5.276]],["title/classes/MockStore.html",[23,0.01,693,2.704]],["body/classes/MockStore.html",[3,0.235,4,0.208,9,0.208,12,2.046,19,0.351,20,0.022,22,0.235,23,0.011,30,1.207,45,0.011,46,0.015,47,0.011,85,1.327,87,0.517,88,2.392,91,1.423,93,2.701,97,2.246,117,1.135,119,1.013,155,3.592,169,2,170,1.891,181,3.189,186,1.788,196,1.122,197,1.122,219,1.489,230,1.775,239,3.848,345,4.187,389,2.046,399,4.338,450,4.364,498,3.592,693,3.848,694,5.597,695,3.244,696,5.083,697,5.727,698,5.083,699,3.801,700,5.083,701,3.801,702,3.801,703,5.083,704,3.801,705,3.801,706,5.083,707,5.727,708,3.801,709,3.801,710,5.083]],["title/classes/RemoveConsent.html",[23,0.01,160,1.4]],["body/classes/RemoveConsent.html",[3,0.191,4,0.169,9,0.169,19,0.407,20,0.022,22,0.391,23,0.017,30,0.65,35,1.453,45,0.009,46,0.013,47,0.009,77,0.816,85,1.078,87,0.42,91,1.145,115,1.398,117,0.983,119,1.14,123,1.537,125,1.141,126,2.065,128,1.945,137,2.762,141,2.409,143,1.954,150,2.212,157,2.133,160,2.192,165,1.283,169,1.078,170,1.019,180,1.551,188,2.414,192,2.578,196,0.911,197,0.911,208,1.551,219,2.479,230,1.078,247,1.364,325,2.01,371,1.551,395,1.551,489,1.661,497,1.788,499,1.788,502,1.788,524,1.551,525,2.761,526,4.058,527,3.406,528,1.936,531,1.936,532,1.661,533,2.972,534,2.414,535,1.788,536,2.414,537,1.788,538,1.788,539,3.71,540,2.761,711,4.401,712,3.086]],["title/classes/ShowOnModuleLoading.html",[23,0.01,639,2.07]],["body/classes/ShowOnModuleLoading.html",[3,0.268,4,0.237,9,0.237,19,0.401,20,0.022,22,0.398,23,0.016,45,0.013,46,0.016,47,0.013,48,1.238,77,1.147,85,1.516,87,0.59,91,0.969,117,1.238,119,1.102,141,2.393,185,2.336,196,1.282,197,1.282,219,2.606,274,2.515,527,3.465,532,2.336,634,3.539,635,2.723,636,3.285,638,2.972,639,3.729,640,2.984,641,2.972,642,3.285,643,4.196,644,3.704,645,2.972,713,4.34]],["title/components/SpinnerComponent.html",[0,0.998,39,1.578]],["body/components/SpinnerComponent.html",[0,1.212,1,1.025,2,1.918,3,0.143,4,0.127,5,1.344,6,1.344,7,1.344,8,1.344,9,0.127,11,1.344,12,3.205,13,2.992,15,2.064,17,2.064,19,0.533,20,0.022,21,0.489,22,0.143,23,0.007,24,0.81,25,1.918,26,1.918,27,1.344,28,2.819,29,1.344,30,0.914,31,1.344,32,0.909,33,1.344,34,0.909,35,0.766,36,1.344,37,0.909,38,1.344,39,2.15,40,1.344,41,1.025,42,1.344,43,1.344,44,1.344,45,0.007,46,0.01,47,0.007,65,1.025,77,0.613,87,0.484,88,1.676,91,1.237,93,1.916,106,1.025,117,0.795,119,0.59,124,2.235,134,2.97,140,3.476,141,1.396,142,3.283,152,2.697,153,2.697,155,1.455,158,3.683,161,3.283,162,3.283,165,0.965,167,2.619,169,0.81,170,0.766,181,3.293,196,1.052,197,1.052,198,2.44,204,4.152,211,1.98,212,1.98,229,2.697,230,0.81,231,1.98,239,1.756,240,1.98,241,1.589,245,1.98,252,1.455,253,1.98,280,1.455,282,2.697,283,3.332,287,2.235,288,1.455,290,2.44,292,1.589,293,1.589,294,3.283,297,2.697,305,1.98,312,1.98,318,2.607,319,3.701,329,4.924,343,1.249,345,1.589,609,3.041,614,3.041,640,2.619,714,1.98,715,4.337,716,3.563,717,4.337,718,1.98,719,3.563,720,3.041,721,2.32,722,3.563,723,3.563,724,3.563,725,3.563,726,3.563,727,1.98,728,1.756,729,2.32,730,2.32,731,2.32,732,2.32,733,2.32,734,4.865,735,2.32,736,3.041,737,1.98,738,1.98,739,4.337,740,2.32,741,4.865,742,2.32,743,2.32,744,2.32,745,2.32,746,2.32,747,3.563,748,3.563,749,2.32,750,2.32,751,2.32,752,3.563,753,2.32,754,2.32,755,2.32,756,2.32,757,3.563,758,2.32,759,2.32,760,2.32,761,3.563,762,3.563,763,2.32,764,2.32]],["title/interceptors/SpinnerInterceptor.html",[511,2.241,765,3.049]],["body/interceptors/SpinnerInterceptor.html",[3,0.218,4,0.192,9,0.192,19,0.593,20,0.022,21,0.742,22,0.218,23,0.01,30,1.018,45,0.01,46,0.014,47,0.01,51,1.464,77,0.931,87,0.479,88,2.272,91,1.23,93,1.556,97,1.556,107,1.464,117,1.078,119,0.913,126,1.23,141,1.38,165,1.464,167,3.19,169,1.686,170,1.594,196,1.04,197,1.04,198,2.412,241,2.412,252,2.21,318,2.592,321,2.426,345,2.412,347,4.12,384,2.412,389,1.896,450,3.772,511,3.028,597,4.701,606,3.006,640,1.896,641,2.412,718,3.006,720,4.12,727,3.006,728,2.666,736,4.12,737,3.006,738,3.006,766,3.522,767,3.006,768,5.508,769,4.828,770,4.828,771,4.828,772,6.208,773,5.926,774,3.522,775,4.828,776,4.828,777,3.522,778,3.522,779,3.522,780,3.522,781,5.926,782,3.522,783,3.522,784,3.522]],["title/modules/SpinnerModule.html",[48,0.797,62,2.241]],["body/modules/SpinnerModule.html",[3,0.257,4,0.227,9,0.227,19,0.621,20,0.022,21,0.875,22,0.257,23,0.012,24,1.45,39,3.166,45,0.012,46,0.016,47,0.012,48,0.927,50,1.45,51,1.726,52,3.005,53,2.086,54,2.086,55,2.344,62,4.292,63,2.707,64,2.086,65,1.835,67,1.726,71,2.24,76,2.844,77,1.097,104,2.901,106,1.835,398,2.707,408,3.122,409,2.236,728,3.143,785,3.544,786,3.544,787,3.544,788,4.153,789,4.153,790,4.153]],["title/interfaces/SpinnerModuleStore.html",[427,1.485,791,2.704]],["body/interfaces/SpinnerModuleStore.html",[3,0.296,4,0.262,9,0.262,19,0.545,20,0.021,22,0.395,45,0.014,46,0.017,47,0.014,77,1.265,87,0.651,107,2.451,117,1.316,119,0.793,398,2.406,427,1.991,428,2.774,431,4.463,432,4.086,640,3.685,791,4.463,792,3.624,793,6.388,794,4.788,795,4.788,796,4.086,797,3.624,798,4.086]],["title/interfaces/SpinnerState.html",[427,1.485,799,2.241]],["body/interfaces/SpinnerState.html",[3,0.258,4,0.228,9,0.228,19,0.386,20,0.022,22,0.392,45,0.012,46,0.016,47,0.012,87,0.568,97,2.651,107,2.249,117,1.208,119,0.692,131,3.763,219,1.637,343,2.249,357,3.394,427,1.737,428,2.421,491,3.705,492,3.163,493,3.163,494,3.566,495,3.566,496,4.617,498,4.298,636,3.163,638,2.862,643,3.163,645,3.705,799,4.123,800,2.862,801,5.257,802,4.178,803,3.566]],["title/components/ToolbarComponent.html",[0,0.998,41,1.578]],["body/components/ToolbarComponent.html",[0,1.533,1,1.544,2,2.585,3,0.216,4,0.191,5,2.025,6,2.025,7,2.025,8,2.025,9,0.191,11,2.025,12,3.593,13,3.353,15,2.782,17,2.782,19,0.444,20,0.022,21,0.737,22,0.216,23,0.01,24,1.221,25,2.585,26,2.585,27,2.025,28,3.422,29,2.025,30,1.012,31,2.025,32,1.369,33,2.025,34,1.369,35,1.154,36,2.025,37,1.369,38,2.025,39,1.544,40,2.025,41,2.61,42,3.422,43,2.025,44,2.025,45,0.01,46,0.014,47,0.01,87,0.475,91,0.78,119,0.579,120,2.585,195,3.635,280,2.192,287,4.11,288,2.192,290,2.394,292,2.394,293,2.394,294,2.645,295,2.983,296,2.983,297,2.645,298,2.983,299,2.983,308,4.152,309,2.645,317,2.394,659,2.983,665,2.983,804,2.983,805,5.486,806,4.802,807,4.802,808,6.191,809,3.495,810,4.802,811,4.098,812,3.495,813,4.802,814,3.495,815,3.495,816,3.495]],["title/modules/ToolbarModule.html",[48,0.797,406,2.07]],["body/modules/ToolbarModule.html",[3,0.261,4,0.23,9,0.23,19,0.609,20,0.022,21,0.889,22,0.261,23,0.012,24,1.473,41,3.173,45,0.012,46,0.016,47,0.012,48,0.942,50,1.473,51,1.753,52,3.028,53,2.119,54,2.119,55,2.361,63,2.735,64,2.119,65,1.864,67,1.753,71,2.263,406,3.979,408,3.153,409,2.271,410,3.727,411,2.646,412,2.646,817,3.6,818,3.6,819,3.6,820,4.218,821,5.442,822,4.218,823,4.218]],["title/classes/Unsubscriber.html",[23,0.01,140,2.241]],["body/classes/Unsubscriber.html",[3,0.263,4,0.233,9,0.233,19,0.506,20,0.022,21,0.897,22,0.263,23,0.016,45,0.013,46,0.016,47,0.013,85,1.487,87,0.579,88,2.577,91,1.351,93,2.419,117,1.222,119,0.705,140,3.435,141,2.146,152,4.582,153,4.582,161,4.837,162,4.837,181,4.008,196,1.257,197,1.257,229,5.004,230,1.912,389,2.292,824,3.634,825,6.053,826,4.258,827,4.258,828,4.258,829,4.258,830,4.258,831,4.258,832,4.258,833,4.258,834,4.258]],["title/coverage.html",[835,4.16]],["body/coverage.html",[0,1.526,1,0.989,9,0.122,10,1.911,20,0.022,23,0.019,32,0.877,34,0.877,37,0.877,39,0.989,41,0.989,45,0.007,46,0.01,47,0.007,84,1.695,86,1.911,102,1.695,103,2.766,108,2.766,115,0.866,116,2.905,119,0.371,123,0.782,128,0.989,139,1.911,140,1.405,157,0.931,160,0.877,176,1.911,230,0.782,318,3.459,321,2.131,322,1.533,324,1.911,325,0.877,328,1.205,397,1.405,398,1.742,419,1.533,427,2.147,429,3.614,435,1.695,438,1.695,440,1.695,442,1.911,443,2.174,455,2.624,466,1.695,467,1.911,487,1.405,488,3.741,491,2.374,492,2.624,505,2.624,507,2.624,511,1.405,524,2.595,534,1.054,536,1.054,541,2.174,542,1.911,543,1.911,622,1.405,634,1.297,635,2.174,639,1.297,652,1.911,679,1.695,687,1.695,688,1.911,689,1.911,693,1.695,694,1.911,695,1.911,714,1.911,765,1.911,767,1.911,791,1.695,792,3.21,797,1.695,799,1.405,800,3.27,801,2.624,804,1.911,811,1.911,824,1.911,835,1.911,836,2.239,837,2.239,838,3.466,839,7.059,840,7.145,841,5.886,842,4.775,843,1.911,844,5.696,845,2.958,846,4.075,847,1.911,848,2.958,849,1.911,850,1.911,851,2.239,852,2.958,853,1.911,854,2.239,855,2.239,856,2.239,857,2.239,858,2.239,859,1.911,860,1.911,861,2.958,862,1.911,863,1.911,864,2.239]],["title/dependencies.html",[51,1.786,865,2.984]],["body/dependencies.html",[20,0.022,21,0.909,45,0.013,46,0.016,47,0.013,51,1.793,69,4.712,70,3.781,75,2.705,77,1.459,106,1.905,243,2.953,244,2.953,349,3.264,368,3.264,389,2.322,409,2.322,411,2.705,412,2.705,578,3.264,866,4.312,867,5.966,868,4.312,869,5.521,870,4.312,871,4.312,872,4.312,873,4.312,874,4.312,875,4.312,876,4.312,877,6.42,878,4.312,879,4.312,880,4.312,881,4.312,882,4.312,883,4.312,884,3.68,885,4.312,886,4.312,887,4.312,888,4.312,889,4.312,890,4.312]],["title/miscellaneous/enumerations.html",[891,1.499,892,3.667]],["body/miscellaneous/enumerations.html",[20,0.021,35,1.775,45,0.012,46,0.016,47,0.012,48,1.2,87,0.563,115,1.58,143,2.086,157,1.721,160,1.622,185,2.229,188,2.81,192,3.001,197,2.087,208,2.08,230,1.446,274,2.399,325,1.622,476,4.07,477,4.07,478,4.07,479,4.07,480,4.07,481,4.07,482,4.07,483,4.07,484,4.07,489,2.895,524,2.08,533,3.46,534,1.948,535,2.399,536,1.948,537,2.399,538,2.399,580,4.589,634,2.399,635,2.597,638,3.683,639,2.399,640,2.895,641,2.835,642,3.134,891,2.08,892,3.533,893,3.533,894,4.14,895,3.533,896,4.14]],["title/miscellaneous/functions.html",[891,1.499,897,3.667]],["body/miscellaneous/functions.html",[20,0.021,30,1.282,45,0.015,46,0.018,47,0.015,87,0.685,93,2.687,169,2.124,170,2.008,219,2.658,487,3.161,488,3.451,493,4.604,498,3.815,799,3.161,800,3.451,845,5.79,891,2.532,897,4.3,898,4.3,899,4.3]],["title/index.html",[87,0.406,900,2.984,901,2.984]],["body/index.html",[0,1.621,4,0.213,13,1.96,20,0.015,23,0.011,25,2.1,30,0.822,45,0.011,46,0.015,47,0.011,65,1.723,96,3.328,174,3.328,230,1.362,313,4.951,335,4.951,349,4.676,352,3.328,368,3.914,567,3.328,867,3.328,884,5.486,902,3.9,903,5.171,904,3.9,905,5.801,906,5.801,907,3.9,908,5.171,909,7.05,910,3.9,911,3.9,912,3.9,913,3.9,914,3.9,915,3.9,916,3.9,917,5.171,918,3.9,919,3.9,920,3.9,921,3.9,922,5.801,923,3.9,924,6.427,925,3.9,926,3.9,927,3.9,928,3.9,929,3.9,930,3.9,931,3.328,932,5.171,933,5.171,934,6.177,935,3.9,936,5.171,937,5.171,938,3.9,939,6.177,940,3.9,941,3.9,942,5.801,943,3.9,944,3.9,945,3.9]],["title/modules.html",[50,1.702]],["body/modules.html",[20,0.017,45,0.014,46,0.017,47,0.014,49,2.951,50,1.643,60,2.951,61,2.951,62,2.951,70,4.819,234,5.655,400,3.222,405,2.951,406,2.726,616,3.222,621,2.951,666,3.222,670,2.951,946,7.036,947,7.036,948,7.254,949,6.626]],["title/overview.html",[950,4.16]],["body/overview.html",[1,2.861,2,1.802,20,0.021,24,1.169,32,2.101,34,2.101,37,2.101,39,2.861,41,2.861,45,0.01,46,0.014,47,0.01,48,0.747,49,4.306,50,1.169,51,1.392,52,1.682,53,1.682,54,1.682,55,1.312,56,2.857,57,2.857,58,2.857,59,2.857,60,3.364,61,3.824,62,3.959,63,2.342,64,1.682,65,1.479,85,1.169,323,2.292,328,3.121,400,4.652,401,2.857,402,2.857,403,2.857,404,2.857,405,3.364,406,3.752,428,1.939,509,2.857,510,2.857,511,3.364,615,2.857,616,4.652,617,2.857,618,2.857,619,2.857,621,3.364,666,4.323,667,2.857,668,2.857,669,2.857,670,3.364,785,2.857,786,2.857,787,2.857,817,2.857,818,2.857,819,2.857,950,2.857,951,3.347,952,3.347,953,3.347,954,3.347]],["title/miscellaneous/typealiases.html",[891,1.499,955,4.296]],["body/miscellaneous/typealiases.html",[20,0.021,45,0.015,46,0.018,47,0.015,87,0.709,119,0.864,157,2.168,160,2.043,325,2.043,395,3.119,524,2.62,534,2.454,536,2.454,634,3.021,635,3.271,639,3.021,645,4.252,891,2.62,893,4.45,895,4.45,956,5.214]],["title/miscellaneous/variables.html",[891,1.499,957,3.667]],["body/miscellaneous/variables.html",[0,1.062,20,0.022,30,0.64,32,0.742,34,0.742,35,0.625,37,0.742,45,0.006,46,0.009,47,0.006,87,0.257,102,1.433,103,3.217,105,2.729,108,3.217,109,3.766,110,2.878,111,1.615,112,1.615,113,2.988,115,0.95,118,1.526,119,1.067,125,1.123,127,1.526,129,2.047,130,2.203,137,1.019,143,1.663,185,1.019,186,0.891,196,2.035,197,2.035,274,1.097,318,1.789,322,1.296,343,2.047,357,3.351,371,0.951,397,1.905,398,2.186,419,2.079,429,1.433,431,2.298,435,2.878,436,1.615,437,1.615,438,2.878,439,1.615,440,1.433,443,2.729,455,3.293,460,1.433,473,2.591,474,2.591,475,2.591,476,2.298,477,2.298,478,2.298,479,2.298,480,2.298,481,2.298,482,2.298,483,2.298,484,2.298,487,2.729,488,1.296,490,1.615,491,2.979,498,3.351,503,1.615,504,1.615,505,3.293,506,1.615,507,3.293,508,1.615,541,1.187,622,1.905,640,1.019,679,1.433,680,1.615,681,1.615,682,1.615,683,1.615,684,1.615,685,1.615,686,1.615,792,1.433,796,1.615,797,2.298,798,1.615,799,1.905,800,1.296,801,3.605,803,1.615,843,1.615,846,1.615,847,2.591,848,1.615,849,2.591,850,2.591,852,1.615,853,2.591,859,1.615,860,1.615,861,1.615,862,2.591,863,2.591,891,0.951,898,3.713,899,2.591,931,2.591,957,1.615,958,3.036,959,5.084,960,3.036,961,1.893,962,1.893,963,4.35,964,3.036,965,1.893,966,1.893,967,1.893,968,1.893,969,4.35,970,1.893,971,1.893,972,1.893,973,1.893,974,3.802,975,1.893,976,3.036,977,1.893,978,1.893,979,1.893,980,1.893,981,1.893,982,1.893,983,1.893]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":318,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.10.2",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["0.13.0",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["0.16.1",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":198,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["1.1.11",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["1.5s",{"_index":758,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["100",{"_index":283,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{}}}],["10px",{"_index":813,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["11",{"_index":951,"title":{},"body":{"overview.html":{}}}],["13",{"_index":953,"title":{},"body":{"overview.html":{}}}],["16px",{"_index":660,"title":{},"body":{"components/MainComponent.html":{}}}],["1px",{"_index":296,"title":{},"body":{"components/ConsentsComponent.html":{},"components/ToolbarComponent.html":{}}}],["2",{"_index":223,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["208px",{"_index":291,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["20px",{"_index":610,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["22px",{"_index":816,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["27",{"_index":855,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":615,"title":{},"body":{"components/GiveConsentComponent.html":{},"overview.html":{}}}],["3/7",{"_index":858,"title":{},"body":{"coverage.html":{}}}],["3001",{"_index":745,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["30px",{"_index":814,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["4.17.15",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["42",{"_index":857,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":954,"title":{},"body":{"overview.html":{}}}],["5/18",{"_index":856,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":609,"title":{},"body":{"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{}}}],["50px",{"_index":752,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["5px",{"_index":319,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["5s",{"_index":749,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["6",{"_index":952,"title":{},"body":{"overview.html":{}}}],["6.14.4",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["600",{"_index":815,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["60px",{"_index":812,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["7",{"_index":306,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["700",{"_index":310,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{}}}],["9",{"_index":746,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["9.0.0",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":867,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["9.2.1",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["absolute",{"_index":740,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["accessors",{"_index":163,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["action",{"_index":219,"title":{},"body":{"components/ConsentsComponent.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/functions.html":{}}}],["action.payload.consents",{"_index":500,"title":{},"body":{"interfaces/ConsentsState.html":{}}}],["action.payload.email",{"_index":339,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["action.payload.name",{"_index":338,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["action.payload.pagesize",{"_index":382,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["action.payload.totalcount",{"_index":501,"title":{},"body":{"interfaces/ConsentsState.html":{}}}],["action.type",{"_index":495,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{}}}],["actionreducermap",{"_index":431,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"interfaces/SpinnerModuleStore.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":327,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["actions/consents.actions",{"_index":396,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsState.html":{}}}],["actions/spinner.action",{"_index":802,"title":{},"body":{"interfaces/SpinnerState.html":{}}}],["active",{"_index":307,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{}}}],["actual_component",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["added",{"_index":457,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["address",{"_index":604,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["ads",{"_index":480,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":956,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":523,"title":{},"body":{"modules/CoreModule.html":{}}}],["amount",{"_index":571,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["angular",{"_index":905,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":409,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":384,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"modules/CoreModule.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["angular/compiler",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"modules/CoreModule.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"dependencies.html":{}}}],["angular/flex",{"_index":411,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/ToolbarModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":578,"title":{},"body":{"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":416,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["angular/material/checkbox",{"_index":631,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["angular/material/divider",{"_index":677,"title":{},"body":{"modules/MainModule.html":{}}}],["angular/material/form",{"_index":626,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["angular/material/icon",{"_index":418,"title":{},"body":{"modules/ConsentsModule.html":{}}}],["angular/material/input",{"_index":629,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["angular/material/list",{"_index":675,"title":{},"body":{"modules/MainModule.html":{}}}],["angular/material/paginator",{"_index":238,"title":{},"body":{"components/ConsentsComponent.html":{},"modules/ConsentsModule.html":{}}}],["angular/material/sidenav",{"_index":673,"title":{},"body":{"modules/MainModule.html":{}}}],["angular/material/table",{"_index":237,"title":{},"body":{"components/ConsentsComponent.html":{},"modules/ConsentsModule.html":{}}}],["angular/material/toolbar",{"_index":822,"title":{},"body":{"modules/ToolbarModule.html":{}}}],["angular/platform",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":106,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"components/SpinnerComponent.html":{},"modules/SpinnerModule.html":{},"dependencies.html":{}}}],["animation",{"_index":747,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["anonymous",{"_index":482,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["apiurl",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"index.html":{}}}],["app.component",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":18,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appeared",{"_index":258,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["appmodule",{"_index":49,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["apppage",{"_index":84,"title":{"classes/AppPage.html":{}},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["approutingmodule",{"_index":60,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["arrows",{"_index":203,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["artifacts",{"_index":925,"title":{},"body":{"index.html":{}}}],["auto",{"_index":754,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["automatically",{"_index":913,"title":{},"body":{"index.html":{}}}],["available",{"_index":234,"title":{},"body":{"components/ConsentsComponent.html":{},"modules.html":{}}}],["background",{"_index":292,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["based",{"_index":194,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["behaviorsubject",{"_index":697,"title":{},"body":{"classes/MockStore.html":{}}}],["behaviorsubject(undefined",{"_index":698,"title":{},"body":{"classes/MockStore.html":{}}}],["beta.29",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["black",{"_index":665,"title":{},"body":{"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["blue",{"_index":288,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["boolean",{"_index":131,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{}}}],["bootstrap",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["border",{"_index":294,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["bottom",{"_index":295,"title":{},"body":{"components/ConsentsComponent.html":{},"components/ToolbarComponent.html":{}}}],["browse",{"_index":948,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPage.html":{},"dependencies.html":{},"modules.html":{}}}],["browser.get(browser.baseurl",{"_index":98,"title":{},"body":{"classes/AppPage.html":{}}}],["browser/animations",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":924,"title":{},"body":{"index.html":{}}}],["button",{"_index":612,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["call",{"_index":555,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["case",{"_index":496,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{}}}],["catcherror",{"_index":387,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["catcherror(error",{"_index":354,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["ccc",{"_index":755,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["cell",{"_index":316,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["challenge",{"_index":656,"title":{},"body":{"components/MainComponent.html":{}}}],["change",{"_index":174,"title":{},"body":{"components/ConsentsComponent.html":{},"index.html":{}}}],["check",{"_index":567,"title":{},"body":{"components/GiveConsentComponent.html":{},"index.html":{}}}],["checkbox",{"_index":607,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["checkboxes",{"_index":569,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["checked",{"_index":130,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"injectables/ConsentsEffect.html":{},"components/GiveConsentComponent.html":{},"miscellaneous/variables.html":{}}}],["children",{"_index":680,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":23,"title":{"classes/AppPage.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"classes/CreateNewConsent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"classes/Unsubscriber.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":85,"title":{},"body":{"classes/AppPage.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"classes/CreateNewConsent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"classes/Unsubscriber.html":{},"overview.html":{}}}],["cli",{"_index":906,"title":{},"body":{"index.html":{}}}],["clonedrequest",{"_index":782,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["cluster_appmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_consentsmodule",{"_index":401,"title":{},"body":{"modules/ConsentsModule.html":{},"overview.html":{}}}],["cluster_consentsmodule_declarations",{"_index":402,"title":{},"body":{"modules/ConsentsModule.html":{},"overview.html":{}}}],["cluster_consentsmodule_imports",{"_index":403,"title":{},"body":{"modules/ConsentsModule.html":{},"overview.html":{}}}],["cluster_consentsmodule_providers",{"_index":404,"title":{},"body":{"modules/ConsentsModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":509,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_providers",{"_index":510,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_giveconsentmodule",{"_index":617,"title":{},"body":{"modules/GiveConsentModule.html":{},"overview.html":{}}}],["cluster_giveconsentmodule_declarations",{"_index":618,"title":{},"body":{"modules/GiveConsentModule.html":{},"overview.html":{}}}],["cluster_giveconsentmodule_imports",{"_index":619,"title":{},"body":{"modules/GiveConsentModule.html":{},"overview.html":{}}}],["cluster_giveconsentmodule_providers",{"_index":620,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["cluster_mainmodule",{"_index":667,"title":{},"body":{"modules/MainModule.html":{},"overview.html":{}}}],["cluster_mainmodule_declarations",{"_index":668,"title":{},"body":{"modules/MainModule.html":{},"overview.html":{}}}],["cluster_mainmodule_imports",{"_index":669,"title":{},"body":{"modules/MainModule.html":{},"overview.html":{}}}],["cluster_spinnermodule",{"_index":785,"title":{},"body":{"modules/SpinnerModule.html":{},"overview.html":{}}}],["cluster_spinnermodule_declarations",{"_index":786,"title":{},"body":{"modules/SpinnerModule.html":{},"overview.html":{}}}],["cluster_spinnermodule_exports",{"_index":787,"title":{},"body":{"modules/SpinnerModule.html":{},"overview.html":{}}}],["cluster_toolbarmodule",{"_index":817,"title":{},"body":{"modules/ToolbarModule.html":{},"overview.html":{}}}],["cluster_toolbarmodule_declarations",{"_index":818,"title":{},"body":{"modules/ToolbarModule.html":{},"overview.html":{}}}],["cluster_toolbarmodule_exports",{"_index":819,"title":{},"body":{"modules/ToolbarModule.html":{},"overview.html":{}}}],["code",{"_index":917,"title":{},"body":{"index.html":{}}}],["collect",{"_index":561,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["collected",{"_index":657,"title":{},"body":{"components/MainComponent.html":{}}}],["color",{"_index":287,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["commonmodule",{"_index":408,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{}}}],["compodoc/compodoc",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"modules/ConsentsRoutingModule.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentRoutingModule.html":{},"components/MainComponent.html":{},"modules/MainRoutingModule.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["component_template",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"overview.html":{}}}],["consent",{"_index":115,"title":{"classes/Consent.html":{}},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainRoutingModule.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["consent'},{'name",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["consent.component",{"_index":633,"title":{},"body":{"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{}}}],["consent.component.html",{"_index":545,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.scss",{"_index":544,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.ts",{"_index":543,"title":{},"body":{"components/GiveConsentComponent.html":{},"coverage.html":{}}}],["consent.component.ts:18",{"_index":552,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.ts:23",{"_index":573,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.ts:30",{"_index":553,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.ts:39",{"_index":557,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.component.ts:54",{"_index":564,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consent.module').then(m",{"_index":684,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["consent.module.ts",{"_index":623,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["consent/containers/give",{"_index":542,"title":{},"body":{"components/GiveConsentComponent.html":{},"coverage.html":{}}}],["consent/give",{"_index":622,"title":{},"body":{"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consent:2",{"_index":136,"title":{},"body":{"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{}}}],["consent:3",{"_index":135,"title":{},"body":{"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{}}}],["consentform",{"_index":546,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["consentread",{"_index":123,"title":{"classes/ConsentRead.html":{}},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{}}}],["consentreadmock",{"_index":849,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["consents",{"_index":143,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainRoutingModule.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["consents'},{'name",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["consents.component.html",{"_index":145,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["consents.component.scss",{"_index":144,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["consents.reducer",{"_index":434,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{}}}],["consentsactions",{"_index":395,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/typealiases.html":{}}}],["consentsactions.loadconsents",{"_index":381,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["consentsactions.loadconsentsfailed(error",{"_index":374,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["consentsactions.loadconsentssucceeded",{"_index":369,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["consentsactiontypes",{"_index":489,"title":{},"body":{"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["consentsactiontypes.createnewconsent",{"_index":531,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["consentsactiontypes.loadconsents",{"_index":497,"title":{},"body":{"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["consentsactiontypes.loadconsentsfailed",{"_index":502,"title":{},"body":{"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["consentsactiontypes.loadconsentssucceeded",{"_index":499,"title":{},"body":{"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["consentsactiontypes.removeconsent",{"_index":540,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["consentscomponent",{"_index":32,"title":{"components/ConsentsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["consentseffect",{"_index":322,"title":{"injectables/ConsentsEffect.html":{}},"body":{"injectables/ConsentsEffect.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consentsgivenfor",{"_index":127,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsServiceMock.html":{},"components/GiveConsentComponent.html":{},"miscellaneous/variables.html":{}}}],["consentsgivenforoptions",{"_index":580,"title":{},"body":{"components/GiveConsentComponent.html":{},"miscellaneous/enumerations.html":{}}}],["consentsmodule",{"_index":400,"title":{"modules/ConsentsModule.html":{}},"body":{"modules/ConsentsModule.html":{},"modules.html":{},"overview.html":{}}}],["consentsmodulestore",{"_index":397,"title":{"interfaces/ConsentsModuleStore.html":{}},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consentsmodulestoreinitialstate",{"_index":435,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consentspagination",{"_index":300,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["consentsreducer.getconsents",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consentsreducer.getconsentstotalcount",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consentsreducer.getisconsentsloading",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consentsroutingmodule",{"_index":405,"title":{"modules/ConsentsRoutingModule.html":{}},"body":{"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["consentsservice",{"_index":328,"title":{"injectables/ConsentsService.html":{}},"body":{"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"injectables/ConsentsService.html":{},"modules/GiveConsentModule.html":{},"coverage.html":{},"overview.html":{}}}],["consentsservicemock",{"_index":466,"title":{"injectables/ConsentsServiceMock.html":{}},"body":{"injectables/ConsentsServiceMock.html":{},"coverage.html":{}}}],["consentsstate",{"_index":487,"title":{"interfaces/ConsentsState.html":{}},"body":{"interfaces/ConsentsState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["consentsstore",{"_index":171,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["consentstable",{"_index":281,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["consentstotalcount",{"_index":146,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["consentwrite",{"_index":128,"title":{"classes/ConsentWrite.html":{}},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{}}}],["consentwritemock",{"_index":850,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["const",{"_index":107,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/ConsentsEffect.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"interfaces/ConsentsState.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{}}}],["constructor",{"_index":165,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["constructor(@optional",{"_index":519,"title":{},"body":{"modules/CoreModule.html":{}}}],["constructor(actions",{"_index":326,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["constructor(consentsstore",{"_index":166,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["constructor(http",{"_index":444,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["constructor(payload",{"_index":528,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["constructor(private",{"_index":252,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["constructor(public",{"_index":539,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["constructor(spinnerstore",{"_index":718,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["container",{"_index":320,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{}}}],["containers/consents.component",{"_index":421,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{}}}],["containers/give",{"_index":632,"title":{},"body":{"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{}}}],["containers/main.component",{"_index":678,"title":{},"body":{"modules/MainModule.html":{},"modules/MainRoutingModule.html":{}}}],["containers/spinner.component",{"_index":789,"title":{},"body":{"modules/SpinnerModule.html":{}}}],["containers/toolbar.component",{"_index":823,"title":{},"body":{"modules/ToolbarModule.html":{}}}],["content",{"_index":100,"title":{},"body":{"classes/AppPage.html":{}}}],["context",{"_index":862,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["contribute",{"_index":481,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["control.value.checked",{"_index":595,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["convert",{"_index":340,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["core",{"_index":422,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{}}}],["core/classes/unsubscriber",{"_index":245,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["core/core.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["core/enums/enums",{"_index":581,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["core/interceptors/spinner.interceptor",{"_index":516,"title":{},"body":{"modules/CoreModule.html":{}}}],["core/services/consents.service",{"_index":394,"title":{},"body":{"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["core/store",{"_index":249,"title":{},"body":{"components/ConsentsComponent.html":{},"modules/ConsentsModule.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{}}}],["coremodule",{"_index":61,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["count",{"_index":365,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{}}}],["countrequests",{"_index":768,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["coverage",{"_index":835,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":538,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["createfeatureselector",{"_index":432,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"interfaces/SpinnerModuleStore.html":{}}}],["createfeatureselector('consents",{"_index":439,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"miscellaneous/variables.html":{}}}],["createfeatureselector('spinner",{"_index":798,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{},"miscellaneous/variables.html":{}}}],["createnewconsent",{"_index":325,"title":{"classes/CreateNewConsent.html":{}},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["createnewconsent(consent",{"_index":448,"title":{},"body":{"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{}}}],["createselector",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(getconsentsstate",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(getspinnerselector",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctrl.value.label",{"_index":605,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["cursor",{"_index":285,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["data",{"_index":186,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsState.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"classes/MockStore.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":147,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["debouncetime",{"_index":729,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["debouncetime(500",{"_index":731,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["declarations",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["declare",{"_index":692,"title":{},"body":{"interfaces/MockPrivate.html":{}}}],["decoration",{"_index":664,"title":{},"body":{"components/MainComponent.html":{}}}],["decorators",{"_index":226,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{}}}],["deep",{"_index":314,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["default",{"_index":196,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":91,"title":{},"body":{"classes/AppPage.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"components/ToolbarComponent.html":{},"classes/Unsubscriber.html":{}}}],["delay",{"_index":388,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["delay(500",{"_index":350,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["delete",{"_index":279,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["dependencies",{"_index":51,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":179,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["destroy",{"_index":153,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["dev",{"_index":911,"title":{},"body":{"index.html":{}}}],["development",{"_index":908,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["didomi",{"_index":655,"title":{},"body":{"components/MainComponent.html":{}}}],["didomichallenge",{"_index":902,"title":{},"body":{"index.html":{}}}],["directive",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["directives",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":923,"title":{},"body":{"index.html":{}}}],["directory",{"_index":928,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":613,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["dispatch",{"_index":399,"title":{},"body":{"injectables/ConsentsEffect.html":{},"classes/MockStore.html":{}}}],["dispatch(action",{"_index":700,"title":{},"body":{"classes/MockStore.html":{}}}],["display",{"_index":302,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["displayedcolumns",{"_index":148,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["dist",{"_index":927,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":811,"title":{},"body":{"components/ToolbarComponent.html":{},"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["dynamic",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":940,"title":{},"body":{"index.html":{}}}],["e2e/src/app.po.ts",{"_index":86,"title":{},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["e2e/src/app.po.ts:4",{"_index":95,"title":{},"body":{"classes/AppPage.html":{}}}],["e2e/src/app.po.ts:8",{"_index":92,"title":{},"body":{"classes/AppPage.html":{}}}],["ease",{"_index":750,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["easily",{"_index":830,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["effect",{"_index":375,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["effect({dispatch",{"_index":356,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["effects",{"_index":419,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["effectsmodule",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["effectsmodule.forfeature(effects",{"_index":425,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["effectsmodule.forroot",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["element",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["element(by.css('app",{"_index":99,"title":{},"body":{"classes/AppPage.html":{}}}],["element.consentsgivenfor",{"_index":278,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["element.email",{"_index":276,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["element.name",{"_index":275,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["email",{"_index":118,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsServiceMock.html":{},"components/GiveConsentComponent.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":289,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["end",{"_index":939,"title":{},"body":{"index.html":{}}}],["enter",{"_index":602,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["entity",{"_index":205,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["enum",{"_index":532,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{}}}],["enumerations",{"_index":892,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":455,"title":{},"body":{"injectables/ConsentsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.apiurl}/consents/${id",{"_index":465,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["environments/environment",{"_index":456,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["error",{"_index":490,"title":{},"body":{"interfaces/ConsentsState.html":{},"miscellaneous/variables.html":{}}}],["error('coremodule",{"_index":522,"title":{},"body":{"modules/CoreModule.html":{}}}],["es",{"_index":244,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/GiveConsentComponent.html":{},"dependencies.html":{}}}],["event",{"_index":204,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["event.pageindex",{"_index":265,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["event.shouldactivate",{"_index":735,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["examples",{"_index":919,"title":{},"body":{"index.html":{}}}],["execute",{"_index":936,"title":{},"body":{"index.html":{}}}],["export",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{}}}],["exports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["extends",{"_index":124,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["fadein",{"_index":748,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["failed",{"_index":537,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["false",{"_index":357,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsState.html":{},"components/GiveConsentComponent.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/variables.html":{}}}],["fb",{"_index":550,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["field",{"_index":627,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{}}}],["files",{"_index":915,"title":{},"body":{"index.html":{}}}],["filter",{"_index":391,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["finalize",{"_index":776,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["fixed",{"_index":743,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["flag",{"_index":930,"title":{},"body":{"index.html":{}}}],["flexlayoutmodule",{"_index":410,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/ToolbarModule.html":{}}}],["fn",{"_index":566,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["font",{"_index":308,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["form",{"_index":560,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["formarray",{"_index":576,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["formarray.controls",{"_index":593,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["formbuilder",{"_index":551,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["formgroup",{"_index":574,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["fromconsents",{"_index":433,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{}}}],["fromconsents.consentsstate",{"_index":430,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{}}}],["fromconsents.initialstate",{"_index":436,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"miscellaneous/variables.html":{}}}],["fromconsents.reducer",{"_index":437,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"miscellaneous/variables.html":{}}}],["fromconsentsstore",{"_index":248,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["fromconsentsstore.createnewconsent(this.consentform.value",{"_index":584,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["fromconsentsstore.loadconsents",{"_index":271,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["fromconsentsstore.removeconsent",{"_index":269,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["fromfeature.getspinnermodulestore",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fromfeature.spinnermodulestore",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fromspinner",{"_index":794,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{}}}],["fromspinner.isvisibleonmoduleloading",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fromspinner.reducer",{"_index":796,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{},"miscellaneous/variables.html":{}}}],["fromspinner.spinnerstate",{"_index":793,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{}}}],["fromspinnerstore",{"_index":727,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["fromspinnerstore.hideaftermoduleloaded",{"_index":738,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["fromspinnerstore.showonmoduleloading",{"_index":737,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["full",{"_index":460,"title":{},"body":{"injectables/ConsentsService.html":{},"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":492,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{},"coverage.html":{}}}],["functions",{"_index":897,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":941,"title":{},"body":{"index.html":{}}}],["generate",{"_index":335,"title":{},"body":{"injectables/ConsentsEffect.html":{},"index.html":{}}}],["generated",{"_index":904,"title":{},"body":{"index.html":{}}}],["getconsents",{"_index":443,"title":{},"body":{"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getconsents(params",{"_index":451,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["getconsentsmodulestore",{"_index":438,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getconsentsstate",{"_index":847,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getconsentstotalcount",{"_index":505,"title":{},"body":{"interfaces/ConsentsState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getisconsentsloading",{"_index":507,"title":{},"body":{"interfaces/ConsentsState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getpages",{"_index":232,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["getspinnermodulestore",{"_index":797,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getspinnerselector",{"_index":853,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getting",{"_index":900,"title":{"index.html":{}},"body":{}}],["gettitletext",{"_index":89,"title":{},"body":{"classes/AppPage.html":{}}}],["give",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainRoutingModule.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["giveconsent",{"_index":547,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["giveconsentcomponent",{"_index":34,"title":{"components/GiveConsentComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["giveconsentform",{"_index":608,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["giveconsentmodule",{"_index":616,"title":{"modules/GiveConsentModule.html":{}},"body":{"modules/GiveConsentModule.html":{},"modules.html":{},"overview.html":{}}}],["giveconsentroutingmodule",{"_index":621,"title":{"modules/GiveConsentRoutingModule.html":{}},"body":{"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["given",{"_index":277,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["go",{"_index":944,"title":{},"body":{"index.html":{}}}],["gotopage",{"_index":154,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["gotopage(pageindex",{"_index":172,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["graph",{"_index":949,"title":{},"body":{"modules.html":{}}}],["gray",{"_index":299,"title":{},"body":{"components/ConsentsComponent.html":{},"components/ToolbarComponent.html":{}}}],["guardscheckend",{"_index":723,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["handles",{"_index":777,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["header",{"_index":315,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{}}}],["heading",{"_index":659,"title":{},"body":{"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["height",{"_index":290,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["help",{"_index":942,"title":{},"body":{"index.html":{}}}],["helps",{"_index":829,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["hidden",{"_index":301,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["hide",{"_index":642,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"miscellaneous/enumerations.html":{}}}],["hideaftermoduleloaded",{"_index":634,"title":{"classes/HideAfterModuleLoaded.html":{}},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["host",{"_index":312,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["html",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"index.html":{}}}],["http",{"_index":447,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["http://localhost:3000",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":912,"title":{},"body":{"index.html":{}}}],["http_interceptors",{"_index":514,"title":{},"body":{"modules/CoreModule.html":{}}}],["httpclient",{"_index":445,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["httpclientmodule",{"_index":515,"title":{},"body":{"modules/CoreModule.html":{}}}],["httphandler",{"_index":773,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["httpinterceptor",{"_index":775,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["httprequest",{"_index":772,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["httpresponse",{"_index":362,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{}}}],["icon",{"_index":284,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["id",{"_index":125,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["imitate",{"_index":346,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["implements",{"_index":141,"title":{},"body":{"components/ConsentsComponent.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{}}}],["import",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{}}}],["import('./modules/consents/consents.module').then(m",{"_index":681,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["import('./modules/give",{"_index":683,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["import('./projects/main/main.module').then(m",{"_index":111,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["important",{"_index":304,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{}}}],["index",{"_index":87,"title":{"index.html":{}},"body":{"classes/AppPage.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"interfaces/ConsentsModuleStore.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"classes/Unsubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":690,"title":{},"body":{"interfaces/MockPrivate.html":{}}}],["infinite",{"_index":760,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{}}}],["inherited",{"_index":134,"title":{},"body":{"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["initform",{"_index":548,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["initializedata",{"_index":156,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["initializedata(data",{"_index":182,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["initializing",{"_index":256,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["initialstate",{"_index":491,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initiate/create",{"_index":558,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["injectable",{"_index":321,"title":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{}},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interceptors/SpinnerInterceptor.html":{},"coverage.html":{}}}],["injectables",{"_index":323,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"overview.html":{}}}],["input",{"_index":810,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["inputs",{"_index":807,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["install",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["instanceof",{"_index":734,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["intercept",{"_index":769,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["intercept(request",{"_index":771,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["interceptor",{"_index":765,"title":{"interceptors/SpinnerInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":766,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["interface",{"_index":427,"title":{"interfaces/ConsentsModuleStore.html":{},"interfaces/ConsentsState.html":{},"interfaces/MockPrivate.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{}},"body":{"interfaces/ConsentsModuleStore.html":{},"interfaces/ConsentsState.html":{},"interfaces/MockPrivate.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"coverage.html":{}}}],["interfaces",{"_index":428,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"interfaces/ConsentsState.html":{},"interfaces/MockPrivate.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"overview.html":{}}}],["isconsentsloading",{"_index":149,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["isvisibleonmoduleloading",{"_index":801,"title":{},"body":{"interfaces/SpinnerState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isvisiblespinner",{"_index":717,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["item",{"_index":209,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["items",{"_index":189,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{}}}],["join",{"_index":393,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["join(lodashmap(lodashfilter(action.payload.consentsgivenfor",{"_index":342,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["json",{"_index":368,"title":{},"body":{"injectables/ConsentsEffect.html":{},"dependencies.html":{},"index.html":{}}}],["kainsp92@gmail.com",{"_index":475,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/variables.html":{}}}],["karma",{"_index":938,"title":{},"body":{"index.html":{}}}],["keyframes",{"_index":761,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["label",{"_index":129,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/GiveConsentComponent.html":{},"miscellaneous/variables.html":{}}}],["layout",{"_index":412,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/ToolbarModule.html":{},"dependencies.html":{}}}],["legend",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ConsentsComponent.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"components/SpinnerComponent.html":{},"modules/SpinnerModule.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["length",{"_index":235,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["light",{"_index":298,"title":{},"body":{"components/ConsentsComponent.html":{},"components/ToolbarComponent.html":{}}}],["line",{"_index":341,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["linear",{"_index":759,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["link",{"_index":662,"title":{},"body":{"components/MainComponent.html":{}}}],["list",{"_index":188,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["literal",{"_index":137,"title":{},"body":{"classes/ConsentWrite.html":{},"injectables/ConsentsService.html":{},"interfaces/ConsentsState.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/variables.html":{}}}],["load",{"_index":192,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["loadchildren",{"_index":110,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["loadconsents",{"_index":157,"title":{"classes/LoadConsents.html":{}},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadconsents(pageindex",{"_index":190,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["loadconsentsfailed",{"_index":536,"title":{"classes/LoadConsentsFailed.html":{}},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loadconsentssucceeded",{"_index":534,"title":{"classes/LoadConsentsSucceeded.html":{}},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loaded",{"_index":185,"title":{},"body":{"components/ConsentsComponent.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["loading",{"_index":274,"title":{},"body":{"components/ConsentsComponent.html":{},"interfaces/ConsentsState.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["lodash",{"_index":243,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/GiveConsentComponent.html":{},"dependencies.html":{}}}],["lodashfilter",{"_index":392,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["lodashmap",{"_index":390,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["m.consentsmodule",{"_index":682,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["m.giveconsentmodule",{"_index":685,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["m.mainmodule",{"_index":112,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["main",{"_index":193,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{}}}],["main'},{'name",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["main.component.html",{"_index":654,"title":{},"body":{"components/MainComponent.html":{}}}],["main.component.scss",{"_index":653,"title":{},"body":{"components/MainComponent.html":{}}}],["maincomponent",{"_index":37,"title":{"components/MainComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["mainmodule",{"_index":666,"title":{"modules/MainModule.html":{}},"body":{"modules/MainModule.html":{},"modules.html":{},"overview.html":{}}}],["mainroutingmodule",{"_index":670,"title":{"modules/MainRoutingModule.html":{}},"body":{"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["map",{"_index":351,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["map((res",{"_index":361,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["map(control",{"_index":594,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["margin",{"_index":753,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["mat",{"_index":187,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["matbuttonmodule",{"_index":415,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["matcheckboxmodule",{"_index":630,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["matching",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matdividermodule",{"_index":676,"title":{},"body":{"modules/MainModule.html":{}}}],["material",{"_index":423,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{}}}],["matformfieldmodule",{"_index":625,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["math.floor(math.random",{"_index":337,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["maticonmodule",{"_index":417,"title":{},"body":{"modules/ConsentsModule.html":{}}}],["matinputmodule",{"_index":628,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["matlistmodule",{"_index":674,"title":{},"body":{"modules/MainModule.html":{}}}],["matpaginator",{"_index":225,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["matpaginatormodule",{"_index":414,"title":{},"body":{"modules/ConsentsModule.html":{}}}],["matsidenavmodule",{"_index":672,"title":{},"body":{"modules/MainModule.html":{}}}],["mattabledatasource",{"_index":217,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["mattabledatasource(data",{"_index":273,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["mattablemodule",{"_index":413,"title":{},"body":{"modules/ConsentsModule.html":{}}}],["mattoolbarmodule",{"_index":821,"title":{},"body":{"modules/ToolbarModule.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["methods",{"_index":88,"title":{},"body":{"classes/AppPage.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"components/GiveConsentComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{}}}],["mincheckboxesselectedvalidator",{"_index":549,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["mincheckboxesselectedvalidator(minnumber",{"_index":563,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["minimum",{"_index":568,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["minnumber",{"_index":570,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["miscellaneous",{"_index":891,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mockprivate",{"_index":687,"title":{"interfaces/MockPrivate.html":{}},"body":{"interfaces/MockPrivate.html":{},"coverage.html":{}}}],["mockstore",{"_index":693,"title":{"classes/MockStore.html":{}},"body":{"classes/MockStore.html":{},"coverage.html":{}}}],["models",{"_index":246,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["module",{"_index":48,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"classes/HideAfterModuleLoaded.html":{},"modules/MainModule.html":{},"classes/ShowOnModuleLoading.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["modules",{"_index":50,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":943,"title":{},"body":{"index.html":{}}}],["multi",{"_index":518,"title":{},"body":{"modules/CoreModule.html":{}}}],["name",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"components/ToolbarComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["naming",{"_index":920,"title":{},"body":{"index.html":{}}}],["navigate",{"_index":352,"title":{},"body":{"injectables/ConsentsEffect.html":{},"index.html":{}}}],["navigateto",{"_index":90,"title":{},"body":{"classes/AppPage.html":{}}}],["navigationcancel",{"_index":724,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["navigationend",{"_index":725,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["navigationerror",{"_index":726,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["needed",{"_index":572,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["new",{"_index":230,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["newconsent",{"_index":334,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["newsletter",{"_index":477,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":597,"title":{},"body":{"components/GiveConsentComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["next.handle(clonedrequest",{"_index":784,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["ng",{"_index":313,"title":{},"body":{"components/ConsentsComponent.html":{},"index.html":{}}}],["ngmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/ConsentsModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{}}}],["ngondestroy",{"_index":161,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["ngoninit",{"_index":158,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{}}}],["ngrx/effects",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"dependencies.html":{}}}],["ngrx/entity",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"dependencies.html":{}}}],["none",{"_index":303,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{}}}],["npm",{"_index":884,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["null",{"_index":599,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["number",{"_index":126,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["number(res.headers.get('x",{"_index":372,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["numberof",{"_index":367,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["numbers",{"_index":178,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["object",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":450,"title":{},"body":{"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/MockStore.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["observe",{"_index":458,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["of([this.consent",{"_index":486,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["of(error",{"_index":355,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["of(new",{"_index":373,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["oftype",{"_index":385,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["oftype(consentsactions.consentsactiontypes.createnewconsent",{"_index":332,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["oftype(consentsactions.consentsactiontypes.loadconsents",{"_index":359,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["oftype(consentsactions.consentsactiontypes.removeconsent",{"_index":377,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["ondestroy",{"_index":825,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["one",{"_index":606,"title":{},"body":{"components/GiveConsentComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["oninit",{"_index":142,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{}}}],["onpagechange",{"_index":159,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["onpagechange(event",{"_index":200,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["opacity",{"_index":614,"title":{},"body":{"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{}}}],["optional",{"_index":170,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"components/SpinnerComponent.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"index.html":{},"overview.html":{}}}],["overrides",{"_index":311,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["overview",{"_index":950,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":474,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":865,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":317,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["page",{"_index":175,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{}}}],["pageevent",{"_index":201,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["pageindex",{"_index":180,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["pages",{"_index":164,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["pagesize",{"_index":150,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["paginator",{"_index":151,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["param",{"_index":263,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["parameters",{"_index":169,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":453,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["parentmodule",{"_index":520,"title":{},"body":{"modules/CoreModule.html":{}}}],["path",{"_index":109,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["pathmatch",{"_index":686,"title":{},"body":{"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":526,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["pipe",{"_index":345,"title":{},"body":{"injectables/ConsentsEffect.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["pipe(takeuntil(this.destroy",{"_index":260,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["please",{"_index":601,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["pointer",{"_index":286,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["position",{"_index":739,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["prev",{"_index":598,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["private",{"_index":155,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/GiveConsentComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{}}}],["private.type.ts",{"_index":689,"title":{},"body":{"interfaces/MockPrivate.html":{},"coverage.html":{}}}],["private.type.ts:1",{"_index":691,"title":{},"body":{"interfaces/MockPrivate.html":{}}}],["process",{"_index":780,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["prod",{"_index":929,"title":{},"body":{"index.html":{}}}],["production",{"_index":931,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":903,"title":{},"body":{"index.html":{}}}],["promise",{"_index":94,"title":{},"body":{"classes/AppPage.html":{}}}],["properties",{"_index":117,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"interfaces/ConsentsModuleStore.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"classes/Unsubscriber.html":{}}}],["protected",{"_index":152,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["protractor",{"_index":96,"title":{},"body":{"classes/AppPage.html":{},"index.html":{}}}],["provide",{"_index":461,"title":{},"body":{"injectables/ConsentsService.html":{},"modules/CoreModule.html":{}}}],["providers",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["public",{"_index":525,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["put",{"_index":184,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["radius",{"_index":756,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["raised",{"_index":611,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["random",{"_index":336,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["range",{"_index":242,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["range(this.paginator.getnumberofpages",{"_index":251,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["reactive",{"_index":559,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["reactiveformsmodule",{"_index":624,"title":{},"body":{"modules/GiveConsentModule.html":{}}}],["readme",{"_index":945,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":527,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{}}}],["recieive",{"_index":476,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["redirectto",{"_index":113,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["reduce((prev",{"_index":596,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["reducer",{"_index":845,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["reducer(state",{"_index":493,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/functions.html":{}}}],["reducers",{"_index":398,"title":{},"body":{"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/GiveConsentModule.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relative",{"_index":751,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["reload",{"_index":914,"title":{},"body":{"index.html":{}}}],["remove",{"_index":208,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["removeconsent",{"_index":160,"title":{"classes/RemoveConsent.html":{}},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["removeconsent(id",{"_index":206,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{}}}],["removeoffice",{"_index":468,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["removeoffice(id",{"_index":471,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["request",{"_index":347,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["request.clone",{"_index":783,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["requests",{"_index":778,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["require",{"_index":863,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":600,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["res.body",{"_index":370,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}],["response",{"_index":459,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["result",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":97,"title":{},"body":{"classes/AppPage.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"components/GiveConsentComponent.html":{},"classes/MockStore.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerState.html":{}}}],["returns",{"_index":93,"title":{},"body":{"classes/AppPage.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"components/GiveConsentComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{},"miscellaneous/functions.html":{}}}],["rgba($color",{"_index":305,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["right",{"_index":257,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["root",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{}}}],["root'},{'name",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["rotate(0deg",{"_index":763,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["rotate(360deg",{"_index":764,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["route",{"_index":105,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["router",{"_index":329,"title":{},"body":{"injectables/ConsentsEffect.html":{},"components/SpinnerComponent.html":{}}}],["routermodule",{"_index":104,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"modules/SpinnerModule.html":{}}}],["routermodule.forchild(routes",{"_index":441,"title":{},"body":{"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":114,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":108,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routing.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{}}}],["routing.module.ts",{"_index":103,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/ConsentsRoutingModule.html":{},"modules/GiveConsentRoutingModule.html":{},"modules/MainRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":909,"title":{},"body":{"index.html":{}}}],["running",{"_index":932,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":389,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"classes/MockStore.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":241,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["save",{"_index":556,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["scaffolding",{"_index":921,"title":{},"body":{"index.html":{}}}],["select",{"_index":239,"title":{},"body":{"components/ConsentsComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{}}}],["select(selector",{"_index":703,"title":{},"body":{"classes/MockStore.html":{}}}],["selector",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["send",{"_index":554,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["server",{"_index":349,"title":{},"body":{"injectables/ConsentsEffect.html":{},"dependencies.html":{},"index.html":{}}}],["setstate",{"_index":696,"title":{},"body":{"classes/MockStore.html":{}}}],["setstate(data",{"_index":706,"title":{},"body":{"classes/MockStore.html":{}}}],["share",{"_index":424,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["share/models/consent.model",{"_index":247,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{}}}],["share/modules/spinner/spinner.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["share/modules/spinner/store",{"_index":728,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{}}}],["share/modules/toolbar/toolbar.module",{"_index":420,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["show",{"_index":641,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"interceptors/SpinnerInterceptor.html":{},"miscellaneous/enumerations.html":{}}}],["shown",{"_index":478,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["showonmoduleloading",{"_index":639,"title":{"classes/ShowOnModuleLoading.html":{}},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["sidebar",{"_index":661,"title":{},"body":{"components/MainComponent.html":{}}}],["sidenav",{"_index":658,"title":{},"body":{"components/MainComponent.html":{}}}],["size",{"_index":195,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["skipself",{"_index":513,"title":{},"body":{"modules/CoreModule.html":{}}}],["slava",{"_index":473,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/variables.html":{}}}],["solid",{"_index":297,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"modules/AppRoutingModule.html":{},"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"interfaces/ConsentsModuleStore.html":{},"modules/ConsentsRoutingModule.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"components/MainComponent.html":{},"modules/MainModule.html":{},"modules/MainRoutingModule.html":{},"interfaces/MockPrivate.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"modules/SpinnerModule.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"classes/Unsubscriber.html":{},"index.html":{}}}],["span')).gettext",{"_index":101,"title":{},"body":{"classes/AppPage.html":{}}}],["spec\\.ts",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specific",{"_index":366,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["spin",{"_index":757,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["spinner",{"_index":640,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerModuleStore.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["spinner'},{'name",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["spinner.component.html",{"_index":716,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["spinner.component.scss",{"_index":715,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["spinner.reducer",{"_index":795,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{}}}],["spinneractions",{"_index":645,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/typealiases.html":{}}}],["spinneractiontypes",{"_index":638,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/enumerations.html":{}}}],["spinneractiontypes.hideaftermoduleloaded",{"_index":636,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"interfaces/SpinnerState.html":{}}}],["spinneractiontypes.showonmoduleloading",{"_index":643,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"interfaces/SpinnerState.html":{}}}],["spinnercomponent",{"_index":39,"title":{"components/SpinnerComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"modules/SpinnerModule.html":{},"components/ToolbarComponent.html":{},"coverage.html":{},"overview.html":{}}}],["spinnerinterceptor",{"_index":511,"title":{"interceptors/SpinnerInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"interceptors/SpinnerInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["spinnermodule",{"_index":62,"title":{"modules/SpinnerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SpinnerModule.html":{},"modules.html":{},"overview.html":{}}}],["spinnermodulestore",{"_index":791,"title":{"interfaces/SpinnerModuleStore.html":{}},"body":{"interfaces/SpinnerModuleStore.html":{},"coverage.html":{}}}],["spinnerstate",{"_index":799,"title":{"interfaces/SpinnerState.html":{}},"body":{"interfaces/SpinnerState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["spinnerstore",{"_index":720,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["src/.../app",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../consent.mock.ts",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../consents",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../consents.actions.ts",{"_index":893,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../consents.reducer.ts",{"_index":898,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../consents.selector.ts",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../enums.ts",{"_index":894,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../environment.prod.ts",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../give",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../spinner.action.ts",{"_index":895,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../spinner.reducer.ts",{"_index":899,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../spinner.selectors.ts",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":102,"title":{},"body":{"modules/AppRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/common/core/classes/unsubscriber.ts",{"_index":824,"title":{},"body":{"classes/Unsubscriber.html":{},"coverage.html":{}}}],["src/app/common/core/classes/unsubscriber.ts:13",{"_index":828,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["src/app/common/core/classes/unsubscriber.ts:7",{"_index":826,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["src/app/common/core/classes/unsubscriber.ts:9",{"_index":827,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["src/app/common/core/core.module.ts",{"_index":512,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/app/common/core/enums/enums.ts",{"_index":896,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/common/core/interceptors/spinner.interceptor.ts",{"_index":767,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{},"coverage.html":{}}}],["src/app/common/core/interceptors/spinner.interceptor.ts:14",{"_index":770,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["src/app/common/core/interceptors/spinner.interceptor.ts:19",{"_index":774,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["src/app/common/core/services/consents.service.mock.ts",{"_index":467,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"coverage.html":{}}}],["src/app/common/core/services/consents.service.mock.ts:16",{"_index":470,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["src/app/common/core/services/consents.service.mock.ts:20",{"_index":469,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["src/app/common/core/services/consents.service.mock.ts:24",{"_index":472,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["src/app/common/core/services/consents.service.mock.ts:9",{"_index":485,"title":{},"body":{"injectables/ConsentsServiceMock.html":{}}}],["src/app/common/core/services/consents.service.ts",{"_index":442,"title":{},"body":{"injectables/ConsentsService.html":{},"coverage.html":{}}}],["src/app/common/core/services/consents.service.ts:11",{"_index":446,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["src/app/common/core/services/consents.service.ts:15",{"_index":452,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["src/app/common/core/services/consents.service.ts:20",{"_index":449,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["src/app/common/core/services/consents.service.ts:24",{"_index":454,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts",{"_index":524,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:15",{"_index":646,"title":{},"body":{"classes/LoadConsents.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:17",{"_index":647,"title":{},"body":{"classes/LoadConsents.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:21",{"_index":650,"title":{},"body":{"classes/LoadConsentsSucceeded.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:23",{"_index":651,"title":{},"body":{"classes/LoadConsentsSucceeded.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:27",{"_index":648,"title":{},"body":{"classes/LoadConsentsFailed.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:29",{"_index":649,"title":{},"body":{"classes/LoadConsentsFailed.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:33",{"_index":529,"title":{},"body":{"classes/CreateNewConsent.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:35",{"_index":530,"title":{},"body":{"classes/CreateNewConsent.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:39",{"_index":711,"title":{},"body":{"classes/RemoveConsent.html":{}}}],["src/app/common/core/store/actions/consents.actions.ts:41",{"_index":712,"title":{},"body":{"classes/RemoveConsent.html":{}}}],["src/app/common/core/store/effects/consents.effect.ts",{"_index":324,"title":{},"body":{"injectables/ConsentsEffect.html":{},"coverage.html":{}}}],["src/app/common/core/store/effects/consents.effect.ts:18",{"_index":330,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["src/app/common/core/store/effects/consents.effect.ts:27",{"_index":376,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["src/app/common/core/store/effects/consents.effect.ts:43",{"_index":358,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["src/app/common/core/store/effects/consents.effect.ts:69",{"_index":383,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["src/app/common/core/store/effects/index.ts",{"_index":843,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/core/store/reducers/consents.reducer.ts",{"_index":488,"title":{},"body":{"interfaces/ConsentsState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/core/store/reducers/index.ts",{"_index":429,"title":{},"body":{"interfaces/ConsentsModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/core/store/selectors/consents.selector.ts",{"_index":846,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/share/mocks/consent.mock.ts",{"_index":848,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/share/mocks/mock",{"_index":688,"title":{},"body":{"interfaces/MockPrivate.html":{},"coverage.html":{}}}],["src/app/common/share/models/consent.model.ts",{"_index":116,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"coverage.html":{}}}],["src/app/common/share/models/consent.model.ts:12",{"_index":138,"title":{},"body":{"classes/ConsentWrite.html":{}}}],["src/app/common/share/models/consent.model.ts:2",{"_index":122,"title":{},"body":{"classes/Consent.html":{}}}],["src/app/common/share/models/consent.model.ts:3",{"_index":121,"title":{},"body":{"classes/Consent.html":{}}}],["src/app/common/share/models/consent.model.ts:7",{"_index":133,"title":{},"body":{"classes/ConsentRead.html":{}}}],["src/app/common/share/models/consent.model.ts:8",{"_index":132,"title":{},"body":{"classes/ConsentRead.html":{}}}],["src/app/common/share/modules/spinner/containers/spinner.component.ts",{"_index":714,"title":{},"body":{"components/SpinnerComponent.html":{},"coverage.html":{}}}],["src/app/common/share/modules/spinner/containers/spinner.component.ts:17",{"_index":719,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["src/app/common/share/modules/spinner/containers/spinner.component.ts:24",{"_index":721,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["src/app/common/share/modules/spinner/spinner.module.ts",{"_index":788,"title":{},"body":{"modules/SpinnerModule.html":{}}}],["src/app/common/share/modules/spinner/store/actions/spinner.action.ts",{"_index":635,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/common/share/modules/spinner/store/actions/spinner.action.ts:13",{"_index":637,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{}}}],["src/app/common/share/modules/spinner/store/actions/spinner.action.ts:9",{"_index":713,"title":{},"body":{"classes/ShowOnModuleLoading.html":{}}}],["src/app/common/share/modules/spinner/store/reducers/index.ts",{"_index":792,"title":{},"body":{"interfaces/SpinnerModuleStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts",{"_index":800,"title":{},"body":{"interfaces/SpinnerState.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/share/modules/spinner/store/selectors/spinner.selectors.ts",{"_index":852,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/common/share/modules/toolbar/containers/toolbar.component.ts",{"_index":804,"title":{},"body":{"components/ToolbarComponent.html":{},"coverage.html":{}}}],["src/app/common/share/modules/toolbar/containers/toolbar.component.ts:9",{"_index":809,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["src/app/common/share/modules/toolbar/toolbar.module.ts",{"_index":820,"title":{},"body":{"modules/ToolbarModule.html":{}}}],["src/app/common/share/testing/mock",{"_index":694,"title":{},"body":{"classes/MockStore.html":{},"coverage.html":{}}}],["src/app/projects/main/containers/main.component.ts",{"_index":652,"title":{},"body":{"components/MainComponent.html":{},"coverage.html":{}}}],["src/app/projects/main/main",{"_index":679,"title":{},"body":{"modules/MainRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/projects/main/main.module.ts",{"_index":671,"title":{},"body":{"modules/MainModule.html":{}}}],["src/app/projects/main/modules/consents/consents",{"_index":440,"title":{},"body":{"modules/ConsentsRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/projects/main/modules/consents/consents.module.ts",{"_index":407,"title":{},"body":{"modules/ConsentsModule.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts",{"_index":139,"title":{},"body":{"components/ConsentsComponent.html":{},"coverage.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:23",{"_index":214,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:24",{"_index":216,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:25",{"_index":222,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:27",{"_index":220,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:28",{"_index":218,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:29",{"_index":224,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:31",{"_index":228,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:36",{"_index":233,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:38",{"_index":168,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:44",{"_index":199,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:61",{"_index":202,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:70",{"_index":173,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:81",{"_index":207,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:89",{"_index":191,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/consents/containers/consents.component.ts:97",{"_index":183,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["src/app/projects/main/modules/give",{"_index":541,"title":{},"body":{"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"modules/GiveConsentRoutingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/assets/styles/variables.scss",{"_index":280,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["src/environments/environment.prod.ts",{"_index":859,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":860,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.ts",{"_index":861,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":910,"title":{},"body":{"index.html":{}}}],["start:server",{"_index":916,"title":{},"body":{"index.html":{}}}],["started",{"_index":901,"title":{"index.html":{}},"body":{}}],["state",{"_index":498,"title":{},"body":{"interfaces/ConsentsState.html":{},"classes/MockStore.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state.consents",{"_index":503,"title":{},"body":{"interfaces/ConsentsState.html":{},"miscellaneous/variables.html":{}}}],["state.consents.data",{"_index":504,"title":{},"body":{"interfaces/ConsentsState.html":{},"miscellaneous/variables.html":{}}}],["state.consents.loading",{"_index":508,"title":{},"body":{"interfaces/ConsentsState.html":{},"miscellaneous/variables.html":{}}}],["state.consents.totalcount",{"_index":506,"title":{},"body":{"interfaces/ConsentsState.html":{},"miscellaneous/variables.html":{}}}],["state.isvisibleonmoduleloading",{"_index":803,"title":{},"body":{"interfaces/SpinnerState.html":{},"miscellaneous/variables.html":{}}}],["state.spinner",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":484,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["still",{"_index":779,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["store",{"_index":167,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"modules/ConsentsModule.html":{},"components/GiveConsentComponent.html":{},"modules/GiveConsentModule.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["store.ts",{"_index":695,"title":{},"body":{"classes/MockStore.html":{},"coverage.html":{}}}],["store.ts:10",{"_index":704,"title":{},"body":{"classes/MockStore.html":{}}}],["store.ts:14",{"_index":702,"title":{},"body":{"classes/MockStore.html":{}}}],["store.ts:18",{"_index":701,"title":{},"body":{"classes/MockStore.html":{}}}],["store.ts:4",{"_index":699,"title":{},"body":{"classes/MockStore.html":{}}}],["store.ts:6",{"_index":708,"title":{},"body":{"classes/MockStore.html":{}}}],["stored",{"_index":926,"title":{},"body":{"index.html":{}}}],["storemodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/SpinnerModule.html":{}}}],["storemodule.forfeature('consents",{"_index":426,"title":{},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{}}}],["storemodule.forfeature('spinner",{"_index":790,"title":{},"body":{"modules/SpinnerModule.html":{}}}],["storemodule.forroot",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["string",{"_index":120,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"interfaces/MockPrivate.html":{},"components/ToolbarComponent.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["styleurls",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["styling",{"_index":918,"title":{},"body":{"index.html":{}}}],["subject",{"_index":229,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["subscribe((data",{"_index":261,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["subscribe((event",{"_index":733,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["subscription",{"_index":255,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["succeeded",{"_index":535,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["super",{"_index":253,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["support",{"_index":946,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":947,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":494,"title":{},"body":{"interfaces/ConsentsState.html":{},"interfaces/SpinnerState.html":{}}}],["switchmap",{"_index":386,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["switchmap((action",{"_index":378,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["switchmap(action",{"_index":333,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["t",{"_index":707,"title":{},"body":{"classes/MockStore.html":{}}}],["table",{"_index":176,"title":{},"body":{"components/ConsentsComponent.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":864,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":240,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["takeuntil(this.destroy",{"_index":732,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["targeted",{"_index":479,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["team",{"_index":533,"title":{},"body":{"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/enumerations.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["templateurl",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["test",{"_index":935,"title":{},"body":{"index.html":{}}}],["tests",{"_index":934,"title":{},"body":{"index.html":{}}}],["text",{"_index":663,"title":{},"body":{"components/MainComponent.html":{}}}],["this.actions$.pipe",{"_index":331,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.consentform",{"_index":585,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.consentform.valid",{"_index":583,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.consents",{"_index":259,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.consentsservice.createnewconsent(newconsent",{"_index":344,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.consentsservice.getconsents(action.payload",{"_index":360,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.consentsservice.removeconsent(action.payload.id",{"_index":379,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.consentsstore.dispatch(new",{"_index":268,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["this.consentsstore.pipe(select(fromconsentsstore.getconsents",{"_index":213,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.consentsstore.pipe(select(fromconsentsstore.getconsentstotalcount",{"_index":215,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.consentsstore.pipe(select(fromconsentsstore.getisconsentsloading",{"_index":221,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.countrequests",{"_index":781,"title":{},"body":{"interceptors/SpinnerInterceptor.html":{}}}],["this.datasource",{"_index":272,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.destroy$.complete",{"_index":834,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["this.destroy$.next",{"_index":833,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["this.fb.array(values(consentsgivenforoptions).map(item",{"_index":589,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.fb.group",{"_index":586,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.http.get(`${environment.apiurl}/consents?_page=${params.pageindex}&_limit=${params.pagesize",{"_index":462,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["this.http.post(`${environment.apiurl}/consents",{"_index":463,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["this.http.request('delete",{"_index":464,"title":{},"body":{"injectables/ConsentsService.html":{}}}],["this.initform",{"_index":582,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.initializedata(data",{"_index":262,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.loadconsents",{"_index":254,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.loadconsents(event.pageindex",{"_index":266,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.loadconsents(pageindex",{"_index":267,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.mincheckboxesselectedvalidator(1",{"_index":590,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["this.pagesize",{"_index":270,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.paginator",{"_index":250,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.paginator.pageindex",{"_index":264,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["this.router.events",{"_index":730,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["this.router.navigate(['/consents",{"_index":353,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.spinnerstore.dispatch(new",{"_index":736,"title":{},"body":{"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{}}}],["this.spinnerstore.pipe(select(fromspinnerstore.isvisibleonmoduleloading",{"_index":722,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["this.state.asobservable",{"_index":710,"title":{},"body":{"classes/MockStore.html":{}}}],["this.state.next(data",{"_index":709,"title":{},"body":{"classes/MockStore.html":{}}}],["this.store.dispatch(new",{"_index":380,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["this.unsubscribeall",{"_index":832,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["throw",{"_index":521,"title":{},"body":{"modules/CoreModule.html":{}}}],["time",{"_index":348,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["title",{"_index":808,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["toolbar",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["toolbar.component.html",{"_index":806,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["toolbar.component.scss",{"_index":805,"title":{},"body":{"components/ToolbarComponent.html":{}}}],["toolbarcomponent",{"_index":41,"title":{"components/ToolbarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{},"modules/ToolbarModule.html":{},"coverage.html":{},"overview.html":{}}}],["toolbarmodule",{"_index":406,"title":{"modules/ToolbarModule.html":{}},"body":{"modules/ConsentsModule.html":{},"modules/GiveConsentModule.html":{},"modules/ToolbarModule.html":{},"modules.html":{},"overview.html":{}}}],["top",{"_index":741,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["total",{"_index":364,"title":{},"body":{"injectables/ConsentsEffect.html":{},"injectables/ConsentsService.html":{}}}],["totalcount",{"_index":371,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/RemoveConsent.html":{},"miscellaneous/variables.html":{}}}],["totalselected",{"_index":592,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["transform",{"_index":762,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["true",{"_index":343,"title":{},"body":{"injectables/ConsentsEffect.html":{},"interfaces/ConsentsState.html":{},"modules/CoreModule.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"interfaces/SpinnerState.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":119,"title":{},"body":{"classes/Consent.html":{},"classes/ConsentRead.html":{},"classes/ConsentWrite.html":{},"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"interfaces/ConsentsModuleStore.html":{},"injectables/ConsentsService.html":{},"injectables/ConsentsServiceMock.html":{},"interfaces/ConsentsState.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"interfaces/SpinnerModuleStore.html":{},"interfaces/SpinnerState.html":{},"components/ToolbarComponent.html":{},"classes/Unsubscriber.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":955,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":644,"title":{},"body":{"classes/HideAfterModuleLoaded.html":{},"classes/ShowOnModuleLoading.html":{}}}],["unique",{"_index":210,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["unit",{"_index":933,"title":{},"body":{"index.html":{}}}],["unsibscribe",{"_index":831,"title":{},"body":{"classes/Unsubscriber.html":{}}}],["unsubscribeall",{"_index":162,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["unsubscriber",{"_index":140,"title":{"classes/Unsubscriber.html":{}},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{},"coverage.html":{}}}],["unsubscriber:13",{"_index":212,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["unsubscriber:7",{"_index":231,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["unsubscriber:9",{"_index":211,"title":{},"body":{"components/ConsentsComponent.html":{},"components/SpinnerComponent.html":{}}}],["use",{"_index":922,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":517,"title":{},"body":{"modules/CoreModule.html":{}}}],["user",{"_index":562,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["using",{"_index":177,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{}}}],["valid",{"_index":603,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validation",{"_index":565,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validator",{"_index":591,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validatorfn",{"_index":577,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validators",{"_index":575,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validators.email",{"_index":588,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["validators.required",{"_index":587,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["value",{"_index":197,"title":{},"body":{"components/ConsentsComponent.html":{},"injectables/ConsentsEffect.html":{},"injectables/ConsentsServiceMock.html":{},"classes/CreateNewConsent.html":{},"components/GiveConsentComponent.html":{},"classes/HideAfterModuleLoaded.html":{},"classes/LoadConsents.html":{},"classes/LoadConsentsFailed.html":{},"classes/LoadConsentsSucceeded.html":{},"classes/MockStore.html":{},"classes/RemoveConsent.html":{},"classes/ShowOnModuleLoading.html":{},"components/SpinnerComponent.html":{},"interceptors/SpinnerInterceptor.html":{},"classes/Unsubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":579,"title":{},"body":{"components/GiveConsentComponent.html":{}}}],["var",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/MainComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["variable",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":957,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":907,"title":{},"body":{"index.html":{}}}],["via",{"_index":937,"title":{},"body":{"index.html":{}}}],["viewchild",{"_index":236,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["viewchild(matpaginator",{"_index":227,"title":{},"body":{"components/ConsentsComponent.html":{}}}],["visit",{"_index":483,"title":{},"body":{"injectables/ConsentsServiceMock.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":181,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"classes/MockStore.html":{},"components/SpinnerComponent.html":{},"classes/Unsubscriber.html":{}}}],["weight",{"_index":309,"title":{},"body":{"components/ConsentsComponent.html":{},"components/MainComponent.html":{},"components/ToolbarComponent.html":{}}}],["white",{"_index":293,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{},"components/ToolbarComponent.html":{}}}],["width",{"_index":282,"title":{},"body":{"components/ConsentsComponent.html":{},"components/GiveConsentComponent.html":{},"components/SpinnerComponent.html":{}}}],["wrapper",{"_index":742,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["x",{"_index":363,"title":{},"body":{"injectables/ConsentsEffect.html":{}}}],["yes",{"_index":705,"title":{},"body":{"classes/MockStore.html":{}}}],["z",{"_index":744,"title":{},"body":{"components/SpinnerComponent.html":{}}}],["zone.js",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/ConsentsModule.html":{},"modules/CoreModule.html":{},"modules/GiveConsentModule.html":{},"modules/MainModule.html":{},"modules/SpinnerModule.html":{},"modules/ToolbarModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent { }\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSpinnerModule\n\nSpinnerModule\n\nAppModule -->\n\nSpinnerModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            SpinnerModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\n\nimport { CoreModule } from '@core/core.module';\nimport { SpinnerModule } from '@share/modules/spinner/spinner.module';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    EffectsModule.forRoot([]),\n    StoreModule.forRoot({}, {}),\n    CoreModule,\n    SpinnerModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppPage.html":{"url":"classes/AppPage.html","title":"class - AppPage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            e2e/src/app.po.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTitleText\n                            \n                            \n                                navigateTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTitleText\n                        \n                        \n                    \n                \n            \n            \n                \ngetTitleText()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateTo\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateTo()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise {\n    return browser.get(browser.baseUrl) as Promise;\n  }\n\n  getTitleText(): Promise {\n    return element(by.css('app-root .content span')).getText() as Promise;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Route } from '@angular/router';\n\n\nconst routes: Route[] = [\n  {\n    path: '',\n    loadChildren: () => import('./projects/main/main.module').then(m => m.MainModule),\n  },\n  {path: '**', redirectTo: ''}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Consent.html":{"url":"classes/Consent.html","title":"class - Consent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Consent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/models/consent.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/models/consent.model.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/models/consent.model.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Consent {\n  name: string;\n  email: string;\n}\n\nexport class ConsentRead extends Consent {\n  id: number;\n  consentsGivenFor: string;\n}\n\nexport class ConsentWrite extends Consent {\n  consentsGivenFor: {label: string, checked: boolean}[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConsentRead.html":{"url":"classes/ConsentRead.html","title":"class - ConsentRead","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConsentRead\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/models/consent.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Consent\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consentsGivenFor\n                            \n                            \n                                id\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consentsGivenFor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/models/consent.model.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/models/consent.model.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Consent\n\n                                \n                            \n                        \n                            \n                                    Defined in         Consent:3\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Consent\n\n                                \n                            \n                        \n                            \n                                    Defined in         Consent:2\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Consent {\n  name: string;\n  email: string;\n}\n\nexport class ConsentRead extends Consent {\n  id: number;\n  consentsGivenFor: string;\n}\n\nexport class ConsentWrite extends Consent {\n  consentsGivenFor: {label: string, checked: boolean}[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConsentWrite.html":{"url":"classes/ConsentWrite.html","title":"class - ConsentWrite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConsentWrite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/models/consent.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Consent\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consentsGivenFor\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consentsGivenFor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/models/consent.model.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Consent\n\n                                \n                            \n                        \n                            \n                                    Defined in         Consent:3\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Consent\n\n                                \n                            \n                        \n                            \n                                    Defined in         Consent:2\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Consent {\n  name: string;\n  email: string;\n}\n\nexport class ConsentRead extends Consent {\n  id: number;\n  consentsGivenFor: string;\n}\n\nexport class ConsentWrite extends Consent {\n  consentsGivenFor: {label: string, checked: boolean}[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ConsentsComponent.html":{"url":"components/ConsentsComponent.html","title":"component - ConsentsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ConsentsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/projects/main/modules/consents/containers/consents.component.ts\n\n\n\n    \n        Extends\n    \n    \n                Unsubscriber\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-consents\n            \n\n            \n                styleUrls\n                ./consents.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./consents.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consents$\n                            \n                            \n                                consentsTotalCount$\n                            \n                            \n                                dataSource\n                            \n                            \n                                displayedColumns\n                            \n                            \n                                isConsentsLoading$\n                            \n                            \n                                pageSize\n                            \n                            \n                                paginator\n                            \n                            \n                                    Protected\n                                destroy$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goToPage\n                            \n                            \n                                    Private\n                                initializeData\n                            \n                            \n                                    Private\n                                loadConsents\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onPageChange\n                            \n                            \n                                removeConsent\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                unsubscribeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    pages\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(consentsStore: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        consentsStore\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            goToPage\n                        \n                        \n                    \n                \n            \n            \n                \ngoToPage(pageIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:70\n                \n            \n\n\n            \n                \n                    Change page of a table using page numbers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pageIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        page index\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initializeData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initializeData(data: Consent[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:97\n                \n            \n\n\n            \n                \n                    Put loaded data to Mat Table\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Consent[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        list of items\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            loadConsents\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadConsents(pageIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:89\n                \n            \n\n\n            \n                \n                    Load main data based on page index and page size\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    pageIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        page index\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onPageChange\n                        \n                        \n                    \n                \n            \n            \n                \nonPageChange(event: PageEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:61\n                \n            \n\n\n            \n                \n                    Change page of a table using arrows\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            PageEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Mat Paginator entity with data about page\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeConsent\n                        \n                        \n                    \n                \n            \n            \n                \nremoveConsent(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:81\n                \n            \n\n\n            \n                \n                    Remove item from list\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        unique item id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         Unsubscriber\n\n                \n            \n            \n                \n                        Defined in         Unsubscriber:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Inherited from         Unsubscriber\n\n                \n            \n            \n                \n                        Defined in         Unsubscriber:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consents$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.consentsStore.pipe(select(fromConsentsStore.getConsents))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consentsTotalCount$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.consentsStore.pipe(select(fromConsentsStore.getConsentsTotalCount))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataSource\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MatTableDataSource\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayedColumns\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : ['name', 'email', 'consentsGivenFor', 'action']\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isConsentsLoading$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.consentsStore.pipe(select(fromConsentsStore.getIsConsentsLoading))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pageSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 2\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            paginator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatPaginator\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(MatPaginator)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            destroy$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         Unsubscriber\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unsubscriber:7\n\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        pages\n                    \n                \n\n                \n                    \n                        getpages()\n                    \n                \n                            \n                                \n                                    Defined in src/app/projects/main/modules/consents/containers/consents.component.ts:36\n                                \n                            \n                    \n                        \n                                Get list of available pages based on data length\n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, ViewChild, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\n\nimport { Store, select } from '@ngrx/store';\nimport { takeUntil } from 'rxjs/operators';\nimport { range } from 'lodash-es';\n\nimport { Unsubscriber } from '@core/classes/unsubscriber';\n\n// models\nimport { Consent } from '@share/models/consent.model';\n\n// store\nimport * as fromConsentsStore from '@core/store';\n\n@Component({\n  selector: 'app-consents',\n  templateUrl: './consents.component.html',\n  styleUrls: ['./consents.component.scss'],\n})\nexport class ConsentsComponent extends Unsubscriber implements OnInit {\n  consents$ = this.consentsStore.pipe(select(fromConsentsStore.getConsents));\n  consentsTotalCount$ = this.consentsStore.pipe(select(fromConsentsStore.getConsentsTotalCount));\n  isConsentsLoading$ = this.consentsStore.pipe(select(fromConsentsStore.getIsConsentsLoading));\n\n  displayedColumns: string[] = ['name', 'email', 'consentsGivenFor', 'action'];\n  dataSource: MatTableDataSource;\n  pageSize = 2;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  /**\n   * Get list of available pages based on data length\n   */\n  get pages() {\n    return this.paginator ? range(this.paginator.getNumberOfPages()) : [];\n  }\n\n  constructor(private consentsStore: Store) {\n    super();\n  }\n\n  ngOnInit() {\n    this.loadConsents();\n\n    /**\n     * Subscription for data initializing right after data appeared in store\n     */\n    this.consents$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((data: Consent[]) => {\n        this.initializeData(data);\n      });\n  }\n\n  /**\n   * Change page of a table using arrows\n   * @param event Mat Paginator entity with data about page\n   */\n  onPageChange(event: PageEvent): void {\n    this.paginator.pageIndex = event.pageIndex;\n    this.loadConsents(event.pageIndex + 1);\n  }\n\n  /**\n   * Change page of a table using page numbers\n   * @param pageIndex page index\n   */\n  goToPage(pageIndex: number): void {\n    if (this.paginator && this.paginator.pageIndex !== pageIndex) {\n      this.paginator.pageIndex = pageIndex;\n      this.loadConsents(pageIndex + 1);\n    }\n  }\n\n  /**\n   * Remove item from list\n   * @param id unique item id\n   */\n  removeConsent(id: number): void {\n    this.consentsStore.dispatch(new fromConsentsStore.RemoveConsent({ id, pageSize: this.pageSize }));\n  }\n\n  /**\n   * Load main data based on page index and page size\n   * @param pageIndex page index\n   */\n  private loadConsents(pageIndex = 1): void {\n    this.consentsStore.dispatch(new fromConsentsStore.LoadConsents({ pageIndex, pageSize: this.pageSize }));\n  }\n\n  /**\n   * Put loaded data to Mat Table\n   * @param data list of items\n   */\n  private initializeData(data: Consent[]): void {\n    this.dataSource = new MatTableDataSource(data);\n  }\n}\n\n    \n\n    \n        \n\n\n\n  \n    \n    \n      \n        No Consents\n      \n      \n        Loading...  \n      \n    \n\n    \n    \n      \n        Name\n        {{element.name}}\n      \n    \n\n      \n        Email\n        {{element.email}}\n      \n    \n\n      \n        Consent given for\n        {{ element.consentsGivenFor }}\n      \n\n      \n        \n        \n          delete\n        \n      \n    \n      \n      \n    \n\n    \n    \n      \n      \n      \n        Pages: \n        \n          {{ page + 1 }}\n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./consents.component.scss\n                \n                @import \"src/assets/styles/variables.scss\";\n\n.consentsTable {\n  width: 100%;\n\n  .mat-icon {\n    cursor: pointer;\n    color: $color-blue;\n  }\n\n  &-empty {\n    height: 208px;\n    background-color: $color-white;\n    border-bottom: 1px solid $color-light-gray;\n  }\n}\n\n.consentsPagination--hidden {\n  display: none !important;\n}\n.consentsPagination-page {\n  cursor: pointer;\n  color: rgba($color-blue, .7);\n\n  &--active {\n    cursor: default;\n    color: $color-blue;\n    font-weight: 700;\n  }\n}\n\n// table overrides\n:host ::ng-deep {\n  .mat-header-cell,\n  .mat-paginator-range-label {\n    color: $color-blue;\n  }\n\n  .mat-cell {\n    padding: 0 5px;\n  }\n\n  .mat-paginator-container {\n    background-color: $color-white;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        No Consents                    Loading...                                  Name        {{element.name}}                        Email        {{element.email}}                        Consent given for        {{ element.consentsGivenFor }}                                      delete                                                                    Pages:                   {{ page + 1 }}                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ConsentsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsentsEffect.html":{"url":"injectables/ConsentsEffect.html","title":"injectable - ConsentsEffect","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConsentsEffect\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/effects/consents.effect.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createNewConsent$\n                            \n                            \n                                loadConsents$\n                            \n                            \n                                removeConsent$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(actions$: Actions, consentsService: ConsentsService, store: Store, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/effects/consents.effect.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        actions$\n                                                  \n                                                        \n                                                                    Actions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        consentsService\n                                                  \n                                                        \n                                                                        ConsentsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createNewConsent$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.CreateNewConsent),\n    switchMap(action => {\n      const newConsent = {\n        // generate random id\n        id: Math.floor(Math.random() * 100),\n        name: action.payload.name,\n        email: action.payload.email,\n        // convert checked consents to string line\n        consentsGivenFor: join(lodashMap(lodashFilter(action.payload.consentsGivenFor, ['checked', true]), 'label'), ', ')\n      };\n\n      return this.consentsService.createNewConsent(newConsent)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map(() => {\n            // navigate to list page\n            this.router.navigate(['/consents']);\n          }),\n          catchError(error => of(error))\n        );\n    })\n  )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect({dispatch: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/effects/consents.effect.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadConsents$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.LoadConsents),\n    switchMap(action =>\n      this.consentsService.getConsents(action.payload)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map((res: HttpResponse) =>\n          // 'x-total-count' - specific header to get total numberof items (json-server)\n            new consentsActions.LoadConsentsSucceeded({ consents: res.body, totalCount: Number(res.headers.get('x-total-count')) })),\n          catchError(error => of(new consentsActions.LoadConsentsFailed(error)))\n        )\n    )\n  )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/effects/consents.effect.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeConsent$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.RemoveConsent),\n    switchMap((action) => {\n      return this.consentsService.removeConsent(action.payload.id)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map(() => {\n            // load data after remove\n            this.store.dispatch(new consentsActions.LoadConsents({\n              pageIndex: 0,\n              pageSize: action.payload.pageSize\n            }));\n          }),\n          catchError(error => of(error))\n        );\n    })\n  )\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Effect({dispatch: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/effects/consents.effect.ts:69\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpResponse } from '@angular/common/http';\n\nimport { Store } from '@ngrx/store';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { map, switchMap, catchError, delay } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { map as lodashMap, filter as lodashFilter, join } from 'lodash-es';\n\nimport { ConsentsService } from '@core/services/consents.service';\nimport { ConsentRead } from '@share/models/consent.model';\n\nimport * as consentsActions from '../actions/consents.actions';\nimport { ConsentsModuleStore } from '../reducers';\n\n@Injectable()\nexport class ConsentsEffect {\n  constructor(\n    private actions$: Actions,\n    private consentsService: ConsentsService,\n    private store: Store,\n    private router: Router\n  ) { }\n\n  @Effect()\n  loadConsents$ = this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.LoadConsents),\n    switchMap(action =>\n      this.consentsService.getConsents(action.payload)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map((res: HttpResponse) =>\n          // 'x-total-count' - specific header to get total numberof items (json-server)\n            new consentsActions.LoadConsentsSucceeded({ consents: res.body, totalCount: Number(res.headers.get('x-total-count')) })),\n          catchError(error => of(new consentsActions.LoadConsentsFailed(error)))\n        )\n    )\n  );\n\n  @Effect({ dispatch: false })\n  createNewConsent$ = this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.CreateNewConsent),\n    switchMap(action => {\n      const newConsent = {\n        // generate random id\n        id: Math.floor(Math.random() * 100),\n        name: action.payload.name,\n        email: action.payload.email,\n        // convert checked consents to string line\n        consentsGivenFor: join(lodashMap(lodashFilter(action.payload.consentsGivenFor, ['checked', true]), 'label'), ', ')\n      };\n\n      return this.consentsService.createNewConsent(newConsent)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map(() => {\n            // navigate to list page\n            this.router.navigate(['/consents']);\n          }),\n          catchError(error => of(error))\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  removeConsent$ = this.actions$.pipe(\n    ofType(consentsActions.ConsentsActionTypes.RemoveConsent),\n    switchMap((action) => {\n      return this.consentsService.removeConsent(action.payload.id)\n        .pipe(\n          // imitate request time to server\n          delay(500),\n          map(() => {\n            // load data after remove\n            this.store.dispatch(new consentsActions.LoadConsents({\n              pageIndex: 0,\n              pageSize: action.payload.pageSize\n            }));\n          }),\n          catchError(error => of(error))\n        );\n    })\n  );\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConsentsModule.html":{"url":"modules/ConsentsModule.html","title":"module - ConsentsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConsentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConsentsModule\n\n\n\ncluster_ConsentsModule_declarations\n\n\n\ncluster_ConsentsModule_imports\n\n\n\ncluster_ConsentsModule_providers\n\n\n\n\nConsentsComponent\n\nConsentsComponent\n\n\n\nConsentsModule\n\nConsentsModule\n\nConsentsModule -->\n\nConsentsComponent->ConsentsModule\n\n\n\n\n\nConsentsRoutingModule\n\nConsentsRoutingModule\n\nConsentsModule -->\n\nConsentsRoutingModule->ConsentsModule\n\n\n\n\n\nToolbarModule\n\nToolbarModule\n\nConsentsModule -->\n\nToolbarModule->ConsentsModule\n\n\n\n\n\nConsentsService\n\nConsentsService\n\nConsentsModule -->\n\nConsentsService->ConsentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/modules/consents/consents.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ConsentsComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ConsentsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConsentsRoutingModule\n                        \n                        \n                            ToolbarModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducers, effects } from '@core/store';\n\nimport { ConsentsService } from '@core/services/consents.service';\n\nimport { ToolbarModule } from '@share/modules/toolbar/toolbar.module';\n\nimport { ConsentsRoutingModule } from './consents-routing.module';\n\nimport { ConsentsComponent } from './containers/consents.component';\n\n@NgModule({\n  imports: [\n    // core\n    CommonModule,\n    FlexLayoutModule,\n    // material\n    MatTableModule,\n    MatPaginatorModule,\n    MatButtonModule,\n    MatIconModule,\n    // share\n    ToolbarModule,\n    // data\n    ConsentsRoutingModule,\n    // store\n    EffectsModule.forFeature(effects),\n    StoreModule.forFeature('consents', reducers)\n  ],\n  declarations: [\n    ConsentsComponent\n  ],\n  providers: [\n    ConsentsService\n  ]\n})\nexport class ConsentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConsentsModuleStore.html":{"url":"interfaces/ConsentsModuleStore.html","title":"interface - ConsentsModuleStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ConsentsModuleStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/reducers/index.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        consents\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        consents\n                                    \n                                \n                                \n                                    \n                                        consents:         fromConsents.ConsentsState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         fromConsents.ConsentsState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ActionReducerMap, createFeatureSelector } from '@ngrx/store';\n\nimport * as fromConsents from './consents.reducer';\n\nexport interface ConsentsModuleStore {\n  consents: fromConsents.ConsentsState;\n}\n\nexport const consentsModuleStoreInitialState: ConsentsModuleStore = {\n  consents: fromConsents.initialState\n};\n\nexport const reducers: ActionReducerMap = {\n  consents: fromConsents.reducer\n};\n\nexport const getConsentsModuleStore = createFeatureSelector('consents');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConsentsRoutingModule.html":{"url":"modules/ConsentsRoutingModule.html","title":"module - ConsentsRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    ConsentsRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/modules/consents/consents-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { ConsentsComponent } from './containers/consents.component';\n\nconst routes: Route[] = [\n  {\n    path: '',\n    component: ConsentsComponent,\n  },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ConsentsRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsentsService.html":{"url":"injectables/ConsentsService.html","title":"injectable - ConsentsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConsentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/services/consents.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createNewConsent\n                            \n                            \n                                getConsents\n                            \n                            \n                                removeConsent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/services/consents.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createNewConsent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateNewConsent(consent: ConsentRead)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consent\n                                    \n                                                ConsentRead\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getConsents\n                        \n                        \n                    \n                \n            \n            \n                \ngetConsents(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeConsent\n                        \n                        \n                    \n                \n            \n            \n                \nremoveConsent(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\nimport { environment } from '@environments/environment';\n\nimport { ConsentRead } from '@share/models/consent.model';\n\n@Injectable()\nexport class ConsentsService {\n  constructor(private http: HttpClient) { }\n\n  // added { observe: 'response' } to get full response which provide total count of items in the list\n  getConsents(params: { pageIndex: number, pageSize: number }): Observable> {\n    return this.http.get(`${environment.apiUrl}/consents?_page=${params.pageIndex}&_limit=${params.pageSize}`,\n      { observe: 'response' });\n  }\n\n  createNewConsent(consent: ConsentRead): Observable {\n    return this.http.post(`${environment.apiUrl}/consents`, consent);\n  }\n\n  removeConsent(id: number): Observable {\n    return this.http.request('DELETE', `${environment.apiUrl}/consents/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsentsServiceMock.html":{"url":"injectables/ConsentsServiceMock.html","title":"injectable - ConsentsServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConsentsServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/services/consents.service.mock.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createNewConsent\n                            \n                            \n                                getConsents\n                            \n                            \n                                removeOffice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createNewConsent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateNewConsent(consent: ConsentRead)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.mock.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consent\n                                    \n                                                ConsentRead\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getConsents\n                        \n                        \n                    \n                \n            \n            \n                \ngetConsents()\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.mock.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeOffice\n                        \n                        \n                    \n                \n            \n            \n                \nremoveOffice(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/services/consents.service.mock.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsentRead\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    id: 0,\n    name: 'Slava P',\n    email: 'kainsp92@gmail.com',\n    consentsGivenFor: 'Recieive newsletter, Be shown targeted ads, Contribute to anonymous visit statistics'\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/services/consents.service.mock.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { ConsentRead } from '@share/models/consent.model';\n\n@Injectable()\nexport class ConsentsServiceMock {\n  consent: ConsentRead = {\n    id: 0,\n    name: 'Slava P',\n    email: 'kainsp92@gmail.com',\n    consentsGivenFor: 'Recieive newsletter, Be shown targeted ads, Contribute to anonymous visit statistics'\n  };\n\n  getConsents(): Observable {\n    return of([this.consent]);\n  }\n\n  createNewConsent(consent: ConsentRead): Observable {\n    return of();\n  }\n\n  removeOffice(id: number): Observable {\n    return of();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConsentsState.html":{"url":"interfaces/ConsentsState.html","title":"interface - ConsentsState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ConsentsState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/reducers/consents.reducer.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        consents\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        consents\n                                    \n                                \n                                \n                                    \n                                        consents:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConsentsActions, ConsentsActionTypes } from '../actions/consents.actions';\n\nimport { ConsentRead } from '@share/models/consent.model';\n\nexport interface ConsentsState {\n  consents: {\n    data: ConsentRead[];\n    totalCount: number;\n    loaded: boolean;\n    loading: boolean;\n    error: boolean;\n  };\n}\n\nexport const initialState: ConsentsState = {\n  consents: {\n    data: [],\n    totalCount: 0,\n    loaded: false,\n    loading: false,\n    error: false\n  }\n};\n\nexport function reducer(state = initialState, action: ConsentsActions): ConsentsState {\n  switch (action.type) {\n    case ConsentsActionTypes.LoadConsents: {\n      return {\n        ...state,\n        consents: {\n          data: [],\n          totalCount: 0,\n          loading: true,\n          loaded: false,\n          error: false\n        }\n      };\n    }\n    case ConsentsActionTypes.LoadConsentsSucceeded: {\n      return {\n        ...state,\n        consents: {\n          data: action.payload.consents,\n          totalCount: action.payload.totalCount,\n          loading: false,\n          loaded: true,\n          error: false\n        }\n      };\n    }\n    case ConsentsActionTypes.LoadConsentsFailed: {\n      return {\n        ...state,\n        consents: {\n          ...state.consents,\n          loading: false,\n          loaded: true,\n          error: true\n        }\n      };\n    }\n    default:\n      return state;\n  }\n}\n\n// data\nexport const getConsents = (state: ConsentsState) => state.consents.data;\nexport const getConsentsTotalCount = (state: ConsentsState) => state.consents.totalCount;\n\n// state\nexport const getIsConsentsLoading = (state: ConsentsState) => state.consents.loading;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_providers\n\n\n\n\nSpinnerInterceptor\n\nSpinnerInterceptor\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nSpinnerInterceptor->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/common/core/core.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SpinnerInterceptor\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\n\nimport { SpinnerInterceptor } from '@core/interceptors/spinner.interceptor';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    HttpClientModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: SpinnerInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class CoreModule {\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    if (parentModule) {\n      throw new Error('CoreModule is already loaded. Import it in the AppModule only');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNewConsent.html":{"url":"classes/CreateNewConsent.html","title":"class - CreateNewConsent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNewConsent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/actions/consents.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: ConsentWrite)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/actions/consents.actions.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                        ConsentWrite\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsentWrite\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConsentsActionTypes.CreateNewConsent\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:33\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nimport { ConsentRead, ConsentWrite } from '@share/models/consent.model';\n\nexport enum ConsentsActionTypes {\n  LoadConsents = '[Consents List] Load Team',\n  LoadConsentsSucceeded = '[Consents List] Load Team Succeeded',\n  LoadConsentsFailed = '[Consents List] Load Team Failed',\n\n  CreateNewConsent = '[Give Consent] Create New Consent',\n  RemoveConsent = '[Give Consent] Remove Consent'\n}\n\nexport class LoadConsents implements Action {\n  readonly type = ConsentsActionTypes.LoadConsents;\n\n  constructor(public payload: { pageIndex: number, pageSize: number }) { }\n}\n\nexport class LoadConsentsSucceeded implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsSucceeded;\n\n  constructor(public payload: { consents: ConsentRead[], totalCount: number }) { }\n}\n\nexport class LoadConsentsFailed implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsFailed;\n\n  constructor(public payload: any) { }\n}\n\nexport class CreateNewConsent implements Action {\n  readonly type = ConsentsActionTypes.CreateNewConsent;\n\n  constructor(public payload: ConsentWrite) { }\n}\n\nexport class RemoveConsent implements Action {\n  readonly type = ConsentsActionTypes.RemoveConsent;\n\n  constructor(public payload: { id: number, pageSize: number }) { }\n}\n\nexport type ConsentsActions =\n  | LoadConsents\n  | LoadConsentsSucceeded\n  | LoadConsentsFailed\n  | CreateNewConsent\n  | RemoveConsent;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GiveConsentComponent.html":{"url":"components/GiveConsentComponent.html","title":"component - GiveConsentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GiveConsentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/projects/main/modules/give-consent/containers/give-consent.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-give-consent\n            \n\n            \n                styleUrls\n                ./give-consent.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./give-consent.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consentForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                giveConsent\n                            \n                            \n                                    Private\n                                initForm\n                            \n                            \n                                    Private\n                                minCheckboxesSelectedValidator\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(consentsStore: Store, fb: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        consentsStore\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            giveConsent\n                        \n                        \n                    \n                \n            \n            \n                \ngiveConsent()\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:30\n                \n            \n\n\n            \n                \n                    Send call using store to save consent\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initForm\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initForm()\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:39\n                \n            \n\n\n            \n                \n                    Initiate/create reactive form to collect user data\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            minCheckboxesSelectedValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    minCheckboxesSelectedValidator(minNumber: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:54\n                \n            \n\n\n            \n                \n                    Validation Fn to check if at least minimum number of checkboxes is checked\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    minNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        minimum amount of checkboxes needed to be checked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consentForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/projects/main/modules/give-consent/containers/give-consent.component.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormArray, ValidatorFn } from '@angular/forms';\n\nimport { Store } from '@ngrx/store';\nimport { values } from 'lodash-es';\n\nimport { ConsentsGivenForOptions } from '@core/enums/enums';\n\n// store\nimport * as fromConsentsStore from '@core/store';\n\n@Component({\n  selector: 'app-give-consent',\n  templateUrl: './give-consent.component.html',\n  styleUrls: ['./give-consent.component.scss'],\n})\nexport class GiveConsentComponent implements OnInit {\n  consentForm: FormGroup;\n\n  constructor(private consentsStore: Store,\n              private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.initForm();\n  }\n\n  /**\n   * Send call using store to save consent\n   */\n  giveConsent(): void {\n    if (this.consentForm.valid) {\n      this.consentsStore.dispatch(new fromConsentsStore.CreateNewConsent(this.consentForm.value));\n    }\n  }\n\n  /**\n   * Initiate/create reactive form to collect user data\n   */\n  private initForm(): void {\n    this.consentForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      consentsGivenFor: this.fb.array(values(ConsentsGivenForOptions).map(item => this.fb.group({\n        label: item,\n        checked: false\n      })), this.minCheckboxesSelectedValidator(1))\n    });\n  }\n\n  /**\n   * Validation Fn to check if at least minimum number of checkboxes is checked\n   * @param minNumber minimum amount of checkboxes needed to be checked\n   */\n  private minCheckboxesSelectedValidator(minNumber = 1) {\n    const validator: ValidatorFn = (formArray: FormArray) => {\n      const totalSelected = formArray.controls\n        .map(control => control.value.checked)\n        .reduce((prev, next) => next ? prev + next : prev, 0);\n\n      return totalSelected >= minNumber ? null : { required: true };\n    };\n\n    return validator;\n  }\n}\n\n    \n\n    \n        \n\n\n  \n    \n    \n      Name\n      \n      \n        Name is required\n      \n    \n\n    \n    \n      Email\n      \n      \n        Please enter a valid email address\n      \n      \n        Email is required\n      \n    \n\n    \n    \n      \n        {{ ctrl.value.label }}\n      \n    \n    \n      At least one checkbox required to be checked\n    \n\n    \n    \n      Give Consent\n    \n  \n\n\n    \n\n    \n                \n                    ./give-consent.component.scss\n                \n                @import \"src/assets/styles/variables.scss\";\n\n.giveConsentForm {\n  width: 50%;\n  padding: 20px;\n\n  .mat-raised-button {\n    color: $color-white;\n    background-color: $color-blue;\n\n    &[disabled] {\n      opacity: .3;\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                Name                    Name is required                        Email                    Please enter a valid email address                    Email is required                                {{ ctrl.value.label }}                    At least one checkbox required to be checked                  Give Consent      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GiveConsentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GiveConsentModule.html":{"url":"modules/GiveConsentModule.html","title":"module - GiveConsentModule","body":"\n                   \n\n\n\n\n    Modules\n    GiveConsentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GiveConsentModule\n\n\n\ncluster_GiveConsentModule_declarations\n\n\n\ncluster_GiveConsentModule_imports\n\n\n\ncluster_GiveConsentModule_providers\n\n\n\n\nGiveConsentComponent\n\nGiveConsentComponent\n\n\n\nGiveConsentModule\n\nGiveConsentModule\n\nGiveConsentModule -->\n\nGiveConsentComponent->GiveConsentModule\n\n\n\n\n\nGiveConsentRoutingModule\n\nGiveConsentRoutingModule\n\nGiveConsentModule -->\n\nGiveConsentRoutingModule->GiveConsentModule\n\n\n\n\n\nToolbarModule\n\nToolbarModule\n\nGiveConsentModule -->\n\nToolbarModule->GiveConsentModule\n\n\n\n\n\nConsentsService\n\nConsentsService\n\nGiveConsentModule -->\n\nConsentsService->GiveConsentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/modules/give-consent/give-consent.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            GiveConsentComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ConsentsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GiveConsentRoutingModule\n                        \n                        \n                            ToolbarModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducers, effects } from '@core/store';\n\nimport { ConsentsService } from '@core/services/consents.service';\n\nimport { ToolbarModule } from '@share/modules/toolbar/toolbar.module';\n\nimport { GiveConsentRoutingModule } from './give-consent-routing.module';\n\nimport { GiveConsentComponent } from './containers/give-consent.component';\n\n@NgModule({\n  imports: [\n    // core\n    CommonModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    // material\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    // share\n    ToolbarModule,\n    // data\n    GiveConsentRoutingModule,\n    // store\n    EffectsModule.forFeature(effects),\n    StoreModule.forFeature('consents', reducers)\n  ],\n  declarations: [\n    GiveConsentComponent\n  ],\n  providers: [\n    ConsentsService\n  ]\n})\nexport class GiveConsentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GiveConsentRoutingModule.html":{"url":"modules/GiveConsentRoutingModule.html","title":"module - GiveConsentRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    GiveConsentRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/modules/give-consent/give-consent-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { GiveConsentComponent } from './containers/give-consent.component';\n\nconst routes: Route[] = [\n  {\n    path: '',\n    component: GiveConsentComponent,\n  },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GiveConsentRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HideAfterModuleLoaded.html":{"url":"classes/HideAfterModuleLoaded.html","title":"class - HideAfterModuleLoaded","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HideAfterModuleLoaded\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SpinnerActionTypes.HideAfterModuleLoaded\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/modules/spinner/store/actions/spinner.action.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nexport enum SpinnerActionTypes {\n  ShowOnModuleLoading = '[Spinner] Show On Module Loading',\n  HideAfterModuleLoaded = '[Spinner] Hide After Module Is Loaded',\n}\n\nexport class ShowOnModuleLoading implements Action {\n  readonly type = SpinnerActionTypes.ShowOnModuleLoading;\n}\n\nexport class HideAfterModuleLoaded implements Action {\n  readonly type = SpinnerActionTypes.HideAfterModuleLoaded;\n}\n\n// action types\nexport type SpinnerActions =\n  | ShowOnModuleLoading\n  | HideAfterModuleLoaded;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConsents.html":{"url":"classes/LoadConsents.html","title":"class - LoadConsents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConsents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/actions/consents.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/actions/consents.actions.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConsentsActionTypes.LoadConsents\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nimport { ConsentRead, ConsentWrite } from '@share/models/consent.model';\n\nexport enum ConsentsActionTypes {\n  LoadConsents = '[Consents List] Load Team',\n  LoadConsentsSucceeded = '[Consents List] Load Team Succeeded',\n  LoadConsentsFailed = '[Consents List] Load Team Failed',\n\n  CreateNewConsent = '[Give Consent] Create New Consent',\n  RemoveConsent = '[Give Consent] Remove Consent'\n}\n\nexport class LoadConsents implements Action {\n  readonly type = ConsentsActionTypes.LoadConsents;\n\n  constructor(public payload: { pageIndex: number, pageSize: number }) { }\n}\n\nexport class LoadConsentsSucceeded implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsSucceeded;\n\n  constructor(public payload: { consents: ConsentRead[], totalCount: number }) { }\n}\n\nexport class LoadConsentsFailed implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsFailed;\n\n  constructor(public payload: any) { }\n}\n\nexport class CreateNewConsent implements Action {\n  readonly type = ConsentsActionTypes.CreateNewConsent;\n\n  constructor(public payload: ConsentWrite) { }\n}\n\nexport class RemoveConsent implements Action {\n  readonly type = ConsentsActionTypes.RemoveConsent;\n\n  constructor(public payload: { id: number, pageSize: number }) { }\n}\n\nexport type ConsentsActions =\n  | LoadConsents\n  | LoadConsentsSucceeded\n  | LoadConsentsFailed\n  | CreateNewConsent\n  | RemoveConsent;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConsentsFailed.html":{"url":"classes/LoadConsentsFailed.html","title":"class - LoadConsentsFailed","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConsentsFailed\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/actions/consents.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/actions/consents.actions.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConsentsActionTypes.LoadConsentsFailed\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nimport { ConsentRead, ConsentWrite } from '@share/models/consent.model';\n\nexport enum ConsentsActionTypes {\n  LoadConsents = '[Consents List] Load Team',\n  LoadConsentsSucceeded = '[Consents List] Load Team Succeeded',\n  LoadConsentsFailed = '[Consents List] Load Team Failed',\n\n  CreateNewConsent = '[Give Consent] Create New Consent',\n  RemoveConsent = '[Give Consent] Remove Consent'\n}\n\nexport class LoadConsents implements Action {\n  readonly type = ConsentsActionTypes.LoadConsents;\n\n  constructor(public payload: { pageIndex: number, pageSize: number }) { }\n}\n\nexport class LoadConsentsSucceeded implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsSucceeded;\n\n  constructor(public payload: { consents: ConsentRead[], totalCount: number }) { }\n}\n\nexport class LoadConsentsFailed implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsFailed;\n\n  constructor(public payload: any) { }\n}\n\nexport class CreateNewConsent implements Action {\n  readonly type = ConsentsActionTypes.CreateNewConsent;\n\n  constructor(public payload: ConsentWrite) { }\n}\n\nexport class RemoveConsent implements Action {\n  readonly type = ConsentsActionTypes.RemoveConsent;\n\n  constructor(public payload: { id: number, pageSize: number }) { }\n}\n\nexport type ConsentsActions =\n  | LoadConsents\n  | LoadConsentsSucceeded\n  | LoadConsentsFailed\n  | CreateNewConsent\n  | RemoveConsent;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadConsentsSucceeded.html":{"url":"classes/LoadConsentsSucceeded.html","title":"class - LoadConsentsSucceeded","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadConsentsSucceeded\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/actions/consents.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/actions/consents.actions.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConsentsActionTypes.LoadConsentsSucceeded\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nimport { ConsentRead, ConsentWrite } from '@share/models/consent.model';\n\nexport enum ConsentsActionTypes {\n  LoadConsents = '[Consents List] Load Team',\n  LoadConsentsSucceeded = '[Consents List] Load Team Succeeded',\n  LoadConsentsFailed = '[Consents List] Load Team Failed',\n\n  CreateNewConsent = '[Give Consent] Create New Consent',\n  RemoveConsent = '[Give Consent] Remove Consent'\n}\n\nexport class LoadConsents implements Action {\n  readonly type = ConsentsActionTypes.LoadConsents;\n\n  constructor(public payload: { pageIndex: number, pageSize: number }) { }\n}\n\nexport class LoadConsentsSucceeded implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsSucceeded;\n\n  constructor(public payload: { consents: ConsentRead[], totalCount: number }) { }\n}\n\nexport class LoadConsentsFailed implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsFailed;\n\n  constructor(public payload: any) { }\n}\n\nexport class CreateNewConsent implements Action {\n  readonly type = ConsentsActionTypes.CreateNewConsent;\n\n  constructor(public payload: ConsentWrite) { }\n}\n\nexport class RemoveConsent implements Action {\n  readonly type = ConsentsActionTypes.RemoveConsent;\n\n  constructor(public payload: { id: number, pageSize: number }) { }\n}\n\nexport type ConsentsActions =\n  | LoadConsents\n  | LoadConsentsSucceeded\n  | LoadConsentsFailed\n  | CreateNewConsent\n  | RemoveConsent;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MainComponent.html":{"url":"components/MainComponent.html","title":"component - MainComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MainComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/projects/main/containers/main.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-main\n            \n\n            \n                styleUrls\n                ./main.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./main.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss'],\n})\nexport class MainComponent { }\n\n    \n\n    \n        \n  \n  \n    Didomi Challenge\n    \n      \n      \n        \n          Give Consent\n        \n      \n      \n      \n        \n          Collected Consents\n        \n      \n      \n    \n  \n  \n  \n    \n  \n\n    \n\n    \n                \n                    ./main.component.scss\n                \n                @import \"src/assets/styles/variables.scss\";\n\n.sidenav-container {\n   height: 100%;\n }\n\n .sidenav-heading {\n   padding: 16px;\n   color: $color-blue;\n }\n\n .sidebar-link {\n  font-size: 16px;\n  text-decoration: none;\n  color: $color-black;\n\n  &--active {\n    font-weight: 700;\n    color: $color-blue;\n  }\n }\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        Didomi Challenge                                  Give Consent                                            Collected Consents                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MainComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MainModule.html":{"url":"modules/MainModule.html","title":"module - MainModule","body":"\n                   \n\n\n\n\n    Modules\n    MainModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MainModule\n\n\n\ncluster_MainModule_declarations\n\n\n\ncluster_MainModule_imports\n\n\n\n\nMainComponent\n\nMainComponent\n\n\n\nMainModule\n\nMainModule\n\nMainModule -->\n\nMainComponent->MainModule\n\n\n\n\n\nMainRoutingModule\n\nMainRoutingModule\n\nMainModule -->\n\nMainRoutingModule->MainModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/main.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MainComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MainRoutingModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatDividerModule } from '@angular/material/divider';\n\nimport { MainRoutingModule } from './main-routing.module';\n\nimport { MainComponent } from './containers/main.component';\n\n@NgModule({\n  imports: [\n    // core\n    CommonModule,\n    RouterModule,\n    FlexLayoutModule,\n    // material\n    MatSidenavModule,\n    MatListModule,\n    MatDividerModule,\n    // data\n    MainRoutingModule\n\n  ],\n  declarations: [\n    MainComponent\n  ]\n})\nexport class MainModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MainRoutingModule.html":{"url":"modules/MainRoutingModule.html","title":"module - MainRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    MainRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/projects/main/main-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MainComponent } from './containers/main.component';\n\nconst routes: Route[] = [\n  {\n    path: '',\n    component: MainComponent,\n    children: [\n      {\n        path: 'consents',\n        loadChildren: () =>\n          import('./modules/consents/consents.module').then(m => m.ConsentsModule)\n      },\n      {\n        path: 'give-consent',\n        loadChildren: () =>\n          import('./modules/give-consent/give-consent.module').then(m => m.GiveConsentModule)\n      },\n      { path: '', redirectTo: 'consents', pathMatch: 'full' }\n    ]\n  },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MainRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MockPrivate.html":{"url":"interfaces/MockPrivate.html","title":"interface - MockPrivate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MockPrivate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/mocks/mock-private.type.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [name: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/app/common/share/mocks/mock-private.type.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export declare interface MockPrivate {\n  [name: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockStore.html":{"url":"classes/MockStore.html","title":"class - MockStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/testing/mock-store.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dispatch\n                            \n                            \n                                pipe\n                            \n                            \n                                select\n                            \n                            \n                                setState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                    \n                        \n                            Default value : new BehaviorSubject(undefined)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/testing/mock-store.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dispatch\n                        \n                        \n                    \n                \n            \n            \n                \ndispatch(action: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/share/testing/mock-store.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pipe\n                        \n                        \n                    \n                \n            \n            \n                \npipe()\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/share/testing/mock-store.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            select\n                        \n                        \n                    \n                \n            \n            \n                \nselect(selector?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/share/testing/mock-store.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setState\n                        \n                        \n                    \n                \n            \n            \n                \nsetState(data: T)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/share/testing/mock-store.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport class MockStore {\n  private state: BehaviorSubject = new BehaviorSubject(undefined);\n\n  setState(data: T) {\n    this.state.next(data);\n  }\n\n  select(selector?: any): Observable {\n    return this.state.asObservable();\n  }\n\n  pipe(): Observable {\n    return this.state.asObservable();\n  }\n\n  dispatch(action: any) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveConsent.html":{"url":"classes/RemoveConsent.html","title":"class - RemoveConsent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveConsent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/store/actions/consents.actions.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                payload\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/store/actions/consents.actions.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            payload\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ConsentsActionTypes.RemoveConsent\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/store/actions/consents.actions.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nimport { ConsentRead, ConsentWrite } from '@share/models/consent.model';\n\nexport enum ConsentsActionTypes {\n  LoadConsents = '[Consents List] Load Team',\n  LoadConsentsSucceeded = '[Consents List] Load Team Succeeded',\n  LoadConsentsFailed = '[Consents List] Load Team Failed',\n\n  CreateNewConsent = '[Give Consent] Create New Consent',\n  RemoveConsent = '[Give Consent] Remove Consent'\n}\n\nexport class LoadConsents implements Action {\n  readonly type = ConsentsActionTypes.LoadConsents;\n\n  constructor(public payload: { pageIndex: number, pageSize: number }) { }\n}\n\nexport class LoadConsentsSucceeded implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsSucceeded;\n\n  constructor(public payload: { consents: ConsentRead[], totalCount: number }) { }\n}\n\nexport class LoadConsentsFailed implements Action {\n  readonly type = ConsentsActionTypes.LoadConsentsFailed;\n\n  constructor(public payload: any) { }\n}\n\nexport class CreateNewConsent implements Action {\n  readonly type = ConsentsActionTypes.CreateNewConsent;\n\n  constructor(public payload: ConsentWrite) { }\n}\n\nexport class RemoveConsent implements Action {\n  readonly type = ConsentsActionTypes.RemoveConsent;\n\n  constructor(public payload: { id: number, pageSize: number }) { }\n}\n\nexport type ConsentsActions =\n  | LoadConsents\n  | LoadConsentsSucceeded\n  | LoadConsentsFailed\n  | CreateNewConsent\n  | RemoveConsent;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShowOnModuleLoading.html":{"url":"classes/ShowOnModuleLoading.html","title":"class - ShowOnModuleLoading","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShowOnModuleLoading\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Action\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SpinnerActionTypes.ShowOnModuleLoading\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/modules/spinner/store/actions/spinner.action.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@ngrx/store';\n\nexport enum SpinnerActionTypes {\n  ShowOnModuleLoading = '[Spinner] Show On Module Loading',\n  HideAfterModuleLoaded = '[Spinner] Hide After Module Is Loaded',\n}\n\nexport class ShowOnModuleLoading implements Action {\n  readonly type = SpinnerActionTypes.ShowOnModuleLoading;\n}\n\nexport class HideAfterModuleLoaded implements Action {\n  readonly type = SpinnerActionTypes.HideAfterModuleLoaded;\n}\n\n// action types\nexport type SpinnerActions =\n  | ShowOnModuleLoading\n  | HideAfterModuleLoaded;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SpinnerComponent.html":{"url":"components/SpinnerComponent.html","title":"component - SpinnerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SpinnerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/common/share/modules/spinner/containers/spinner.component.ts\n\n\n\n    \n        Extends\n    \n    \n                Unsubscriber\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-spinner\n            \n\n            \n                styleUrls\n                ./spinner.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./spinner.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isVisibleSpinner$\n                            \n                            \n                                    Protected\n                                destroy$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                unsubscribeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(spinnerStore: Store, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/share/modules/spinner/containers/spinner.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spinnerStore\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/share/modules/spinner/containers/spinner.component.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         Unsubscriber\n\n                \n            \n            \n                \n                        Defined in         Unsubscriber:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Inherited from         Unsubscriber\n\n                \n            \n            \n                \n                        Defined in         Unsubscriber:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isVisibleSpinner$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.spinnerStore.pipe(select(fromSpinnerStore.isVisibleOnModuleLoading))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/share/modules/spinner/containers/spinner.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            destroy$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         Unsubscriber\n\n                                \n                            \n                        \n                            \n                                    Defined in         Unsubscriber:7\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { GuardsCheckEnd, NavigationCancel, NavigationEnd, NavigationError, Router } from '@angular/router';\n\nimport { select, Store } from '@ngrx/store';\n\nimport { Unsubscriber } from '@core/classes/unsubscriber';\n\nimport * as fromSpinnerStore from '@share/modules/spinner/store';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent extends Unsubscriber implements OnInit {\n  isVisibleSpinner$ = this.spinnerStore.pipe(select(fromSpinnerStore.isVisibleOnModuleLoading));\n\n  constructor(private spinnerStore: Store,\n              private router: Router) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.router.events\n      .pipe(\n        debounceTime(500),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((event: any): void => {\n        if (event instanceof GuardsCheckEnd) {\n          if (event.shouldActivate === true ) {\n            this.spinnerStore.dispatch(new fromSpinnerStore.ShowOnModuleLoading());\n          }\n        } else if (event instanceof NavigationCancel || event instanceof NavigationEnd || event instanceof NavigationError) {\n          this.spinnerStore.dispatch(new fromSpinnerStore.HideAfterModuleLoaded());\n        }\n      });\n  }\n}\n\n    \n\n    \n        \n  \n\n\n    \n\n    \n                \n                    ./spinner.component.scss\n                \n                @import \"src/assets/styles/variables.scss\";\n\n:host {\n  position: absolute;\n  top: 0;\n}\n\n.spinner-wrapper {\n  position: fixed;\n  top: 0;\n  z-index: 3001;\n  width: 100%;\n  height: 100%;\n  background-color: rgba($color-white, .9);\n  animation: fadein .5s ease-out 1;\n\n  .spinner {\n    position: relative;\n    top: 50%;\n    width: 50px;\n    height: 50px;\n    margin: 5px auto 0;\n    border: 5px solid #ccc;\n    border-top: 5px solid $color-blue;\n    border-radius: 50%;\n    animation: spin 1.5s linear infinite;\n  }\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n@keyframes fadein {\n  0% {opacity: 0;}\n  100% {opacity: 1;}\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SpinnerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/SpinnerInterceptor.html":{"url":"interceptors/SpinnerInterceptor.html","title":"interceptor - SpinnerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  SpinnerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/interceptors/spinner.interceptor.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                countRequests\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(spinnerStore: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/common/core/interceptors/spinner.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spinnerStore\n                                                  \n                                                        \n                                                                        Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(request: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/interceptors/spinner.interceptor.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            countRequests\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/interceptors/spinner.interceptor.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Store } from '@ngrx/store';\n\nimport { finalize } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n// dependencies\nimport * as fromSpinnerStore from '@share/modules/spinner/store';\n\n@Injectable()\nexport class SpinnerInterceptor implements HttpInterceptor {\n  countRequests = 0;\n\n  constructor(private spinnerStore: Store) {}\n\n  // handles all requests and show spinner if at least one request still in process\n  intercept(request: HttpRequest, next: HttpHandler): Observable {\n    this.countRequests++;\n\n    if (this.countRequests === 1) {\n      this.spinnerStore.dispatch(new fromSpinnerStore.ShowOnModuleLoading());\n    }\n\n    const clonedRequest: HttpRequest = request.clone();\n\n    return next.handle(clonedRequest)\n      .pipe(\n        finalize(() => {\n          this.countRequests--;\n\n          if (this.countRequests === 0) {\n            this.spinnerStore.dispatch(new fromSpinnerStore.HideAfterModuleLoaded());\n          }\n        }\n      ));\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SpinnerModule.html":{"url":"modules/SpinnerModule.html","title":"module - SpinnerModule","body":"\n                   \n\n\n\n\n    Modules\n    SpinnerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SpinnerModule\n\n\n\ncluster_SpinnerModule_declarations\n\n\n\ncluster_SpinnerModule_exports\n\n\n\n\nSpinnerComponent\n\nSpinnerComponent\n\n\n\nSpinnerModule\n\nSpinnerModule\n\nSpinnerModule -->\n\nSpinnerComponent->SpinnerModule\n\n\n\n\n\nSpinnerComponent \n\nSpinnerComponent \n\nSpinnerComponent  -->\n\nSpinnerModule->SpinnerComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/common/share/modules/spinner/spinner.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            SpinnerComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SpinnerComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { StoreModule } from '@ngrx/store';\n\nimport { SpinnerComponent } from './containers/spinner.component';\n\nimport { reducers } from '@share/modules/spinner/store';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    StoreModule.forFeature('spinner', reducers)\n  ],\n  declarations: [\n    SpinnerComponent\n  ],\n  exports: [\n    SpinnerComponent\n  ]\n})\nexport class SpinnerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpinnerModuleStore.html":{"url":"interfaces/SpinnerModuleStore.html","title":"interface - SpinnerModuleStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpinnerModuleStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/modules/spinner/store/reducers/index.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        spinner\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        spinner\n                                    \n                                \n                                \n                                    \n                                        spinner:         fromSpinner.SpinnerState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         fromSpinner.SpinnerState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ActionReducerMap, createFeatureSelector } from '@ngrx/store';\n\nimport * as fromSpinner from './spinner.reducer';\n\nexport interface SpinnerModuleStore {\n  spinner: fromSpinner.SpinnerState;\n}\n\nexport const reducers: ActionReducerMap = {\n  spinner: fromSpinner.reducer,\n};\n\nexport const getSpinnerModuleStore = createFeatureSelector('spinner');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpinnerState.html":{"url":"interfaces/SpinnerState.html","title":"interface - SpinnerState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpinnerState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isVisibleOnModuleLoading\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isVisibleOnModuleLoading\n                                    \n                                \n                                \n                                    \n                                        isVisibleOnModuleLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { SpinnerActions, SpinnerActionTypes } from '../actions/spinner.action';\n\nexport interface SpinnerState {\n  // state\n  isVisibleOnModuleLoading: boolean;\n}\n\nexport const initialState: SpinnerState = {\n  // state\n  isVisibleOnModuleLoading: false\n};\n\nexport function reducer(state = initialState, action: SpinnerActions): SpinnerState {\n  switch (action.type) {\n    case SpinnerActionTypes.ShowOnModuleLoading: {\n      return {\n        ...state,\n        isVisibleOnModuleLoading: true,\n      };\n    }\n    case SpinnerActionTypes.HideAfterModuleLoaded: {\n      return {\n        ...state,\n        isVisibleOnModuleLoading: false,\n      };\n    }\n  }\n  return state;\n}\n\n// state\nexport const isVisibleOnModuleLoading = (state: SpinnerState) => state.isVisibleOnModuleLoading;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ToolbarComponent.html":{"url":"components/ToolbarComponent.html","title":"component - ToolbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ToolbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/common/share/modules/toolbar/containers/toolbar.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-toolbar\n            \n\n            \n                styleUrls\n                ./toolbar.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./toolbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/common/share/modules/toolbar/containers/toolbar.component.ts:9\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.scss'],\n})\nexport class ToolbarComponent {\n  @Input() title: string;\n}\n\n    \n\n    \n        \n  \n    {{ title }}\n  \n  Documentation\n\n\n    \n\n    \n                \n                    ./toolbar.component.scss\n                \n                @import \"src/assets/styles/variables.scss\";\n\n.toolbar {\n  background-color: $color-white;\n  height: 60px;\n  padding: 10px 30px;\n  border-bottom: 1px solid $color-light-gray;\n\n  &-heading {\n    color: $color-black;\n    font-weight: 600;\n    font-size: 22px;\n  }\n\n  a {\n    font-size: 10px;;\n    color: $color-blue;\n  }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ title }}    Documentation'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ConsentsComponent', 'selector': 'app-consents'},{'name': 'GiveConsentComponent', 'selector': 'app-give-consent'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'SpinnerComponent', 'selector': 'app-spinner'},{'name': 'ToolbarComponent', 'selector': 'app-toolbar'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ToolbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ToolbarModule.html":{"url":"modules/ToolbarModule.html","title":"module - ToolbarModule","body":"\n                   \n\n\n\n\n    Modules\n    ToolbarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ToolbarModule\n\n\n\ncluster_ToolbarModule_declarations\n\n\n\ncluster_ToolbarModule_exports\n\n\n\n\nToolbarComponent\n\nToolbarComponent\n\n\n\nToolbarModule\n\nToolbarModule\n\nToolbarModule -->\n\nToolbarComponent->ToolbarModule\n\n\n\n\n\nToolbarComponent \n\nToolbarComponent \n\nToolbarComponent  -->\n\nToolbarModule->ToolbarComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/common/share/modules/toolbar/toolbar.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ToolbarComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ToolbarComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nimport { ToolbarComponent } from './containers/toolbar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatToolbarModule\n  ],\n  declarations: [\n    ToolbarComponent\n  ],\n  exports: [\n    ToolbarComponent\n  ]\n})\nexport class ToolbarModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Unsubscriber.html":{"url":"classes/Unsubscriber.html","title":"class - Unsubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Unsubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/common/core/classes/unsubscriber.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                destroy$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                unsubscribeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            destroy$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/common/core/classes/unsubscriber.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/classes/unsubscriber.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unsubscribeAll\n                        \n                        \n                    \n                \n            \n            \n                \nunsubscribeAll()\n                \n            \n\n\n            \n                \n                    Defined in src/app/common/core/classes/unsubscriber.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OnDestroy } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\n// class helps to easily unsibscribe\nexport class Unsubscriber implements OnDestroy {\n  protected destroy$: Subject = new Subject();\n\n  ngOnDestroy(): void {\n    this.unsubscribeAll();\n  }\n\n  unsubscribeAll(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                e2e/src/app.po.ts\n            \n            class\n            AppPage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/app-routing.module.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/classes/unsubscriber.ts\n            \n            class\n            Unsubscriber\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/interceptors/spinner.interceptor.ts\n            \n            interceptor\n            SpinnerInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/services/consents.service.mock.ts\n            \n            injectable\n            ConsentsServiceMock\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/common/core/services/consents.service.ts\n            \n            injectable\n            ConsentsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/common/core/store/actions/consents.actions.ts\n            \n            class\n            CreateNewConsent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/store/actions/consents.actions.ts\n            \n            class\n            LoadConsents\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/store/actions/consents.actions.ts\n            \n            class\n            LoadConsentsFailed\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/store/actions/consents.actions.ts\n            \n            class\n            LoadConsentsSucceeded\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/store/actions/consents.actions.ts\n            \n            class\n            RemoveConsent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/core/store/effects/consents.effect.ts\n            \n            injectable\n            ConsentsEffect\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/common/core/store/effects/index.ts\n            \n            variable\n            effects\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            interface\n            ConsentsState\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            variable\n            getConsents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            variable\n            getConsentsTotalCount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            variable\n            getIsConsentsLoading\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/consents.reducer.ts\n            \n            variable\n            initialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/index.ts\n            \n            interface\n            ConsentsModuleStore\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/index.ts\n            \n            variable\n            consentsModuleStoreInitialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/index.ts\n            \n            variable\n            getConsentsModuleStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/reducers/index.ts\n            \n            variable\n            reducers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/selectors/consents.selector.ts\n            \n            variable\n            getConsents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/selectors/consents.selector.ts\n            \n            variable\n            getConsentsState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/selectors/consents.selector.ts\n            \n            variable\n            getConsentsTotalCount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/core/store/selectors/consents.selector.ts\n            \n            variable\n            getIsConsentsLoading\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/mocks/consent.mock.ts\n            \n            variable\n            ConsentReadMock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/mocks/consent.mock.ts\n            \n            variable\n            ConsentWriteMock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/mocks/mock-private.type.ts\n            \n            interface\n            MockPrivate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/models/consent.model.ts\n            \n            class\n            Consent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/common/share/models/consent.model.ts\n            \n            class\n            ConsentRead\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/common/share/models/consent.model.ts\n            \n            class\n            ConsentWrite\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/containers/spinner.component.ts\n            \n            component\n            SpinnerComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n            \n            class\n            HideAfterModuleLoaded\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n            \n            class\n            ShowOnModuleLoading\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/index.ts\n            \n            interface\n            SpinnerModuleStore\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/index.ts\n            \n            variable\n            getSpinnerModuleStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/index.ts\n            \n            variable\n            reducers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n            \n            interface\n            SpinnerState\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n            \n            function\n            reducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n            \n            variable\n            initialState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n            \n            variable\n            isVisibleOnModuleLoading\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/selectors/spinner.selectors.ts\n            \n            variable\n            getSpinnerSelector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/spinner/store/selectors/spinner.selectors.ts\n            \n            variable\n            isVisibleOnModuleLoading\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/common/share/modules/toolbar/containers/toolbar.component.ts\n            \n            component\n            ToolbarComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/common/share/testing/mock-store.ts\n            \n            class\n            MockStore\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/projects/main/containers/main.component.ts\n            \n            component\n            MainComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/projects/main/main-routing.module.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/projects/main/modules/consents/consents-routing.module.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/projects/main/modules/consents/containers/consents.component.ts\n            \n            component\n            ConsentsComponent\n            \n                27 %\n                (5/18)\n            \n        \n        \n            \n                \n                src/app/projects/main/modules/give-consent/containers/give-consent.component.ts\n            \n            component\n            GiveConsentComponent\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/projects/main/modules/give-consent/give-consent-routing.module.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 9.1.1\n        \n            @angular/cdk : 9.2.1\n        \n            @angular/common : 9.1.1\n        \n            @angular/compiler : 9.1.1\n        \n            @angular/core : 9.1.1\n        \n            @angular/flex-layout : 9.0.0-beta.29\n        \n            @angular/forms : 9.1.1\n        \n            @angular/material : 9.2.1\n        \n            @angular/platform-browser : 9.1.1\n        \n            @angular/platform-browser-dynamic : 9.1.1\n        \n            @angular/router : 9.1.1\n        \n            @compodoc/compodoc : 1.1.11\n        \n            @ngrx/effects : 9.1.0\n        \n            @ngrx/entity : 9.1.0\n        \n            @ngrx/store : 9.1.0\n        \n            @ngrx/store-devtools : 9.1.0\n        \n            install : 0.13.0\n        \n            json-server : 0.16.1\n        \n            lodash-es : 4.17.15\n        \n            npm : 6.14.4\n        \n            rxjs : 6.5.4\n        \n            tslib : 1.10.0\n        \n            zone.js : 0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConsentsActionTypes   (src/.../consents.actions.ts)\n                        \n                        \n                            ConsentsGivenForOptions   (src/.../enums.ts)\n                        \n                        \n                            SpinnerActionTypes   (src/.../spinner.action.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/common/core/store/actions/consents.actions.ts\n    \n        \n            \n                \n                    \n                        \n                        ConsentsActionTypes\n                    \n                \n                        \n                            \n                                 LoadConsents\n                            \n                        \n                        \n                            \n                                Value : [Consents List] Load Team\n                            \n                        \n                        \n                            \n                                 LoadConsentsSucceeded\n                            \n                        \n                        \n                            \n                                Value : [Consents List] Load Team Succeeded\n                            \n                        \n                        \n                            \n                                 LoadConsentsFailed\n                            \n                        \n                        \n                            \n                                Value : [Consents List] Load Team Failed\n                            \n                        \n                        \n                            \n                                 CreateNewConsent\n                            \n                        \n                        \n                            \n                                Value : [Give Consent] Create New Consent\n                            \n                        \n                        \n                            \n                                 RemoveConsent\n                            \n                        \n                        \n                            \n                                Value : [Give Consent] Remove Consent\n                            \n                        \n            \n        \n\n    src/app/common/core/enums/enums.ts\n    \n        \n            \n                \n                    \n                        \n                        ConsentsGivenForOptions\n                    \n                \n                        \n                            \n                                 Recieive newsletter\n                            \n                        \n                        \n                            \n                                Value : Recieive newsletter\n                            \n                        \n                        \n                            \n                                 Be shown targeted ads\n                            \n                        \n                        \n                            \n                                Value : Be shown targeted ads\n                            \n                        \n                        \n                            \n                                 Contribute to anonymous visit statistics\n                            \n                        \n                        \n                            \n                                Value : Contribute to anonymous visit statistics\n                            \n                        \n            \n        \n\n    src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n    \n        \n            \n                \n                    \n                        \n                        SpinnerActionTypes\n                    \n                \n                        \n                            \n                                 ShowOnModuleLoading\n                            \n                        \n                        \n                            \n                                Value : [Spinner] Show On Module Loading\n                            \n                        \n                        \n                            \n                                 HideAfterModuleLoaded\n                            \n                        \n                        \n                            \n                                Value : [Spinner] Hide After Module Is Loaded\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            reducer   (src/.../consents.reducer.ts)\n                        \n                        \n                            reducer   (src/.../spinner.reducer.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/common/core/store/reducers/consents.reducer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            reducer\n                        \n                        \n                    \n                \n            \n            \n                \nreducer(state, action)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ConsentsState\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            reducer\n                        \n                        \n                    \n                \n            \n            \n                \nreducer(state, action)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SpinnerState\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDidomiChallenge\nThis project was generated with Angular CLI version 9.1.1.\nDevelopment server\nRun npm run start for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nDevelopment JSON server\nRun npm run start:server for a JSON server.\nCode styling examples\nHTML:\n\nClass naming:\n---Code scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun npm run build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun npm run test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun npm run e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConsentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConsentsRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GiveConsentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GiveConsentRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MainModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MainRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SpinnerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ToolbarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_ConsentsModule\n\n\n\ncluster_ConsentsModule_declarations\n\n\n\ncluster_ConsentsModule_imports\n\n\n\ncluster_ConsentsModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_GiveConsentModule\n\n\n\ncluster_GiveConsentModule_declarations\n\n\n\ncluster_GiveConsentModule_imports\n\n\n\ncluster_MainModule\n\n\n\ncluster_MainModule_declarations\n\n\n\ncluster_MainModule_imports\n\n\n\ncluster_SpinnerModule\n\n\n\ncluster_SpinnerModule_declarations\n\n\n\ncluster_SpinnerModule_exports\n\n\n\ncluster_ToolbarModule\n\n\n\ncluster_ToolbarModule_declarations\n\n\n\ncluster_ToolbarModule_exports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSpinnerModule\n\nSpinnerModule\n\nAppModule -->\n\nSpinnerModule->AppModule\n\n\n\n\n\nSpinnerComponent \n\nSpinnerComponent \n\nSpinnerComponent  -->\n\nSpinnerModule->SpinnerComponent \n\n\n\n\n\nConsentsComponent\n\nConsentsComponent\n\n\n\nConsentsModule\n\nConsentsModule\n\nConsentsModule -->\n\nConsentsComponent->ConsentsModule\n\n\n\n\n\nConsentsRoutingModule\n\nConsentsRoutingModule\n\nConsentsModule -->\n\nConsentsRoutingModule->ConsentsModule\n\n\n\n\n\nToolbarModule\n\nToolbarModule\n\nConsentsModule -->\n\nToolbarModule->ConsentsModule\n\n\n\n\n\nGiveConsentModule\n\nGiveConsentModule\n\nGiveConsentModule -->\n\nToolbarModule->GiveConsentModule\n\n\n\n\n\nToolbarComponent \n\nToolbarComponent \n\nToolbarComponent  -->\n\nToolbarModule->ToolbarComponent \n\n\n\n\n\nConsentsService\n\nConsentsService\n\nConsentsModule -->\n\nConsentsService->ConsentsModule\n\n\n\nGiveConsentModule -->\n\nConsentsService->GiveConsentModule\n\n\n\n\n\nSpinnerInterceptor\n\nSpinnerInterceptor\n\nCoreModule -->\n\nSpinnerInterceptor->CoreModule\n\n\n\n\n\nGiveConsentComponent\n\nGiveConsentComponent\n\nGiveConsentModule -->\n\nGiveConsentComponent->GiveConsentModule\n\n\n\n\n\nGiveConsentRoutingModule\n\nGiveConsentRoutingModule\n\nGiveConsentModule -->\n\nGiveConsentRoutingModule->GiveConsentModule\n\n\n\n\n\nMainComponent\n\nMainComponent\n\n\n\nMainModule\n\nMainModule\n\nMainModule -->\n\nMainComponent->MainModule\n\n\n\n\n\nMainRoutingModule\n\nMainRoutingModule\n\nMainModule -->\n\nMainRoutingModule->MainModule\n\n\n\n\n\nSpinnerComponent\n\nSpinnerComponent\n\nSpinnerModule -->\n\nSpinnerComponent->SpinnerModule\n\n\n\n\n\nToolbarComponent\n\nToolbarComponent\n\nToolbarModule -->\n\nToolbarComponent->ToolbarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConsentsActions   (src/.../consents.actions.ts)\n                        \n                        \n                            SpinnerActions   (src/.../spinner.action.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/common/core/store/actions/consents.actions.ts\n    \n    \n        \n            \n                \n                    \n                    ConsentsActions\n                \n            \n            \n                \n                        LoadConsents | LoadConsentsSucceeded | LoadConsentsFailed | CreateNewConsent | RemoveConsent\n\n                \n            \n        \n    \n    src/app/common/share/modules/spinner/store/actions/spinner.action.ts\n    \n    \n        \n            \n                \n                    \n                    SpinnerActions\n                \n            \n            \n                \n                        ShowOnModuleLoading | HideAfterModuleLoaded\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConsentReadMock   (src/.../consent.mock.ts)\n                        \n                        \n                            consentsModuleStoreInitialState   (src/.../index.ts)\n                        \n                        \n                            ConsentWriteMock   (src/.../consent.mock.ts)\n                        \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            effects   (src/.../index.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            getConsents   (src/.../consents.reducer.ts)\n                        \n                        \n                            getConsents   (src/.../consents.selector.ts)\n                        \n                        \n                            getConsentsModuleStore   (src/.../index.ts)\n                        \n                        \n                            getConsentsState   (src/.../consents.selector.ts)\n                        \n                        \n                            getConsentsTotalCount   (src/.../consents.reducer.ts)\n                        \n                        \n                            getConsentsTotalCount   (src/.../consents.selector.ts)\n                        \n                        \n                            getIsConsentsLoading   (src/.../consents.reducer.ts)\n                        \n                        \n                            getIsConsentsLoading   (src/.../consents.selector.ts)\n                        \n                        \n                            getSpinnerModuleStore   (src/.../index.ts)\n                        \n                        \n                            getSpinnerSelector   (src/.../spinner.selectors.ts)\n                        \n                        \n                            initialState   (src/.../consents.reducer.ts)\n                        \n                        \n                            initialState   (src/.../spinner.reducer.ts)\n                        \n                        \n                            isVisibleOnModuleLoading   (src/.../spinner.reducer.ts)\n                        \n                        \n                            isVisibleOnModuleLoading   (src/.../spinner.selectors.ts)\n                        \n                        \n                            reducers   (src/.../index.ts)\n                        \n                        \n                            reducers   (src/.../index.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                            routes   (src/.../give-consent-routing.module.ts)\n                        \n                        \n                            routes   (src/.../consents-routing.module.ts)\n                        \n                        \n                            routes   (src/.../main-routing.module.ts)\n                        \n                        \n                            routes   (src/.../app-routing.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/common/share/mocks/consent.mock.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ConsentReadMock\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: 0,\n  name: 'Slava P',\n  email: 'kainsp92@gmail.com',\n  consentsGivenFor: 'Recieive newsletter, Be shown targeted ads, Contribute to anonymous visit statistics'\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ConsentWriteMock\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  id: 0,\n  name: 'Slava P',\n  email: 'kainsp92@gmail.com',\n  consentsGivenFor: [\n    {\n      label: 'Recieive newsletter',\n      checked: true\n    },\n    {\n      label: 'Be shown targeted ads',\n      checked: false\n    },\n    {\n      label: 'Contribute to anonymous visit statistics',\n      checked: false\n    }\n  ]\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/common/core/store/reducers/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            consentsModuleStoreInitialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsentsModuleStore\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  consents: fromConsents.initialState\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getConsentsModuleStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createFeatureSelector('consents')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reducers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionReducerMap\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  consents: fromConsents.reducer\n}\n                        \n                    \n\n\n            \n        \n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n\n\n            \n        \n\n    src/app/common/core/store/effects/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            effects\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  ConsentsEffect,\n]\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n  apiUrl: 'http://localhost:3000'\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/common/core/store/reducers/consents.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getConsents\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: ConsentsState) => state.consents.data\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getConsentsTotalCount\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: ConsentsState) => state.consents.totalCount\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getIsConsentsLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: ConsentsState) => state.consents.loading\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            initialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsentsState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  consents: {\n    data: [],\n    totalCount: 0,\n    loaded: false,\n    loading: false,\n    error: false\n  }\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/common/core/store/selectors/consents.selector.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getConsents\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getConsentsState, consentsReducer.getConsents)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getConsentsState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(\n    getConsentsModuleStore,\n    (state: ConsentsModuleStore = consentsModuleStoreInitialState) => state.consents\n  )\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getConsentsTotalCount\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getConsentsState, consentsReducer.getConsentsTotalCount)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getIsConsentsLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getConsentsState, consentsReducer.getIsConsentsLoading)\n                        \n                    \n\n\n            \n        \n\n    src/app/common/share/modules/spinner/store/reducers/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getSpinnerModuleStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createFeatureSelector('spinner')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reducers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActionReducerMap\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  spinner: fromSpinner.reducer,\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/common/share/modules/spinner/store/selectors/spinner.selectors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getSpinnerSelector\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(\n  fromFeature.getSpinnerModuleStore,\n  (state: fromFeature.SpinnerModuleStore) => state.spinner,\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isVisibleOnModuleLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createSelector(getSpinnerSelector, fromSpinner.isVisibleOnModuleLoading)\n                        \n                    \n\n\n            \n        \n\n    src/app/common/share/modules/spinner/store/reducers/spinner.reducer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            initialState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpinnerState\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  // state\n  isVisibleOnModuleLoading: false\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isVisibleOnModuleLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (state: SpinnerState) => state.isVisibleOnModuleLoading\n                        \n                    \n\n\n            \n        \n\n    src/app/projects/main/modules/give-consent/give-consent-routing.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            routes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Route[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    path: '',\n    component: GiveConsentComponent,\n  },\n  { path: '**', redirectTo: '' }\n]\n                        \n                    \n\n\n            \n        \n\n    src/app/projects/main/modules/consents/consents-routing.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            routes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Route[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    path: '',\n    component: ConsentsComponent,\n  },\n  { path: '**', redirectTo: '' }\n]\n                        \n                    \n\n\n            \n        \n\n    src/app/projects/main/main-routing.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            routes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Route[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    path: '',\n    component: MainComponent,\n    children: [\n      {\n        path: 'consents',\n        loadChildren: () =>\n          import('./modules/consents/consents.module').then(m => m.ConsentsModule)\n      },\n      {\n        path: 'give-consent',\n        loadChildren: () =>\n          import('./modules/give-consent/give-consent.module').then(m => m.GiveConsentModule)\n      },\n      { path: '', redirectTo: 'consents', pathMatch: 'full' }\n    ]\n  },\n  { path: '**', redirectTo: '' }\n]\n                        \n                    \n\n\n            \n        \n\n    src/app/app-routing.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            routes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Route[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    path: '',\n    loadChildren: () => import('./projects/main/main.module').then(m => m.MainModule),\n  },\n  {path: '**', redirectTo: ''}\n]\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
